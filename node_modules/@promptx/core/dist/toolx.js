"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/.pnpm/tsup@8.5.0_jiti@2.5.1_postcss@8.5.6_tsx@4.20.5_typescript@5.9.2_yaml@2.8.1/node_modules/tsup/assets/cjs_shims.js
var init_cjs_shims = __esm({
  "../../node_modules/.pnpm/tsup@8.5.0_jiti@2.5.1_postcss@8.5.6_tsx@4.20.5_typescript@5.9.2_yaml@2.8.1/node_modules/tsup/assets/cjs_shims.js"() {
    "use strict";
  }
});

// src/toolx/SandboxIsolationManager.js
var require_SandboxIsolationManager = __commonJS({
  "src/toolx/SandboxIsolationManager.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var path = require("path");
    var Module = require("module");
    var logger = require("@promptx/logger");
    var SandboxIsolationManager = class {
      constructor(workingPath, options = {}) {
        this.workingPath = workingPath;
        this.toolboxPath = options.toolboxPath || workingPath;
        this.sandboxPath = workingPath;
        this.options = {
          enableDependencyLoading: true,
          enableBuiltinModules: true,
          enableFileSystemAccess: false,
          ...options
        };
        this.isolatedContext = null;
      }
      /**
       * 创建完全隔离的沙箱环境
       * @returns {Object} 隔离的沙箱上下文
       */
      createIsolatedContext() {
        if (this.isolatedContext) {
          return this.isolatedContext;
        }
        this.isolatedContext = {
          // 1. 模块系统隔离 - 核心功能
          require: this.createIsolatedRequire(),
          module: { exports: {} },
          exports: {},
          // 2. 进程环境隔离
          process: this.createIsolatedProcess(),
          // 3. 全局对象隔离
          ...this.createIsolatedGlobals(),
          // 4. 路径相关隔离
          __dirname: this.workingPath,
          __filename: path.join(this.workingPath, "sandbox.js"),
          // 5. 注入受限的 fs（直接可用）
          fs: this.createRestrictedFS(),
          // 6. 阻止动态代码执行
          eval: () => {
            throw new Error("[SandboxIsolation] eval is not allowed in sandbox");
          },
          Function: void 0
        };
        return this.isolatedContext;
      }
      /**
       * 创建隔离的require函数 - 解决核心依赖加载问题
       * @returns {Function} 隔离的require函数
       */
      createIsolatedRequire() {
        const contextFile = path.join(this.toolboxPath, "package.json");
        let sandboxRequire;
        try {
          sandboxRequire = Module.createRequire(contextFile);
        } catch (error) {
          const virtualContextFile = path.join(this.toolboxPath, "virtual-context.js");
          sandboxRequire = Module.createRequire(virtualContextFile);
        }
        return (moduleName) => {
          if (moduleName === "fs" || moduleName === "fs/promises") {
            return this.createRestrictedFS();
          }
          if (moduleName === "child_process") {
            throw new Error("[SandboxIsolation] child_process is not allowed in sandbox");
          }
          if (moduleName === "path") {
            return this.createRestrictedPath();
          }
          try {
            return sandboxRequire(moduleName);
          } catch (error) {
            return this.handleRequireFallback(moduleName, error);
          }
        };
      }
      /**
       * 处理require失败的智能fallback
       * @param {string} moduleName - 模块名
       * @param {Error} error - 原始错误
       * @returns {*} 模块对象或抛出错误
       */
      handleRequireFallback(moduleName, error) {
        if (this.options.enableBuiltinModules && this.isBuiltinModule(moduleName)) {
          try {
            return require(moduleName);
          } catch (builtinError) {
          }
        }
        if (this.options.analysisMode && error.code === "MODULE_NOT_FOUND") {
          logger.debug(`[SandboxIsolation] Analysis mode: mocking module ${moduleName}`);
          return this.createMockModule();
        }
        throw error;
      }
      /**
       * 检查是否为Node.js内置模块
       * @param {string} moduleName - 模块名
       * @returns {boolean} 是否为内置模块
       */
      isBuiltinModule(moduleName) {
        const builtinModules = [
          "path",
          "fs",
          "url",
          "crypto",
          "util",
          "os",
          "events",
          "stream",
          "http",
          "https",
          "querystring",
          "zlib",
          "buffer",
          "child_process"
        ];
        return builtinModules.includes(moduleName) || moduleName.startsWith("node:");
      }
      /**
       * 创建mock模块对象
       * @returns {Object} mock对象
       */
      createMockModule() {
        return new Proxy({}, {
          get: () => () => ({}),
          // 所有属性和方法都返回空函数/对象
          apply: () => ({}),
          // 如果被当作函数调用
          construct: () => ({})
          // 如果被当作构造函数
        });
      }
      /**
       * 创建受限的文件系统
       * 实现完全透明的拦截，在VM层面控制文件访问边界
       * @returns {Object} 受限的fs对象
       */
      createRestrictedFS() {
        const realFs = require("fs");
        const boundary = path.resolve(this.workingPath);
        logger.info(`[SandboxFS] Creating restricted FS with boundary: ${boundary}`);
        const resolveSafePath = (inputPath) => {
          if (!inputPath) {
            throw new Error("[SandboxFS] Path is required");
          }
          let resolved;
          if (path.isAbsolute(inputPath)) {
            resolved = path.resolve(inputPath);
          } else {
            resolved = path.resolve(boundary, inputPath);
          }
          resolved = path.normalize(resolved);
          if (!resolved.startsWith(boundary)) {
            logger.error(`[SandboxFS] \u6587\u4EF6\u8BBF\u95EE\u8D8A\u6743\u5C1D\u8BD5\uFF1A
          \u8F93\u5165\u8DEF\u5F84: ${inputPath}
          \u89E3\u6790\u7ED3\u679C: ${resolved}
          \u5141\u8BB8\u8FB9\u754C: ${boundary}
          \u8C03\u7528\u6808: ${new Error().stack}
        `);
            throw new Error(
              `[SandboxFS] \u6587\u4EF6\u8BBF\u95EE\u88AB\u62D2\u7EDD\uFF1A\u8DEF\u5F84 "${inputPath}" \u8D85\u51FA\u5DE5\u4F5C\u76EE\u5F55\u8FB9\u754C ${boundary}`
            );
          }
          return resolved;
        };
        const handler = {
          get(target, prop) {
            const original = target[prop];
            if (typeof original !== "function") {
              if (prop === "promises") {
                return new Proxy(realFs.promises, {
                  get(promiseTarget, promiseProp) {
                    const promiseOriginal = promiseTarget[promiseProp];
                    if (typeof promiseOriginal !== "function") {
                      return promiseOriginal;
                    }
                    return async function(...args) {
                      if (args.length > 0 && typeof args[0] === "string") {
                        args[0] = resolveSafePath(args[0]);
                      }
                      if ((promiseProp === "rename" || promiseProp === "copyFile") && args.length > 1) {
                        args[1] = resolveSafePath(args[1]);
                      }
                      return await promiseOriginal.apply(promiseTarget, args);
                    };
                  }
                });
              }
              return original;
            }
            return function(...args) {
              if (args.length > 0 && typeof args[0] === "string") {
                args[0] = resolveSafePath(args[0]);
              }
              if ((prop === "renameSync" || prop === "copyFileSync") && args.length > 1) {
                args[1] = resolveSafePath(args[1]);
              }
              return original.apply(target, args);
            };
          }
        };
        return new Proxy(realFs, handler);
      }
      /**
       * 创建受限的 path 模块
       * 防止使用 path.resolve 绕过限制
       * @returns {Object} 受限的path对象
       */
      createRestrictedPath() {
        const realPath = require("path");
        const boundary = path.resolve(this.workingPath);
        return new Proxy(realPath, {
          get(target, prop) {
            if (prop === "resolve") {
              return (...args) => {
                const resolved = target.resolve(...args);
                if (!resolved.startsWith(boundary)) {
                  logger.warn(`[SandboxPath] path.resolve \u5C1D\u8BD5\u8D8A\u6743: ${resolved}`);
                }
                return resolved;
              };
            }
            return target[prop];
          }
        });
      }
      /**
       * 创建隔离的process对象
       * @returns {Object} 隔离的process对象
       */
      createIsolatedProcess() {
        return {
          // 环境变量（浅拷贝，避免污染）
          env: { ...process.env },
          // 工作目录返回 workingPath（~/.promptx）
          cwd: () => this.workingPath,
          // 安全的只读属性
          version: process.version,
          platform: process.platform,
          arch: process.arch,
          pid: process.pid,
          // 时间相关
          hrtime: process.hrtime,
          uptime: process.uptime,
          // 禁用危险方法
          exit: () => {
            throw new Error("[SandboxIsolation] process.exit() is not allowed in sandbox");
          },
          abort: () => {
            throw new Error("[SandboxIsolation] process.abort() is not allowed in sandbox");
          },
          // 阻止底层访问
          binding: () => {
            throw new Error("[SandboxIsolation] process.binding() is not allowed in sandbox");
          },
          dlopen: () => {
            throw new Error("[SandboxIsolation] Native modules are not allowed in sandbox");
          }
        };
      }
      /**
       * 创建隔离的全局对象
       * @returns {Object} 安全的全局对象集合
       */
      createIsolatedGlobals() {
        return {
          // 基础类型
          Object,
          Array,
          String,
          Number,
          Boolean,
          Date,
          RegExp,
          Error,
          // JSON处理
          JSON,
          // 数学对象
          Math,
          // URL处理
          URL,
          URLSearchParams,
          // 缓冲区
          Buffer,
          // 定时器
          setTimeout,
          clearTimeout,
          setInterval,
          clearInterval,
          setImmediate,
          clearImmediate,
          // 输出
          console,
          // Keep console for sandboxed code
          // Promise相关
          Promise
        };
      }
      /**
       * 启用分析模式 - 用于工具分析阶段
       */
      enableAnalysisMode() {
        this.options.analysisMode = true;
        this.isolatedContext = null;
      }
      /**
       * 启用执行模式 - 用于工具执行阶段
       */
      enableExecutionMode() {
        this.options.analysisMode = false;
        this.isolatedContext = null;
      }
      /**
       * 清理隔离管理器
       */
      cleanup() {
        this.isolatedContext = null;
      }
      /**
       * 获取隔离状态信息
       * @returns {Object} 状态信息
       */
      getIsolationStatus() {
        return {
          sandboxPath: this.sandboxPath,
          options: this.options,
          contextCreated: !!this.isolatedContext,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        };
      }
    };
    module2.exports = SandboxIsolationManager;
  }
});

// src/toolx/SandboxErrorManager.js
var require_SandboxErrorManager = __commonJS({
  "src/toolx/SandboxErrorManager.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var SandboxErrorManager = class {
      constructor() {
        this.version = "1.0.0";
      }
      /**
       * 分析原始错误并生成智能错误信息
       * @param {Error} originalError - 原始错误对象
       * @param {Object} context - 错误上下文信息
       * @param {string} context.toolId - 工具ID
       * @param {Array} context.dependencies - 声明的依赖列表
       * @param {string} context.sandboxPath - 沙箱路径
       * @param {string} context.phase - 执行阶段 (analyze|prepare|execute)
       * @returns {Object} 增强的错误信息
       */
      analyzeError(originalError, context = {}) {
        const errorType = this.classifyError(originalError, context);
        const agentInstructions = this.generateAgentInstructions(errorType, originalError, context);
        return {
          // 保持与ToolCommand兼容的原始信息
          originalError,
          message: originalError.message,
          // 增强的智能信息
          type: errorType,
          agentInstructions,
          context,
          // MCP友好的格式化消息
          formattedMessage: this.formatForMCP(errorType, originalError, agentInstructions, context)
        };
      }
      /**
       * 错误分类逻辑
       * @param {Error} error - 错误对象
       * @param {Object} context - 上下文信息
       * @returns {string} 错误类型
       */
      classifyError(error, context) {
        const message = error.message.toLowerCase();
        if (message.includes("cannot find module")) {
          const missingModule = this.extractModuleName(error.message);
          let isDeclaredDependency = false;
          if (Array.isArray(context.dependencies)) {
            isDeclaredDependency = context.dependencies.some(
              (dep) => dep.split("@")[0] === missingModule
            );
          } else if (typeof context.dependencies === "object" && context.dependencies) {
            isDeclaredDependency = Object.keys(context.dependencies).includes(missingModule);
          }
          if (isDeclaredDependency) {
            return "DEPENDENCY_MISSING";
          } else {
            return "UNDECLARED_DEPENDENCY";
          }
        }
        if (message.includes("pnpm install failed") || message.includes("dependency installation") || message.includes("npm err")) {
          return "DEPENDENCY_INSTALL_FAILED";
        }
        if (message.includes("failed to load tool") || message.includes("tool does not export") || message.includes("invalid tool export format")) {
          return "TOOL_LOADING_ERROR";
        }
        if (message.includes("parameter validation failed") || message.includes("missing required parameter")) {
          return "PARAMETER_VALIDATION_ERROR";
        }
        if (message.includes("sandbox") || message.includes("vm")) {
          return "SANDBOX_ENVIRONMENT_ERROR";
        }
        if (message.includes("timeout") || message.includes("etimedout")) {
          return "NETWORK_TIMEOUT";
        }
        return "UNKNOWN_ERROR";
      }
      /**
       * 为Agent生成智能指令
       * @param {string} errorType - 错误类型
       * @param {Error} originalError - 原始错误
       * @param {Object} context - 上下文
       * @returns {Object} Agent指令对象
       */
      generateAgentInstructions(errorType, originalError, context) {
        switch (errorType) {
          case "DEPENDENCY_MISSING":
            return {
              action: "AUTO_RETRY_WITH_FORCE_REINSTALL",
              autoRetryable: true,
              command: "\u81EA\u52A8\u91CD\u8BD5\uFF0C\u6DFB\u52A0 forceReinstall: true \u53C2\u6570",
              explanation: "\u4F9D\u8D56\u5DF2\u58F0\u660E\u4F46\u672A\u6B63\u786E\u5B89\u88C5\uFF0C\u901A\u8FC7\u5F3A\u5236\u91CD\u88C5\u53EF\u89E3\u51B3",
              userMessage: `\u68C0\u6D4B\u5230\u4F9D\u8D56 ${this.extractModuleName(originalError.message)} \u5B89\u88C5\u4E0D\u5B8C\u6574\uFF0C\u6B63\u5728\u81EA\u52A8\u91CD\u65B0\u5B89\u88C5...`,
              retryParameters: { forceReinstall: true }
            };
          case "UNDECLARED_DEPENDENCY": {
            const missingModule = this.extractModuleName(originalError.message);
            return {
              action: "REPORT_MISSING_DEPENDENCY",
              autoRetryable: false,
              command: "\u63D0\u793A\u5DE5\u5177\u5F00\u53D1\u8005\u6DFB\u52A0\u4F9D\u8D56\u58F0\u660E",
              explanation: `\u5DE5\u5177\u4EE3\u7801\u4F7F\u7528\u4E86\u672A\u58F0\u660E\u7684\u4F9D\u8D56: ${missingModule}`,
              userMessage: `\u274C \u5DE5\u5177\u7F3A\u5C11\u4F9D\u8D56\u58F0\u660E

\u{1F527} \u9700\u8981\u5728\u5DE5\u5177\u7684 getDependencies() \u65B9\u6CD5\u4E2D\u6DFB\u52A0\uFF1A
   '${missingModule}': 'latest'

\u{1F4DD} \u5B8C\u6574\u793A\u4F8B\uFF08\u65B0\u683C\u5F0F\uFF09\uFF1A
   getDependencies() {
     return {
       ${context.dependencies && typeof context.dependencies === "object" && !Array.isArray(context.dependencies) ? Object.entries(context.dependencies).map(([k, v]) => `'${k}': '${v}'`).join(",\n       ") + "," : "// \u5176\u4ED6\u4F9D\u8D56..."}
       '${missingModule}': 'latest'
     };
   }`,
              developerAction: `\u5728 ${context.toolId}.tool.js \u7684 getDependencies() \u4E2D\u6DFB\u52A0 '${missingModule}': 'latest'`
            };
          }
          case "DEPENDENCY_INSTALL_FAILED":
            return {
              action: "CHECK_NETWORK_AND_RETRY",
              autoRetryable: false,
              command: "\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5\uFF0C\u5EFA\u8BAE\u7528\u6237\u7A0D\u540E\u91CD\u8BD5",
              explanation: "\u4F9D\u8D56\u5B89\u88C5\u8FC7\u7A0B\u5931\u8D25\uFF0C\u53EF\u80FD\u662F\u7F51\u7EDC\u95EE\u9898\u6216\u5305\u6E90\u95EE\u9898",
              userMessage: `\u274C \u4F9D\u8D56\u5B89\u88C5\u5931\u8D25

\u{1F310} \u53EF\u80FD\u539F\u56E0\uFF1A
   \u2022 \u7F51\u7EDC\u8FDE\u63A5\u4E0D\u7A33\u5B9A
   \u2022 npm/pnpm \u955C\u50CF\u6E90\u95EE\u9898
   \u2022 \u4F9D\u8D56\u5305\u7248\u672C\u4E0D\u5B58\u5728

\u{1F4A1} \u5EFA\u8BAE\u89E3\u51B3\u65B9\u6848\uFF1A
   1. \u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5
   2. \u7A0D\u540E\u91CD\u8BD5\uFF08\u4F7F\u7528 forceReinstall: true\uFF09
   3. \u5982\u679C\u6301\u7EED\u5931\u8D25\uFF0C\u8BF7\u8054\u7CFB\u5F00\u53D1\u8005`,
              retryDelay: 5e3
            };
          case "TOOL_LOADING_ERROR":
            return {
              action: "REPORT_TOOL_ERROR",
              autoRetryable: false,
              command: "\u62A5\u544A\u5DE5\u5177\u6587\u4EF6\u95EE\u9898",
              explanation: "\u5DE5\u5177\u4EE3\u7801\u672C\u8EAB\u5B58\u5728\u95EE\u9898\uFF0C\u9700\u8981\u5F00\u53D1\u8005\u4FEE\u590D",
              userMessage: `\u274C \u5DE5\u5177\u52A0\u8F7D\u5931\u8D25

\u{1F527} \u5DE5\u5177\u4EE3\u7801\u95EE\u9898\uFF1A${originalError.message}

\u{1F4A1} \u8FD9\u662F\u5DE5\u5177\u5F00\u53D1\u95EE\u9898\uFF0C\u8BF7\u8054\u7CFB\u5DE5\u5177\u4F5C\u8005\u4FEE\u590D`,
              developerAction: "\u68C0\u67E5\u5DE5\u5177\u7684 module.exports \u548C\u57FA\u672C\u8BED\u6CD5"
            };
          case "NETWORK_TIMEOUT":
            return {
              action: "RETRY_WITH_EXTENDED_TIMEOUT",
              autoRetryable: true,
              command: "\u81EA\u52A8\u91CD\u8BD5\uFF0C\u4F7F\u7528\u66F4\u957F\u7684\u8D85\u65F6\u65F6\u95F4",
              explanation: "\u7F51\u7EDC\u8D85\u65F6\uFF0C\u4F7F\u7528\u66F4\u957F\u8D85\u65F6\u65F6\u95F4\u91CD\u8BD5",
              userMessage: "\u23F0 \u7F51\u7EDC\u8D85\u65F6\uFF0C\u6B63\u5728\u4F7F\u7528\u66F4\u957F\u8D85\u65F6\u65F6\u95F4\u91CD\u8BD5...",
              retryParameters: { timeout: 6e4 }
              // 60秒
            };
          default:
            return {
              action: "REPORT_UNKNOWN_ERROR",
              autoRetryable: false,
              command: "\u62A5\u544A\u672A\u77E5\u9519\u8BEF\u7ED9\u7528\u6237",
              explanation: "\u672A\u77E5\u9519\u8BEF\u7C7B\u578B\uFF0C\u9700\u8981\u4EBA\u5DE5\u5206\u6790",
              userMessage: `\u274C \u6267\u884C\u5931\u8D25\uFF1A${originalError.message}

\u{1F916} \u8FD9\u662F\u4E00\u4E2A\u672A\u5206\u7C7B\u7684\u9519\u8BEF\uFF0C\u8BF7\u5C06\u6B64\u4FE1\u606F\u53CD\u9988\u7ED9\u5F00\u53D1\u8005\u4EE5\u6539\u8FDB\u9519\u8BEF\u5904\u7406`,
              debugInfo: {
                stack: originalError.stack,
                context
              }
            };
        }
      }
      /**
       * 为MCP协议格式化错误消息
       * @param {string} errorType - 错误类型
       * @param {Error} originalError - 原始错误
       * @param {Object} agentInstructions - Agent指令
       * @param {Object} context - 上下文
       * @returns {string} MCP友好的错误消息
       */
      formatForMCP(errorType, originalError, agentInstructions, context) {
        const emoji = this.getErrorEmoji(errorType);
        const timestamp = (/* @__PURE__ */ new Date()).toISOString();
        let message = `${emoji} ToolSandbox\u6267\u884C\u5931\u8D25

\u{1F3F7}\uFE0F \u9519\u8BEF\u7C7B\u578B: ${errorType}
\u23F0 \u65F6\u95F4: ${timestamp}
\u{1F527} \u5DE5\u5177: ${context.toolId || "unknown"}
\u{1F4C1} \u9636\u6BB5: ${context.phase || "unknown"}

\u{1F4CB} \u8BE6\u7EC6\u4FE1\u606F:
${originalError.message}

\u{1F916} AI\u5904\u7406\u5EFA\u8BAE:
${agentInstructions.userMessage || agentInstructions.explanation}`;
        if (agentInstructions.autoRetryable) {
          message += `

\u{1F504} \u81EA\u52A8\u6062\u590D: ${agentInstructions.action}
\u26A1 \u64CD\u4F5C: ${agentInstructions.command}`;
        }
        return message;
      }
      /**
       * 从错误消息中提取模块名
       * @param {string} errorMessage - 错误消息
       * @returns {string} 模块名
       */
      extractModuleName(errorMessage) {
        const match = errorMessage.match(/Cannot (?:find|resolve) module ['\"]([^'\"]+)['\"]/);
        return match ? match[1] : "unknown";
      }
      /**
       * 根据错误类型获取对应emoji
       * @param {string} errorType - 错误类型
       * @returns {string} emoji
       */
      getErrorEmoji(errorType) {
        const emojiMap = {
          "DEPENDENCY_MISSING": "\u{1F4E6}",
          "UNDECLARED_DEPENDENCY": "\u{1F50D}",
          "DEPENDENCY_INSTALL_FAILED": "\u{1F310}",
          "TOOL_LOADING_ERROR": "\u{1F527}",
          "PARAMETER_VALIDATION_ERROR": "\u{1F4DD}",
          "SANDBOX_ENVIRONMENT_ERROR": "\u{1F3D7}\uFE0F",
          "NETWORK_TIMEOUT": "\u23F0",
          "UNKNOWN_ERROR": "\u2753"
        };
        return emojiMap[errorType] || "\u274C";
      }
      /**
       * 检查错误是否可以自动恢复
       * @param {Object} intelligentError - 智能错误对象
       * @returns {boolean} 是否可自动恢复
       */
      isAutoRecoverable(intelligentError) {
        return intelligentError.agentInstructions.autoRetryable === true;
      }
      /**
       * 获取自动恢复的重试参数
       * @param {Object} intelligentError - 智能错误对象
       * @returns {Object|null} 重试参数
       */
      getRetryParameters(intelligentError) {
        return intelligentError.agentInstructions.retryParameters || null;
      }
    };
    module2.exports = SandboxErrorManager;
  }
});

// src/toolx/ToolDirectoryManager.js
var require_ToolDirectoryManager = __commonJS({
  "src/toolx/ToolDirectoryManager.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var path = require("path");
    var fs = require("fs").promises;
    var logger = require("@promptx/logger");
    var ToolDirectoryManager = class {
      constructor(toolId, resourceManager) {
        this.toolId = toolId;
        this.resourceManager = resourceManager;
        this.directories = {
          working: "@user://.promptx",
          // 工作目录
          toolbox: `@user://.promptx/toolbox/${toolId}`,
          // 工具隔离目录
          dependencies: `@user://.promptx/toolbox/${toolId}/node_modules`,
          // 依赖目录
          cache: `@user://.promptx/cache/${toolId}`,
          // 缓存目录
          temp: `@user://.promptx/temp/${toolId}`
          // 临时文件目录
        };
        this.resolvedPaths = {};
      }
      /**
       * 初始化所有路径（通过协议解析）
       */
      async initialize() {
        for (const [key, protocolPath] of Object.entries(this.directories)) {
          this.resolvedPaths[key] = await this.resolveProtocolPath(protocolPath);
        }
        logger.debug("[ToolDirectoryManager] Initialized paths:", this.resolvedPaths);
      }
      /**
       * 通过协议解析路径
       * @param {string} protocolPath - 协议路径，如 @user://.promptx
       * @returns {Promise<string>} 解析后的绝对路径
       */
      async resolveProtocolPath(protocolPath) {
        const result = await this.resourceManager.resolveProtocolReference(protocolPath);
        if (!result.success) {
          throw new Error(`Failed to resolve protocol path ${protocolPath}: ${result.error}`);
        }
        const protocol = this.resourceManager.protocols.get(result.protocol);
        if (!protocol) {
          throw new Error(`Protocol ${result.protocol} not supported`);
        }
        if (typeof protocol.resolvePath === "function") {
          return await protocol.resolvePath(result.path, result.queryParams || /* @__PURE__ */ new Map());
        } else {
          throw new Error(`Protocol ${result.protocol} does not support path resolution`);
        }
      }
      /**
       * 获取工作目录路径
       * @returns {string} 工作目录路径
       */
      getWorkingPath() {
        return this.resolvedPaths.working;
      }
      /**
       * 获取工具箱目录路径
       * @returns {string} 工具箱目录路径
       */
      getToolboxPath() {
        return this.resolvedPaths.toolbox;
      }
      /**
       * 获取依赖目录路径
       * @returns {string} node_modules 路径
       */
      getDependenciesPath() {
        return this.resolvedPaths.dependencies;
      }
      /**
       * 获取缓存目录路径
       * @returns {string} 缓存目录路径
       */
      getCachePath() {
        return this.resolvedPaths.cache;
      }
      /**
       * 获取临时目录路径
       * @returns {string} 临时目录路径
       */
      getTempPath() {
        return this.resolvedPaths.temp;
      }
      /**
       * 获取 package.json 路径
       * @returns {string} package.json 路径
       */
      getPackageJsonPath() {
        return path.join(this.resolvedPaths.toolbox, "package.json");
      }
      /**
       * 确保必要的目录存在
       */
      async ensureDirectories() {
        await this.ensureDirectory(this.resolvedPaths.working);
        await this.ensureDirectory(this.resolvedPaths.toolbox);
      }
      /**
       * 确保单个目录存在
       * @param {string} dirPath - 目录路径
       */
      async ensureDirectory(dirPath) {
        try {
          await fs.access(dirPath);
        } catch (error) {
          if (error.code === "ENOENT") {
            await fs.mkdir(dirPath, { recursive: true });
            logger.debug(`[ToolDirectoryManager] Created directory: ${dirPath}`);
          } else {
            throw error;
          }
        }
      }
      /**
       * 检查目录是否存在
       * @param {string} dirPath - 目录路径
       * @returns {Promise<boolean>} 是否存在
       */
      async directoryExists(dirPath) {
        try {
          await fs.access(dirPath);
          return true;
        } catch {
          return false;
        }
      }
      /**
       * 检查工具箱目录是否存在
       * @returns {Promise<boolean>}
       */
      async toolboxExists() {
        return await this.directoryExists(this.resolvedPaths.toolbox);
      }
      /**
       * 清理临时文件
       */
      async cleanupTemp() {
        if (this.resolvedPaths.temp && await this.directoryExists(this.resolvedPaths.temp)) {
          const { rmdir } = require("fs").promises;
          await rmdir(this.resolvedPaths.temp, { recursive: true });
          logger.debug(`[ToolDirectoryManager] Cleaned up temp directory: ${this.resolvedPaths.temp}`);
        }
      }
      /**
       * 删除工具箱目录（用于强制重建）
       */
      async deleteToolbox() {
        if (this.resolvedPaths.toolbox && await this.toolboxExists()) {
          const { rmdir } = require("fs").promises;
          await rmdir(this.resolvedPaths.toolbox, { recursive: true });
          logger.debug(`[ToolDirectoryManager] Deleted toolbox directory: ${this.resolvedPaths.toolbox}`);
        }
      }
      /**
       * 获取协议路径（用于日志或调试）
       * @param {string} key - 目录键名
       * @returns {string} 协议路径
       */
      getProtocolPath(key) {
        return this.directories[key];
      }
      /**
       * 支持自定义协议路径（未来扩展）
       * 比如支持 @project:// 或 @s3:// 等
       */
      async setCustomDirectory(key, protocolPath) {
        this.directories[key] = protocolPath;
        this.resolvedPaths[key] = await this.resolveProtocolPath(protocolPath);
      }
    };
    module2.exports = ToolDirectoryManager;
  }
});

// src/toolx/ESModuleRequireSupport.js
var require_ESModuleRequireSupport = __commonJS({
  "src/toolx/ESModuleRequireSupport.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var path = require("path");
    var fs = require("fs").promises;
    var logger = require("@promptx/logger");
    var ESModuleRequireSupport = class {
      constructor(toolboxPath) {
        this.toolboxPath = toolboxPath;
        this.moduleTypeCache = /* @__PURE__ */ new Map();
      }
      /**
       * 创建统一的 require 函数
       * 所有模块都返回 Promise，实现统一的使用体验
       * 
       * @param {Function} sandboxRequire - 沙箱环境的 require 函数
       * @returns {Function} 增强的 require 函数
       */
      createUnifiedRequire(sandboxRequire) {
        return async (moduleName) => {
          try {
            const moduleType = await this.detectModuleType(moduleName);
            logger.debug(`[ESModuleSupport] Loading ${moduleName} as ${moduleType}`);
            if (moduleType === "esm") {
              return await this.loadESModule(moduleName);
            } else {
              try {
                const module3 = sandboxRequire(moduleName);
                return Promise.resolve(module3);
              } catch (error) {
                if (error.code === "ERR_REQUIRE_ESM") {
                  logger.debug(`[ESModuleSupport] Fallback to ES Module for ${moduleName}`);
                  return await this.loadESModule(moduleName);
                }
                throw error;
              }
            }
          } catch (error) {
            logger.error(`[ESModuleSupport] Failed to load module ${moduleName}: ${error.message}`);
            throw new Error(`Cannot load module '${moduleName}': ${error.message}`);
          }
        };
      }
      /**
       * 检测模块类型
       * @param {string} moduleName - 模块名
       * @returns {Promise<string>} 'esm' | 'commonjs' | 'unknown'
       */
      async detectModuleType(moduleName) {
        if (this.moduleTypeCache.has(moduleName)) {
          return this.moduleTypeCache.get(moduleName);
        }
        try {
          const packagePath = this.resolvePackagePath(moduleName);
          const packageJsonPath = path.join(packagePath, "package.json");
          const packageJsonContent = await fs.readFile(packageJsonPath, "utf8");
          const packageJson = JSON.parse(packageJsonContent);
          let moduleType = "commonjs";
          if (packageJson.type === "module") {
            moduleType = "esm";
          } else if (packageJson.exports && typeof packageJson.exports === "object") {
            if (packageJson.exports.import || packageJson.exports["."] && packageJson.exports["."].import) {
              moduleType = "esm";
            }
          } else if (packageJson.module) {
            if (!packageJson.main) {
              moduleType = "esm";
            }
          }
          this.moduleTypeCache.set(moduleName, moduleType);
          logger.debug(`[ESModuleSupport] Module ${moduleName} detected as ${moduleType}`);
          return moduleType;
        } catch (error) {
          logger.debug(`[ESModuleSupport] Cannot detect module type for ${moduleName}: ${error.message}`);
          this.moduleTypeCache.set(moduleName, "unknown");
          return "unknown";
        }
      }
      /**
       * 解析包路径（支持 scoped 包）
       * @param {string} moduleName - 模块名
       * @returns {string} 包的实际路径
       */
      resolvePackagePath(moduleName) {
        const parts = moduleName.split("/");
        if (moduleName.startsWith("@") && parts.length >= 2) {
          const scopedPackageName = parts.slice(0, 2).join("/");
          return path.join(this.toolboxPath, "node_modules", scopedPackageName);
        } else {
          return path.join(this.toolboxPath, "node_modules", parts[0]);
        }
      }
      /**
       * 加载 ES Module
       * @param {string} moduleName - 模块名
       * @returns {Promise<Object>} 模块对象
       */
      async loadESModule(moduleName) {
        try {
          const modulePath = this.resolveModuleEntryPoint(moduleName);
          logger.debug(`[ESModuleSupport] Importing ES Module from ${modulePath}`);
          const module3 = await import(modulePath);
          return module3.default || module3;
        } catch (error) {
          logger.error(`[ESModuleSupport] Failed to load ES Module ${moduleName}: ${error.message}`);
          throw new Error(`Failed to import ES Module '${moduleName}': ${error.message}`);
        }
      }
      /**
       * 解析模块入口点
       * @param {string} moduleName - 模块名
       * @returns {string} 模块入口文件的完整路径
       */
      resolveModuleEntryPoint(moduleName) {
        try {
          const packagePath = this.resolvePackagePath(moduleName);
          const packageJsonPath = path.join(packagePath, "package.json");
          const packageJson = require(packageJsonPath);
          let entryPoint = "index.js";
          if (packageJson.exports) {
            if (typeof packageJson.exports === "string") {
              entryPoint = packageJson.exports;
            } else if (packageJson.exports["."]) {
              if (typeof packageJson.exports["."] === "string") {
                entryPoint = packageJson.exports["."];
              } else if (packageJson.exports["."].import) {
                entryPoint = packageJson.exports["."].import;
              } else if (packageJson.exports["."].default) {
                entryPoint = packageJson.exports["."].default;
              }
            }
          } else if (packageJson.module) {
            entryPoint = packageJson.module;
          } else if (packageJson.main) {
            entryPoint = packageJson.main;
          }
          const fullPath = path.join(packagePath, entryPoint);
          const parts = moduleName.split("/");
          if (moduleName.startsWith("@") && parts.length > 2) {
            const subpath = parts.slice(2).join("/");
            return path.join(packagePath, subpath);
          } else if (!moduleName.startsWith("@") && parts.length > 1) {
            const subpath = parts.slice(1).join("/");
            return path.join(packagePath, subpath);
          }
          return fullPath;
        } catch (error) {
          return this.resolvePackagePath(moduleName);
        }
      }
      /**
       * 批量检测依赖的模块类型
       * @param {Object} dependencies - 依赖对象 { packageName: version }
       * @returns {Promise<Object>} { commonjs: [], esmodule: [], unknown: [] }
       */
      async detectDependenciesTypes(dependencies) {
        const result = {
          commonjs: [],
          esmodule: [],
          unknown: []
        };
        for (const [packageName, version] of Object.entries(dependencies)) {
          const moduleType = await this.detectModuleType(packageName);
          if (moduleType === "esm") {
            result.esmodule.push({ name: packageName, version });
          } else if (moduleType === "commonjs") {
            result.commonjs.push({ name: packageName, version });
          } else {
            result.unknown.push({ name: packageName, version });
          }
        }
        logger.debug(`[ESModuleSupport] Dependencies analysis:`, {
          commonjs: result.commonjs.length,
          esmodule: result.esmodule.length,
          unknown: result.unknown.length
        });
        return result;
      }
      /**
       * 检查是否有 ES Module 依赖
       * @param {Object} dependencies - 依赖对象
       * @returns {Promise<boolean>}
       */
      async hasESModuleDependencies(dependencies) {
        const types = await this.detectDependenciesTypes(dependencies);
        return types.esmodule.length > 0;
      }
      /**
       * 清理缓存
       */
      clearCache() {
        this.moduleTypeCache.clear();
      }
      /**
       * 获取缓存统计
       */
      getCacheStats() {
        return {
          size: this.moduleTypeCache.size,
          modules: Array.from(this.moduleTypeCache.entries())
        };
      }
    };
    module2.exports = ESModuleRequireSupport;
  }
});

// src/utils/ServerEnvironment.js
var require_ServerEnvironment = __commonJS({
  "src/utils/ServerEnvironment.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var ServerEnvironment = class {
      constructor() {
        this.transport = null;
        this.host = null;
        this.port = null;
        this.processId = null;
        this.initialized = false;
      }
      /**
       * 初始化服务环境（各启动渠道调用一次）
       * @param {Object} config - 配置对象
       * @param {string} config.transport - 传输协议
       * @param {string} config.host - 主机地址（可选）
       * @param {number} config.port - 端口号（可选）
       */
      initialize(config) {
        this.transport = config.transport;
        this.host = config.host || null;
        this.port = config.port || null;
        this.processId = process.pid;
        this.initialized = true;
      }
      /**
       * 获取MCP ID（基于processId生成）
       * @returns {string} MCP进程ID
       */
      getMcpId() {
        if (!this.initialized) {
          throw new Error("ServerEnvironment not initialized");
        }
        return `mcp-${this.processId}`;
      }
      /**
       * 获取传输协议
       * @returns {string} transport类型
       */
      getTransport() {
        if (!this.initialized) {
          throw new Error("ServerEnvironment not initialized");
        }
        return this.transport;
      }
      /**
       * 获取服务器地址信息（仅HTTP/SSE模式）
       * @returns {Object|null} {host, port} 或 null
       */
      getServerAddress() {
        if (!this.initialized) {
          throw new Error("ServerEnvironment not initialized");
        }
        if (this.transport === "stdio") {
          return null;
        }
        return {
          host: this.host,
          port: this.port
        };
      }
      /**
       * 检查是否已初始化
       * @returns {boolean}
       */
      isInitialized() {
        return this.initialized;
      }
    };
    var globalServerEnvironment = null;
    function getGlobalServerEnvironment() {
      if (!globalServerEnvironment) {
        globalServerEnvironment = new ServerEnvironment();
      }
      return globalServerEnvironment;
    }
    module2.exports = ServerEnvironment;
    module2.exports.getGlobalServerEnvironment = getGlobalServerEnvironment;
  }
});

// src/utils/ProjectManager.js
var require_ProjectManager = __commonJS({
  "src/utils/ProjectManager.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var fs = require("fs-extra");
    var path = require("path");
    var os = require("os");
    var crypto = require("crypto");
    var { getGlobalServerEnvironment } = require_ServerEnvironment();
    var logger = require("@promptx/logger");
    var ProjectManager = class {
      constructor() {
        this.promptxHomeDir = path.join(os.homedir(), ".promptx");
        this.projectsDir = path.join(this.promptxHomeDir, "project");
      }
      // 🎯 新架构：当前项目状态管理
      static currentProject = {
        workingDirectory: null,
        mcpId: null,
        ideType: null,
        transport: null,
        initialized: false
      };
      /**
       * 设置当前项目（init时调用）
       * @param {string} workingDirectory - 项目工作目录绝对路径
       * @param {string} mcpId - MCP进程ID
       * @param {string} ideType - IDE类型
       * @param {string} transport - 传输协议类型
       */
      static setCurrentProject(workingDirectory, mcpId, ideType, transport) {
        this.currentProject = {
          workingDirectory: path.resolve(workingDirectory),
          mcpId,
          ideType,
          transport,
          initialized: true
        };
      }
      /**
       * 获取当前项目路径（@project协议使用）
       * @returns {string} 当前项目工作目录
       */
      static getCurrentProjectPath() {
        logger.debug(`[ProjectManager DEBUG] getCurrentProjectPath\u88AB\u8C03\u7528`);
        logger.debug(`[ProjectManager DEBUG] currentProject.initialized: ${this.currentProject.initialized}`);
        logger.debug(`[ProjectManager DEBUG] currentProject\u72B6\u6001:`, JSON.stringify(this.currentProject, null, 2));
        const stack = new Error().stack;
        const stackLines = stack.split("\n").slice(1, 8);
        logger.error(`[ProjectManager DEBUG] \u5B8C\u6574\u8C03\u7528\u6808:`);
        stackLines.forEach((line, index) => {
          logger.error(`[ProjectManager DEBUG]   ${index + 1}. ${line.trim()}`);
        });
        if (!this.currentProject.initialized) {
          logger.error(`[ProjectManager DEBUG] \u274C \u9879\u76EE\u672A\u521D\u59CB\u5316\uFF0C\u5C06\u629B\u51FA\u9519\u8BEF`);
          throw new Error("\u9879\u76EE\u672A\u521D\u59CB\u5316\uFF0C\u8BF7\u5148\u8C03\u7528 init \u547D\u4EE4");
        }
        logger.debug(`[ProjectManager DEBUG] \u2705 \u8FD4\u56DE\u9879\u76EE\u8DEF\u5F84: ${this.currentProject.workingDirectory}`);
        return this.currentProject.workingDirectory;
      }
      /**
       * 获取当前项目信息
       * @returns {Object} 当前项目完整信息
       */
      static getCurrentProject() {
        logger.debug(`[ProjectManager DEBUG] getCurrentProject\u88AB\u8C03\u7528`);
        logger.debug(`[ProjectManager DEBUG] currentProject.initialized: ${this.currentProject.initialized}`);
        logger.debug(`[ProjectManager DEBUG] currentProject\u72B6\u6001:`, JSON.stringify(this.currentProject, null, 2));
        if (!this.currentProject.initialized) {
          logger.error(`[ProjectManager DEBUG] \u274C \u9879\u76EE\u672A\u521D\u59CB\u5316\uFF0C\u5C06\u629B\u51FA\u9519\u8BEF`);
          throw new Error("\u9879\u76EE\u672A\u521D\u59CB\u5316\uFF0C\u8BF7\u5148\u8C03\u7528 init \u547D\u4EE4");
        }
        logger.debug(`[ProjectManager DEBUG] \u2705 \u8FD4\u56DE\u9879\u76EE\u4FE1\u606F`);
        return { ...this.currentProject };
      }
      /**
       * 检查项目是否已初始化
       * @returns {boolean} 是否已初始化
       */
      static isInitialized() {
        return this.currentProject.initialized;
      }
      /**
       * 注册项目到MCP实例 - 使用Hash目录结构
       * @param {string} projectPath - 项目绝对路径
       * @param {string} mcpId - MCP进程ID
       * @param {string} ideType - IDE类型（cursor/vscode等）
       * @param {string} transport - 传输协议类型（stdio/http/sse）
       * @returns {Promise<Object>} 项目配置对象
       */
      async registerProject(projectPath, mcpId, ideType, transport = "stdio") {
        if (!await this.validateProjectPath(projectPath)) {
          throw new Error(`\u65E0\u6548\u7684\u9879\u76EE\u8DEF\u5F84: ${projectPath}`);
        }
        const projectConfig = {
          mcpId,
          ideType: ideType.toLowerCase(),
          transport: transport.toLowerCase(),
          projectPath: path.resolve(projectPath),
          projectHash: this.generateProjectHash(projectPath)
        };
        const projectHash = this.generateProjectHash(projectPath);
        const projectConfigDir = path.join(this.projectsDir, projectHash);
        await fs.ensureDir(projectConfigDir);
        await fs.ensureDir(path.join(projectConfigDir, ".promptx"));
        await fs.ensureDir(path.join(projectConfigDir, ".promptx", "memory"));
        await fs.ensureDir(path.join(projectConfigDir, ".promptx", "resource"));
        const fileName = this.generateConfigFileName(mcpId, ideType, transport, projectPath);
        const configPath = path.join(projectConfigDir, fileName);
        await fs.writeJson(configPath, projectConfig, { spaces: 2 });
        return projectConfig;
      }
      /**
       * 根据MCP ID获取单个项目配置（假设只有一个项目）
       * @param {string} mcpId - MCP进程ID
       * @returns {Promise<Object|null>} 项目配置对象
       */
      async getProjectByMcpId(mcpId) {
        const projects = await this.getProjectsByMcpId(mcpId);
        return projects.length > 0 ? projects[0] : null;
      }
      /**
       * 根据MCP ID获取所有绑定的项目配置 - 支持Hash目录结构
       * @param {string} mcpId - MCP进程ID
       * @returns {Promise<Array>} 项目配置数组
       */
      async getProjectsByMcpId(mcpId) {
        if (!await fs.pathExists(this.projectsDir)) {
          return [];
        }
        const hashDirs = await fs.readdir(this.projectsDir);
        const projects = [];
        for (const hashDir of hashDirs) {
          const hashDirPath = path.join(this.projectsDir, hashDir);
          if (!(await fs.stat(hashDirPath)).isDirectory()) {
            continue;
          }
          try {
            const configFiles = await fs.readdir(hashDirPath);
            for (const file of configFiles) {
              if (file.startsWith("mcp-") && file.endsWith(".json")) {
                try {
                  const configPath = path.join(hashDirPath, file);
                  const config = await fs.readJson(configPath);
                  if (config.mcpId === mcpId) {
                    projects.push(config);
                  }
                } catch (error) {
                  logger.warn(`\u8DF3\u8FC7\u635F\u574F\u7684\u914D\u7F6E\u6587\u4EF6: ${file}`);
                }
              }
            }
          } catch (error) {
            logger.warn(`\u8DF3\u8FC7\u65E0\u6CD5\u8BFB\u53D6\u7684\u76EE\u5F55: ${hashDir}`);
          }
        }
        return projects;
      }
      /**
       * 获取特定项目的所有实例（不同IDE/MCP的绑定） - 支持Hash目录结构
       * @param {string} projectPath - 项目路径
       * @returns {Promise<Array>} 项目实例数组
       */
      async getProjectInstances(projectPath) {
        if (!await fs.pathExists(this.projectsDir)) {
          return [];
        }
        const projectHash = this.generateProjectHash(projectPath);
        const projectConfigDir = path.join(this.projectsDir, projectHash);
        if (!await fs.pathExists(projectConfigDir)) {
          return [];
        }
        const instances = [];
        try {
          const configFiles = await fs.readdir(projectConfigDir);
          for (const file of configFiles) {
            if (file.startsWith("mcp-") && file.endsWith(".json")) {
              try {
                const configPath = path.join(projectConfigDir, file);
                const config = await fs.readJson(configPath);
                if (config.projectHash === projectHash) {
                  instances.push(config);
                }
              } catch (error) {
                logger.warn(`\u8DF3\u8FC7\u635F\u574F\u7684\u914D\u7F6E\u6587\u4EF6: ${file}`);
              }
            }
          }
        } catch (error) {
          logger.warn(`\u65E0\u6CD5\u8BFB\u53D6\u9879\u76EE\u914D\u7F6E\u76EE\u5F55: ${projectConfigDir}`);
        }
        return instances;
      }
      /**
       * 删除项目绑定 - 支持Hash目录结构
       * @param {string} mcpId - MCP进程ID
       * @param {string} ideType - IDE类型
       * @param {string} transport - 传输协议类型
       * @param {string} projectPath - 项目路径
       * @returns {Promise<boolean>} 是否删除成功
       */
      async removeProject(mcpId, ideType, transport, projectPath) {
        const projectHash = this.generateProjectHash(projectPath);
        const projectConfigDir = path.join(this.projectsDir, projectHash);
        const fileName = this.generateConfigFileName(mcpId, ideType, transport, projectPath);
        const configPath = path.join(projectConfigDir, fileName);
        if (await fs.pathExists(configPath)) {
          await fs.remove(configPath);
          try {
            const remainingFiles = await fs.readdir(projectConfigDir);
            const mcpConfigFiles = remainingFiles.filter((file) => file.startsWith("mcp-") && file.endsWith(".json"));
            if (mcpConfigFiles.length === 0) {
              await fs.remove(projectConfigDir);
            }
          } catch (error) {
          }
          return true;
        }
        return false;
      }
      /**
       * 清理过期的项目配置 - 支持Hash目录结构
       * @returns {Promise<number>} 清理的配置文件数量
       */
      async cleanupExpiredProjects() {
        if (!await fs.pathExists(this.projectsDir)) {
          return 0;
        }
        const hashDirs = await fs.readdir(this.projectsDir);
        let cleanedCount = 0;
        for (const hashDir of hashDirs) {
          const hashDirPath = path.join(this.projectsDir, hashDir);
          if (!(await fs.stat(hashDirPath)).isDirectory()) {
            continue;
          }
          try {
            const configFiles = await fs.readdir(hashDirPath);
            let hasValidConfig = false;
            for (const file of configFiles) {
              if (file.startsWith("mcp-") && file.endsWith(".json")) {
                try {
                  const configPath = path.join(hashDirPath, file);
                  const config = await fs.readJson(configPath);
                  if (!await fs.pathExists(config.projectPath)) {
                    await fs.remove(configPath);
                    cleanedCount++;
                    logger.info(`\u6E05\u7406\u8FC7\u671F\u9879\u76EE\u914D\u7F6E: ${file}`);
                  } else {
                    hasValidConfig = true;
                  }
                } catch (error) {
                  await fs.remove(path.join(hashDirPath, file));
                  cleanedCount++;
                  logger.info(`\u6E05\u7406\u635F\u574F\u914D\u7F6E\u6587\u4EF6: ${file}`);
                }
              }
            }
            if (!hasValidConfig) {
              await fs.remove(hashDirPath);
              logger.info(`\u6E05\u7406\u7A7A\u7684\u9879\u76EEHash\u76EE\u5F55: ${hashDir}`);
            }
          } catch (error) {
            await fs.remove(hashDirPath);
            cleanedCount++;
            logger.info(`\u6E05\u7406\u65E0\u6CD5\u8BBF\u95EE\u7684\u76EE\u5F55: ${hashDir}`);
          }
        }
        return cleanedCount;
      }
      /**
       * 生成多项目环境下的AI提示词
       * @param {string} contextType - 上下文类型：'list'/'action'/'learn'
       * @param {string} mcpId - MCP进程ID
       * @param {string} ideType - IDE类型
       * @returns {Promise<string>} 格式化的AI提示词
       */
      async generateTopLevelProjectPrompt(contextType = "list", mcpId, ideType) {
        const projects = await this.getProjectsByMcpId(mcpId);
        if (projects.length === 0) {
          return "";
        }
        if (projects.length === 1) {
          const project = projects[0];
          const basePrompt = `\u{1F6D1} **\u9879\u76EE\u73AF\u5883\u9A8C\u8BC1** \u{1F6D1}
\u{1F4CD} \u5F53\u524D\u7ED1\u5B9A\u9879\u76EE: ${project.projectPath}
\u{1F517} MCP\u5B9E\u4F8B: ${mcpId} (${ideType})

\u26A0\uFE0F **\u6267\u884C\u524D\u786E\u8BA4**\uFF1A\u4E0A\u8FF0\u8DEF\u5F84\u662F\u5426\u4E3A\u4F60\u5F53\u524D\u5DE5\u4F5C\u7684\u9879\u76EE\uFF1F`;
          switch (contextType) {
            case "action":
              return `${basePrompt}
\u5982\u4E0D\u4E00\u81F4\uFF0C\u7ACB\u5373\u505C\u6B62\u6240\u6709\u64CD\u4F5C\u5E76\u4F7F\u7528 \`promptx_init\` \u66F4\u65B0\uFF01

\u{1F4A5} **\u4E25\u91CD\u8B66\u544A**\uFF1A\u5728\u9519\u8BEF\u9879\u76EE\u8DEF\u5F84\u4E0B\u64CD\u4F5C\u5C06\u5BFC\u81F4\u4E0D\u53EF\u9884\u77E5\u7684\u9519\u8BEF\uFF01`;
            case "learn":
              return `${basePrompt}
\u9519\u8BEF\u73AF\u5883\u5C06\u5BFC\u81F4\u77E5\u8BC6\u5173\u8054\u5931\u6548\uFF01

\u{1F4A5} **\u4E25\u91CD\u8B66\u544A**\uFF1A\u9879\u76EE\u73AF\u5883\u4E0D\u5339\u914D\u5C06\u5F71\u54CD\u5B66\u4E60\u6548\u679C\uFF01`;
            default:
              return `${basePrompt}
\u5982\u4E0D\u4E00\u81F4\uFF0C\u5FC5\u987B\u4F7F\u7528 \`promptx_init\` \u66F4\u65B0\u6B63\u786E\u8DEF\u5F84\uFF01

\u{1F4A5} **\u4E25\u91CD\u8B66\u544A**\uFF1A\u9519\u8BEF\u7684\u9879\u76EE\u73AF\u5883\u5C06\u5BFC\u81F4\u670D\u52A1\u5F02\u5E38\uFF01`;
          }
        }
        const projectList = projects.map(
          (proj, index) => `${index + 1}. ${path.basename(proj.projectPath)} (${proj.projectPath})`
        ).join("\n");
        return `\u{1F3AF} **\u591A\u9879\u76EE\u73AF\u5883\u68C0\u6D4B** \u{1F3AF}
\u{1F4CD} \u5F53\u524DMCP\u5B9E\u4F8B(${mcpId})\u5DF2\u7ED1\u5B9A ${projects.length} \u4E2A\u9879\u76EE\uFF1A

${projectList}

\u26A0\uFE0F **\u8BF7\u660E\u786E\u6307\u5B9A**\uFF1A\u4F60\u8981\u5728\u54EA\u4E2A\u9879\u76EE\u4E2D\u6267\u884C\u64CD\u4F5C\uFF1F
\u{1F4A1} **\u5EFA\u8BAE**\uFF1A\u5728\u5BF9\u8BDD\u4E2D\u660E\u786E\u8BF4\u660E\u9879\u76EE\u540D\u79F0\u6216\u8DEF\u5F84`;
      }
      /**
       * 验证路径是否为有效的项目目录
       * @param {string} projectPath - 要验证的路径
       * @returns {Promise<boolean>} 是否为有效项目目录
       */
      async validateProjectPath(projectPath) {
        try {
          const stat = await fs.stat(projectPath);
          if (!stat.isDirectory()) {
            return false;
          }
          const resolved = path.resolve(projectPath);
          const homeDir = os.homedir();
          if (resolved === homeDir) {
            return false;
          }
          return true;
        } catch (error) {
          return false;
        }
      }
      /**
       * 生成配置文件名
       * @param {string} mcpId - MCP进程ID
       * @param {string} ideType - IDE类型
       * @param {string} transport - 传输协议类型
       * @param {string} projectPath - 项目路径
       * @returns {string} 配置文件名
       */
      generateConfigFileName(mcpId, ideType, transport, projectPath) {
        const projectHash = this.generateProjectHash(projectPath);
        const projectName = path.basename(projectPath).toLowerCase().replace(/[^a-z0-9-]/g, "-");
        const ideTypeSafe = ideType.replace(/[^a-z0-9-]/g, "").toLowerCase() || "unknown";
        const transportSafe = transport.replace(/[^a-z0-9-]/g, "").toLowerCase() || "unknown";
        return `mcp-${transportSafe}-${mcpId.replace("mcp-", "")}-${ideTypeSafe}-${projectName}-${projectHash}.json`;
      }
      /**
       * 生成项目路径的Hash值
       * @param {string} projectPath - 项目路径
       * @returns {string} 8位Hash值
       */
      generateProjectHash(projectPath) {
        return crypto.createHash("md5").update(path.resolve(projectPath)).digest("hex").substr(0, 8);
      }
      /**
       * 从配置文件中获取IDE类型
       * @param {string} mcpId - MCP进程ID
       * @returns {Promise<string>} IDE类型
       */
      async getIdeType(mcpId) {
        const project = await this.getProjectByMcpId(mcpId);
        return project ? project.ideType : "unknown";
      }
      /**
       * 生成MCP进程ID - 基于进程ID确保实例唯一
       * @param {string} ideType - IDE类型（保留参数兼容性，实际不使用）
       * @returns {string} MCP进程ID
       */
      static generateMcpId(ideType = "unknown") {
        const serverEnv = getGlobalServerEnvironment();
        if (serverEnv.isInitialized()) {
          return serverEnv.getMcpId();
        }
        return `mcp-${process.pid}`;
      }
      /**
       * 统一项目注册方法 - 新架构：设置当前项目并持久化配置
       * @param {string} workingDirectory - 项目工作目录
       * @param {string} ideType - IDE类型（可选，默认'unknown'）
       * @returns {Promise<Object>} 项目配置对象
       */
      static async registerCurrentProject(workingDirectory, ideType = "unknown") {
        logger.debug(`[ProjectManager DEBUG] ======= registerCurrentProject\u5F00\u59CB =======`);
        logger.debug(`[ProjectManager DEBUG] \u53C2\u6570 - workingDirectory: ${workingDirectory}`);
        logger.debug(`[ProjectManager DEBUG] \u53C2\u6570 - ideType: ${ideType}`);
        logger.debug(`[ProjectManager DEBUG] \u6CE8\u518C\u524D currentProject\u72B6\u6001:`, JSON.stringify(this.currentProject, null, 2));
        const serverEnv = getGlobalServerEnvironment();
        if (!serverEnv.isInitialized()) {
          logger.error(`[ProjectManager DEBUG] \u274C ServerEnvironment\u672A\u521D\u59CB\u5316`);
          throw new Error("ServerEnvironment not initialized");
        }
        const mcpId = serverEnv.getMcpId();
        const transport = serverEnv.getTransport();
        logger.debug(`[ProjectManager DEBUG] ServerEnvironment\u4FE1\u606F - mcpId: ${mcpId}, transport: ${transport}`);
        logger.debug(`[ProjectManager DEBUG] \u8C03\u7528 setCurrentProject...`);
        this.setCurrentProject(workingDirectory, mcpId, ideType, transport);
        logger.debug(`[ProjectManager DEBUG] setCurrentProject\u5B8C\u6210\u540E currentProject\u72B6\u6001:`, JSON.stringify(this.currentProject, null, 2));
        logger.debug(`[ProjectManager DEBUG] \u5F00\u59CB\u6301\u4E45\u5316\u9879\u76EE\u914D\u7F6E...`);
        const projectManager = getGlobalProjectManager();
        const result = await projectManager.registerProject(workingDirectory, mcpId, ideType, transport);
        logger.debug(`[ProjectManager DEBUG] \u9879\u76EE\u914D\u7F6E\u6301\u4E45\u5316\u5B8C\u6210:`, JSON.stringify(result, null, 2));
        logger.debug(`[ProjectManager DEBUG] ======= registerCurrentProject\u7ED3\u675F =======`);
        return result;
      }
    };
    var globalProjectManager = null;
    function getGlobalProjectManager() {
      if (!globalProjectManager) {
        globalProjectManager = new ProjectManager();
      }
      return globalProjectManager;
    }
    module2.exports = ProjectManager;
    module2.exports.ProjectManager = ProjectManager;
    module2.exports.getGlobalProjectManager = getGlobalProjectManager;
  }
});

// src/utils/ProjectPathResolver.js
var require_ProjectPathResolver = __commonJS({
  "src/utils/ProjectPathResolver.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var path = require("path");
    var ProjectManager = require_ProjectManager();
    var ProjectPathResolver = class {
      constructor() {
        this.projectDirs = {
          root: "",
          // 项目根目录
          src: "src",
          // 源代码目录
          lib: "lib",
          // 库目录
          build: "build",
          // 构建输出目录
          dist: "dist",
          // 分发目录
          docs: "docs",
          // 文档目录
          test: "test",
          // 测试目录
          tests: "tests",
          // 测试目录（复数）
          spec: "spec",
          // 规范测试目录
          config: "config",
          // 配置目录
          scripts: "scripts",
          // 脚本目录
          assets: "assets",
          // 资源目录
          public: "public",
          // 公共资源目录
          static: "static",
          // 静态资源目录
          templates: "templates",
          // 模板目录
          examples: "examples",
          // 示例目录
          tools: "tools",
          // 工具目录
          ".promptx": ".promptx"
          // PromptX配置目录
        };
      }
      /**
       * 解析@project://协议路径
       * @param {string} resourcePath - 资源路径，如 "src/index.js" 或 ".promptx/resource/..."
       * @returns {string} 解析后的绝对路径
       */
      resolvePath(resourcePath) {
        const projectRoot = ProjectManager.getCurrentProjectPath();
        if (resourcePath.startsWith(".promptx/")) {
          const fullPath2 = path.join(projectRoot, resourcePath);
          return this._validatePath(fullPath2, projectRoot);
        }
        const parts = resourcePath.split("/");
        const dirType = parts[0];
        const relativePath = parts.slice(1).join("/");
        if (!this.projectDirs.hasOwnProperty(dirType)) {
          throw new Error(`\u4E0D\u652F\u6301\u7684\u9879\u76EE\u76EE\u5F55\u7C7B\u578B: ${dirType}\u3002\u652F\u6301\u7684\u7C7B\u578B: ${Object.keys(this.projectDirs).join(", ")}`);
        }
        const projectDirPath = this.projectDirs[dirType];
        const targetDir = projectDirPath ? path.join(projectRoot, projectDirPath) : projectRoot;
        if (!relativePath) {
          return targetDir;
        }
        const fullPath = path.join(targetDir, relativePath);
        return this._validatePath(fullPath, projectRoot);
      }
      /**
       * 获取项目根目录
       * @returns {string} 当前项目根目录
       */
      getProjectRoot() {
        return ProjectManager.getCurrentProjectPath();
      }
      /**
       * 获取PromptX配置目录路径
       * @returns {string} .promptx目录路径
       */
      getPromptXDirectory() {
        const projectRoot = ProjectManager.getCurrentProjectPath();
        return path.join(projectRoot, ".promptx");
      }
      /**
       * 获取项目资源目录路径
       * @returns {string} 项目资源目录路径
       */
      getResourceDirectory() {
        const promptxDir = this.getPromptXDirectory();
        return path.join(promptxDir, "resource");
      }
      /**
       * 获取项目注册表文件路径
       * @returns {string} 注册表文件路径
       */
      getRegistryPath() {
        const resourceDir = this.getResourceDirectory();
        return path.join(resourceDir, "project.registry.json");
      }
      /**
       * 获取记忆目录路径
       * @returns {string} 记忆目录路径
       */
      getMemoryDirectory() {
        const promptxDir = this.getPromptXDirectory();
        return path.join(promptxDir, "memory");
      }
      /**
       * 验证路径安全性
       * @param {string} fullPath - 完整路径
       * @param {string} projectRoot - 项目根目录
       * @returns {string} 验证后的路径
       * @private
       */
      _validatePath(fullPath, projectRoot) {
        const resolvedPath = path.resolve(fullPath);
        const resolvedProjectRoot = path.resolve(projectRoot);
        if (!resolvedPath.startsWith(resolvedProjectRoot)) {
          throw new Error(`\u5B89\u5168\u9519\u8BEF\uFF1A\u8DEF\u5F84\u8D85\u51FA\u9879\u76EE\u76EE\u5F55\u8303\u56F4: ${resolvedPath}`);
        }
        return resolvedPath;
      }
      /**
       * 获取支持的目录类型
       * @returns {Array<string>} 支持的目录类型列表
       */
      getSupportedDirectories() {
        return Object.keys(this.projectDirs);
      }
      /**
       * 检查目录类型是否支持
       * @param {string} dirType - 目录类型
       * @returns {boolean} 是否支持
       */
      isSupportedDirectory(dirType) {
        return this.projectDirs.hasOwnProperty(dirType);
      }
    };
    var globalProjectPathResolver = null;
    function getGlobalProjectPathResolver() {
      if (!globalProjectPathResolver) {
        globalProjectPathResolver = new ProjectPathResolver();
      }
      return globalProjectPathResolver;
    }
    module2.exports = ProjectPathResolver;
    module2.exports.getGlobalProjectPathResolver = getGlobalProjectPathResolver;
  }
});

// src/toolx/ToolSandbox.js
var require_ToolSandbox = __commonJS({
  "src/toolx/ToolSandbox.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var path = require("path");
    var fs = require("fs").promises;
    var { spawn } = require("child_process");
    var vm = require("vm");
    var SandboxIsolationManager = require_SandboxIsolationManager();
    var SandboxErrorManager = require_SandboxErrorManager();
    var ToolDirectoryManager = require_ToolDirectoryManager();
    var ESModuleRequireSupport = require_ESModuleRequireSupport();
    var logger = require("@promptx/logger");
    var ToolSandbox2 = class {
      constructor(toolReference, options = {}) {
        this.toolReference = toolReference;
        this.resourceManager = null;
        this.toolId = null;
        this.toolContent = null;
        this.toolInstance = null;
        this.dependencies = [];
        this.directoryManager = null;
        this.sandboxPath = null;
        this.sandboxContext = null;
        this.isolationManager = null;
        this.errorManager = new SandboxErrorManager();
        this.esModuleSupport = null;
        this.isAnalyzed = false;
        this.isPrepared = false;
        this.options = {
          timeout: 3e4,
          enableDependencyInstall: true,
          rebuild: false,
          // 强制重建沙箱（用于处理异常情况）
          ...options
        };
      }
      /**
       * 设置ResourceManager实例
       * @param {ResourceManager} resourceManager 
       */
      setResourceManager(resourceManager) {
        this.resourceManager = resourceManager;
      }
      /**
       * 清理沙箱状态和缓存
       * @param {boolean} deleteDirectory - 是否删除沙箱目录
       */
      async clearSandbox(deleteDirectory = false) {
        logger.debug(`[ToolSandbox] Clearing sandbox state${deleteDirectory ? " and deleting directory" : ""}`);
        this.isAnalyzed = false;
        this.isPrepared = false;
        this.toolContent = null;
        this.toolInstance = null;
        this.dependencies = [];
        this.sandboxContext = null;
        if (deleteDirectory && this.directoryManager) {
          try {
            await this.directoryManager.deleteToolbox();
          } catch (error) {
            logger.debug(`[ToolSandbox] Error deleting toolbox directory (can be ignored): ${error.message}`);
          }
        }
      }
      /**
       * 分析工具：加载工具内容，提取元信息和依赖
       * @returns {Promise<Object>} 分析结果
       */
      async analyze() {
        if (this.isAnalyzed && !this.options.rebuild) {
          logger.debug(`[ToolSandbox] Using cached analysis result, dependencies: ${JSON.stringify(this.dependencies)}`);
          return this.getAnalysisResult();
        }
        if (!this.resourceManager) {
          throw new Error("ResourceManager not set. Call setResourceManager() first.");
        }
        try {
          this.toolId = this.extractToolId(this.toolReference);
          const loadOptions = this.options.forceReinstall ? { noCache: true } : {};
          logger.debug(`[ToolSandbox] Loading tool ${this.toolReference}, options:`, loadOptions);
          const toolResult = await this.resourceManager.loadResource(this.toolReference, loadOptions);
          if (!toolResult.success) {
            logger.debug(`[ToolSandbox] Debug: Trying to find tool ${this.toolReference}`);
            const directLookup = this.resourceManager.registryData.findResourceById(`tool:${this.toolId}`, "tool");
            logger.debug(`[ToolSandbox]    - Direct lookup tool:${this.toolId}: ${directLookup ? "found" : "not found"}`);
            throw new Error(`Failed to load tool: ${toolResult.error.message}`);
          }
          this.toolContent = toolResult.content;
          logger.debug(`[ToolSandbox] Loaded tool content first 200 chars:`, this.toolContent.substring(0, 200));
          this.directoryManager = new ToolDirectoryManager(this.toolId, this.resourceManager);
          await this.directoryManager.initialize();
          await this.directoryManager.ensureDirectories();
          this.sandboxPath = this.directoryManager.getWorkingPath();
          await this.analyzeToolInSandbox();
          this.isAnalyzed = true;
          return this.getAnalysisResult();
        } catch (error) {
          throw new Error(`Tool analysis failed: ${error.message}`);
        }
      }
      /**
       * 准备依赖：安装依赖，准备执行环境
       * @returns {Promise<Object>} 准备结果
       */
      async prepareDependencies() {
        logger.info(`[ToolSandbox] Starting prepareDependencies for tool ${this.toolId}`);
        if (this.options.rebuild) {
          logger.info(`[ToolSandbox] Manually triggering sandbox rebuild`);
          await this.clearSandbox(true);
          if (this.directoryManager) {
            await this.directoryManager.initialize();
          }
        }
        if (!this.isAnalyzed) {
          logger.info(`[ToolSandbox] Starting tool analysis`);
          await this.analyze();
          logger.info(`[ToolSandbox] Tool analysis completed`);
        }
        if (!this.options.rebuild && await this.checkDependenciesNeedUpdate()) {
          logger.debug(`[ToolSandbox] Dependency changes detected, auto-rebuilding sandbox`);
          await this.clearSandbox(true);
          await this.analyze();
        }
        if (this.isPrepared) {
          return { success: true, message: "Dependencies already prepared" };
        }
        try {
          await this.ensureSandboxDirectory();
          const hasDependencies = typeof this.dependencies === "object" && !Array.isArray(this.dependencies) ? Object.keys(this.dependencies).length > 0 : this.dependencies.length > 0;
          if (hasDependencies) {
            logger.info(`[ToolSandbox] Installing dependencies`);
            await this.installDependencies();
            logger.info(`[ToolSandbox] Dependencies installation completed`);
            await this.detectAndHandleESModules();
          }
          logger.info(`[ToolSandbox] Creating execution sandbox`);
          await this.createExecutionSandbox();
          logger.info(`[ToolSandbox] Execution sandbox created`);
          this.isPrepared = true;
          return {
            success: true,
            sandboxPath: this.directoryManager.getWorkingPath(),
            toolboxPath: this.directoryManager.getToolboxPath(),
            dependencies: this.dependencies
          };
        } catch (error) {
          throw new Error(`Dependency preparation failed: ${error.message}`);
        }
      }
      /**
       * 执行工具
       * @param {Object} parameters - 工具参数
       * @returns {Promise<Object>} 执行结果
       */
      async execute(parameters = {}) {
        var _a, _b;
        const startTime = Date.now();
        logger.info(`[ToolSandbox] Executing tool "${this.toolId}" with params: ${JSON.stringify(parameters)}`);
        if (!this.isPrepared) {
          logger.debug(`[ToolSandbox] Preparing dependencies for tool ${this.toolId}`);
          await this.prepareDependencies();
        }
        try {
          await this.validateParameters(parameters);
          const result = await this.executeInSandbox(parameters);
          const elapsed = ((Date.now() - startTime) / 1e3).toFixed(1);
          logger.info(`[ToolSandbox] Tool "${this.toolId}" executed successfully in ${elapsed}s, result type: ${typeof result}`);
          return {
            success: true,
            data: result,
            metadata: {
              toolId: this.toolId,
              sandboxPath: this.directoryManager.getWorkingPath(),
              toolboxPath: this.directoryManager.getToolboxPath(),
              executionTime: Date.now()
            }
          };
        } catch (error) {
          const intelligentError = this.errorManager.analyzeError(error, {
            toolId: this.toolId,
            dependencies: this.dependencies,
            sandboxPath: (_a = this.directoryManager) == null ? void 0 : _a.getWorkingPath(),
            toolboxPath: (_b = this.directoryManager) == null ? void 0 : _b.getToolboxPath(),
            phase: "execute"
          });
          const enhancedError = new Error(intelligentError.formattedMessage);
          enhancedError.intelligentError = intelligentError;
          enhancedError.originalError = error;
          throw enhancedError;
        }
      }
      /**
       * 提取工具ID
       * @param {string} toolReference - @tool://url-validator
       * @returns {string} 工具ID
       */
      extractToolId(toolReference) {
        const match = toolReference.match(/^@tool:\/\/(.+)$/);
        if (!match) {
          throw new Error(`Invalid tool reference format: ${toolReference}`);
        }
        return match[1];
      }
      /**
       * 在基础沙箱中分析工具
       */
      async analyzeToolInSandbox() {
        var _a;
        this.isolationManager = new SandboxIsolationManager(this.directoryManager.getWorkingPath(), {
          enableDependencyLoading: false,
          analysisMode: true
        });
        const sandbox = this.isolationManager.createIsolatedContext();
        logger.debug(
          `[ToolSandbox] Tool code getDependencies section:`,
          ((_a = this.toolContent.match(/getDependencies[\s\S]*?return[\s\S]*?\]/)) == null ? void 0 : _a[0]) || "getDependencies not found"
        );
        const script = new vm.Script(this.toolContent, { filename: `${this.toolId}.js` });
        const context = vm.createContext(sandbox);
        try {
          script.runInContext(context);
        } catch (error) {
          const filteredError = this._filterRequireError(error);
          if (filteredError) {
            throw filteredError;
          }
        }
        const exported = context.module.exports;
        if (!exported) {
          throw new Error(`Tool does not export anything: ${this.toolId}`);
        }
        let toolInstance;
        if (typeof exported === "function") {
          toolInstance = new exported();
        } else if (typeof exported === "object") {
          toolInstance = exported;
        } else {
          throw new Error(`Invalid tool export format: ${this.toolId}`);
        }
        if (typeof toolInstance.getDependencies === "function") {
          try {
            this.dependencies = toolInstance.getDependencies() || {};
            logger.debug(`[ToolSandbox] Extracted dependencies: ${JSON.stringify(this.dependencies)}`);
          } catch (error) {
            logger.warn(`[ToolSandbox] Failed to get dependencies for ${this.toolId}: ${error.message}`);
            this.dependencies = {};
          }
        } else {
          logger.debug(`[ToolSandbox] Tool does not have getDependencies method`);
          this.dependencies = {};
        }
        this.toolInstance = toolInstance;
      }
      /**
       * 智能过滤require错误
       * @param {Error} error - 捕获的错误
       * @returns {Error|null} - 如果是真正的错误则返回Error对象，如果是预期的require错误则返回null
       * @private
       */
      _filterRequireError(error) {
        if (error.code === "MODULE_NOT_FOUND") {
          const missingModule = this._extractMissingModuleName(error.message);
          if (missingModule) {
            const declaredDependencies = this._extractDeclaredDependencies();
            if (this._isDeclaredInDependencies(missingModule, declaredDependencies)) {
              logger.debug(`[ToolSandbox] Dependency ${missingModule} not installed, will install in prepareDependencies phase`);
              return null;
            } else {
              return new Error(`\u672A\u58F0\u660E\u7684\u4F9D\u8D56: ${missingModule}\uFF0C\u8BF7\u5728getDependencies()\u4E2D\u6DFB\u52A0\u6B64\u4F9D\u8D56`);
            }
          }
        }
        return error;
      }
      /**
       * 从错误信息中提取缺失的模块名
       * @param {string} errorMessage - 错误信息
       * @returns {string|null} - 模块名或null
       * @private
       */
      _extractMissingModuleName(errorMessage) {
        const match = errorMessage.match(/Cannot (?:find|resolve) module ['"]([^'"]+)['"]/);
        return match ? match[1] : null;
      }
      /**
       * 尝试从工具代码中提取已声明的依赖
       * @returns {string[]} - 依赖列表
       * @private
       */
      _extractDeclaredDependencies() {
        try {
          const dependencyMatch = this.toolContent.match(/getDependencies\s*\(\s*\)\s*\{[\s\S]*?return\s*\[([\s\S]*?)\]/);
          if (dependencyMatch) {
            const dependencyString = dependencyMatch[1];
            const stringMatches = dependencyString.match(/['"]([^'"]+)['"]/g);
            if (stringMatches) {
              return stringMatches.map((str) => str.slice(1, -1));
            }
          }
        } catch (error) {
          logger.warn(`[ToolSandbox] Unable to parse dependency declaration: ${error.message}`);
        }
        return [];
      }
      /**
       * 检查模块是否在依赖声明中
       * @param {string} moduleName - 模块名
       * @param {string[]} declaredDependencies - 已声明的依赖列表
       * @returns {boolean} - 是否已声明
       * @private
       */
      _isDeclaredInDependencies(moduleName, declaredDependencies) {
        return declaredDependencies.some((dep) => {
          const depName = dep.split("@")[0];
          return depName === moduleName;
        });
      }
      /**
       * 检查沙箱目录是否存在
       * @returns {Promise<boolean>}
       */
      async sandboxExists() {
        if (!this.directoryManager) {
          return false;
        }
        return await this.directoryManager.toolboxExists();
      }
      /**
       * 确保沙箱目录存在
       */
      async ensureSandboxDirectory() {
        if (this.directoryManager) {
          await this.directoryManager.ensureDirectories();
        }
      }
      /**
       * 安装依赖
       */
      async installDependencies() {
        const hasDependencies = typeof this.dependencies === "object" && !Array.isArray(this.dependencies) ? Object.keys(this.dependencies).length > 0 : this.dependencies.length > 0;
        if (!hasDependencies) {
          return;
        }
        await this.createPackageJson();
        await this.runPnpmInstall();
      }
      /**
       * 检查依赖是否需要更新
       * @returns {Promise<boolean>} true表示需要更新
       */
      async checkDependenciesNeedUpdate() {
        const packageJsonPath = this.directoryManager.getPackageJsonPath();
        try {
          const existingContent = await fs.readFile(packageJsonPath, "utf-8");
          const existingPackageJson = JSON.parse(existingContent);
          const existingDeps = existingPackageJson.dependencies || {};
          let newDeps = {};
          if (typeof this.dependencies === "object" && !Array.isArray(this.dependencies)) {
            newDeps = this.dependencies;
          } else if (Array.isArray(this.dependencies)) {
            for (const dep of this.dependencies) {
              if (dep.includes("@")) {
                const lastAtIndex = dep.lastIndexOf("@");
                if (lastAtIndex > 0) {
                  const name = dep.substring(0, lastAtIndex);
                  const version = dep.substring(lastAtIndex + 1);
                  newDeps[name] = version;
                } else {
                  newDeps[dep] = "latest";
                }
              } else {
                newDeps[dep] = "latest";
              }
            }
          }
          const existingKeys = Object.keys(existingDeps).sort();
          const newKeys = Object.keys(newDeps).sort();
          if (existingKeys.length !== newKeys.length || !existingKeys.every((key, index) => key === newKeys[index])) {
            logger.debug(`[ToolSandbox] Dependency list changed - old: ${existingKeys.join(", ")} | new: ${newKeys.join(", ")}`);
            return true;
          }
          for (const key of existingKeys) {
            if (existingDeps[key] !== newDeps[key]) {
              logger.debug(`[ToolSandbox] Dependency version changed - ${key}: ${existingDeps[key]} -> ${newDeps[key]}`);
              return true;
            }
          }
          return false;
        } catch (error) {
          logger.debug(`[ToolSandbox] package.json does not exist or is invalid, needs to be created`);
          return true;
        }
      }
      /**
       * 创建package.json
       */
      async createPackageJson() {
        const packageJsonPath = this.directoryManager.getPackageJsonPath();
        const packageJson = {
          name: `toolbox-${this.toolId}`,
          version: "1.0.0",
          description: `Sandbox for tool: ${this.toolId}`,
          private: true,
          dependencies: {}
        };
        logger.debug(`[ToolSandbox] Processing dependencies: ${JSON.stringify(this.dependencies)}`);
        if (typeof this.dependencies === "object" && !Array.isArray(this.dependencies)) {
          packageJson.dependencies = this.dependencies;
        } else if (Array.isArray(this.dependencies)) {
          logger.warn(`[ToolSandbox] Tool ${this.toolId} is using deprecated array format for dependencies. Please update to object format.`);
          for (const dep of this.dependencies) {
            if (dep.includes("@")) {
              const lastAtIndex = dep.lastIndexOf("@");
              if (lastAtIndex > 0) {
                const name = dep.substring(0, lastAtIndex);
                const version = dep.substring(lastAtIndex + 1);
                logger.debug(`[ToolSandbox] Parsing dependency "${dep}" => name="${name}", version="${version}"`);
                packageJson.dependencies[name] = version;
              } else {
                packageJson.dependencies[dep] = "latest";
              }
            } else {
              packageJson.dependencies[dep] = "latest";
            }
          }
        }
        await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2));
      }
      /**
       * 运行pnpm安装
       */
      async runPnpmInstall() {
        const startTime = Date.now();
        let depsList = "";
        if (typeof this.dependencies === "object" && !Array.isArray(this.dependencies)) {
          depsList = Object.keys(this.dependencies).map((name) => `${name}@${this.dependencies[name]}`).join(", ");
        } else if (Array.isArray(this.dependencies)) {
          depsList = this.dependencies.join(", ");
        }
        logger.info(`[ToolSandbox] Installing dependencies: [${depsList}]`);
        return new Promise((resolve, reject) => {
          const pnpmModulePath = require.resolve("pnpm");
          const pnpmBinPath = path.join(path.dirname(pnpmModulePath), "bin", "pnpm.cjs");
          const nodeExecutable = process.env.PROMPTX_NODE_EXECUTABLE || "node";
          const spawnEnv = { ...process.env };
          if (nodeExecutable === process.env.PROMPTX_NODE_EXECUTABLE && nodeExecutable.includes("electron")) {
            spawnEnv.ELECTRON_RUN_AS_NODE = "1";
            logger.info(`[ToolSandbox] Setting ELECTRON_RUN_AS_NODE=1 for this subprocess only`);
          }
          spawnEnv.CI = "1";
          const pnpmArgs = [
            pnpmBinPath,
            "install",
            "--config.confirmModulesPurge=false",
            "--prefer-offline",
            "--ignore-scripts",
            "--reporter=append-only"
          ];
          const fullCommand = `${nodeExecutable} ${pnpmArgs.join(" ")}`;
          logger.info(`[ToolSandbox] Executing command: ${fullCommand}`);
          logger.info(`[ToolSandbox] Working directory: ${this.directoryManager.getToolboxPath()}`);
          logger.info(`[ToolSandbox] Using Node.js executable: ${nodeExecutable}`);
          const timeout = setTimeout(() => {
            const elapsed = ((Date.now() - startTime) / 1e3).toFixed(1);
            logger.error(`[ToolSandbox] pnpm install timeout (${elapsed}s > 30s)`);
            logger.error(`[ToolSandbox] Command: ${fullCommand}`);
            logger.error(`[ToolSandbox] Working directory: ${this.directoryManager.getToolboxPath()}`);
            logger.error(`[ToolSandbox] Installing packages: [${depsList}]`);
            logger.error(`[ToolSandbox] Stdout output: ${stdout}`);
            logger.error(`[ToolSandbox] Stderr output: ${stderr}`);
            pnpm.kill("SIGTERM");
            reject(new Error(`pnpm install timeout after 30s. Command: ${fullCommand}`));
          }, 3e4);
          const pnpm = spawn(nodeExecutable, pnpmArgs, {
            cwd: this.directoryManager.getToolboxPath(),
            // 使用 toolbox 路径安装依赖
            env: spawnEnv,
            // 使用定制的环境变量
            stdio: "pipe"
          });
          let stdout = "";
          let stderr = "";
          pnpm.stdout.on("data", (data) => {
            const output = data.toString();
            stdout += output;
            logger.debug(`[ToolSandbox] pnpm stdout: ${output}`);
          });
          pnpm.stderr.on("data", (data) => {
            const error = data.toString();
            stderr += error;
            logger.warn(`[ToolSandbox] pnpm stderr: ${error}`);
          });
          pnpm.on("close", (code) => {
            clearTimeout(timeout);
            const elapsed = ((Date.now() - startTime) / 1e3).toFixed(1);
            if (code === 0) {
              logger.info(`[ToolSandbox] Dependencies installed successfully in ${elapsed}s`);
              logger.debug(`[ToolSandbox] Installed packages: [${depsList}]`);
              resolve({ stdout, stderr });
            } else {
              logger.error(`[ToolSandbox] pnpm install failed with exit code ${code} after ${elapsed}s`);
              logger.error(`[ToolSandbox] Command: ${fullCommand}`);
              logger.error(`[ToolSandbox] Working directory: ${this.directoryManager.getToolboxPath()}`);
              logger.error(`[ToolSandbox] Installing packages: [${depsList}]`);
              logger.error(`[ToolSandbox] Stdout: ${stdout}`);
              logger.error(`[ToolSandbox] Stderr: ${stderr}`);
              reject(new Error(`pnpm install failed with code ${code}: ${stderr}`));
            }
          });
          pnpm.on("error", (error) => {
            logger.error(`[ToolSandbox] Failed to spawn pnpm: ${error.message}`);
            reject(new Error(`Failed to spawn pnpm: ${error.message}`));
          });
        });
      }
      /**
       * 检测和处理 ES Module 依赖
       */
      async detectAndHandleESModules() {
        if (!this.esModuleSupport) {
          this.esModuleSupport = new ESModuleRequireSupport(this.directoryManager.getToolboxPath());
        }
        const dependencyTypes = await this.esModuleSupport.detectDependenciesTypes(this.dependencies);
        if (dependencyTypes.esmodule.length > 0) {
          logger.warn(`[ToolSandbox] \u68C0\u6D4B\u5230 ES Module \u4F9D\u8D56\uFF1A`, dependencyTypes.esmodule.map((d) => d.name).join(", "));
          logger.info(`[ToolSandbox] ES Module \u5305\u9700\u8981\u4F7F\u7528\u52A8\u6001 import() \u52A0\u8F7D\uFF0C\u5DE5\u5177\u53EF\u80FD\u9700\u8981\u76F8\u5E94\u8C03\u6574`);
          this.esModuleDependencies = dependencyTypes.esmodule;
        }
        if (dependencyTypes.unknown.length > 0) {
          logger.debug(`[ToolSandbox] \u65E0\u6CD5\u68C0\u6D4B\u7684\u4F9D\u8D56\u7C7B\u578B\uFF1A`, dependencyTypes.unknown.map((d) => d.name).join(", "));
        }
        return dependencyTypes;
      }
      /**
       * 创建执行沙箱环境
       */
      async createExecutionSandbox() {
        this.isolationManager = new SandboxIsolationManager(this.directoryManager.getWorkingPath(), {
          enableDependencyLoading: true,
          analysisMode: false,
          toolboxPath: this.directoryManager.getToolboxPath()
          // 传递 toolbox 路径用于依赖加载
        });
        this.sandboxContext = this.isolationManager.createIsolatedContext();
        if (!this.esModuleSupport) {
          this.esModuleSupport = new ESModuleRequireSupport(this.directoryManager.getToolboxPath());
        }
        this.sandboxContext.loadModule = async (moduleName) => {
          const moduleType = await this.esModuleSupport.detectModuleType(moduleName);
          if (moduleType === "esm") {
            try {
              return await this.esModuleSupport.loadESModule(moduleName);
            } catch (error) {
              const module3 = this.sandboxContext.require(moduleName);
              return module3.default || module3;
            }
          } else {
            return this.sandboxContext.require(moduleName);
          }
        };
        this.sandboxContext.importModule = this.sandboxContext.loadModule;
        const originalRequire = this.sandboxContext.require;
        const esModuleSupport = this.esModuleSupport;
        this.sandboxContext.require = function(moduleName) {
          try {
            const packageJsonPath = require.resolve(`${moduleName}/package.json`, {
              paths: [esModuleSupport.toolboxPath]
            });
            const packageJson = require(packageJsonPath);
            if (packageJson.type === "module") {
              const error = new Error(
                `\u274C "${moduleName}" \u662F ES Module \u5305\uFF0C\u8BF7\u4F7F\u7528 await loadModule('${moduleName}') \u4EE3\u66FF require('${moduleName}')
\u{1F4A1} \u63D0\u793A\uFF1AloadModule \u4F1A\u81EA\u52A8\u68C0\u6D4B\u5305\u7C7B\u578B\u5E76\u6B63\u786E\u52A0\u8F7D`
              );
              error.code = "ERR_REQUIRE_ESM";
              throw error;
            }
          } catch (checkError) {
            if (checkError.code === "ERR_REQUIRE_ESM") {
              throw checkError;
            }
          }
          const result = originalRequire(moduleName);
          if (result && result.__esModule && result.default && !result.default.__esModule) {
            const error = new Error(
              `\u274C "${moduleName}" \u662F ES Module \u5305\uFF0C\u8BF7\u4F7F\u7528 await loadModule('${moduleName}') \u4EE3\u66FF require('${moduleName}')
\u{1F4A1} \u63D0\u793A\uFF1AloadModule \u4F1A\u81EA\u52A8\u68C0\u6D4B\u5305\u7C7B\u578B\u5E76\u6B63\u786E\u52A0\u8F7D`
            );
            error.code = "ERR_REQUIRE_ESM";
            throw error;
          }
          return result;
        };
        if (this.esModuleDependencies && this.esModuleDependencies.length > 0) {
          logger.debug(`[ToolSandbox] \u5DF2\u4E3A\u5DE5\u5177 ${this.toolId} \u542F\u7528 ES Module \u652F\u6301\uFF0C\u68C0\u6D4B\u5230 ${this.esModuleDependencies.length} \u4E2A ES Module \u4F9D\u8D56`);
        } else {
          logger.debug(`[ToolSandbox] \u5DF2\u4E3A\u5DE5\u5177 ${this.toolId} \u542F\u7528 importModule \u51FD\u6570`);
        }
        const script = new vm.Script(this.toolContent, { filename: `${this.toolId}.js` });
        const context = vm.createContext(this.sandboxContext);
        script.runInContext(context);
        const exported = context.module.exports;
        if (typeof exported === "function") {
          this.toolInstance = new exported();
        } else if (typeof exported === "object") {
          this.toolInstance = exported;
        }
      }
      /**
       * 解析协议路径（支持@project://等协议）
       * @param {string} protocolPath - 协议路径，如@project://.promptx/cwd
       * @returns {Promise<string>} 解析后的绝对路径
       */
      async resolveProtocolPath(protocolPath) {
        if (!protocolPath) {
          throw new Error("protocolPath is required but was undefined");
        }
        if (protocolPath.startsWith("@project://")) {
          const { getGlobalProjectPathResolver } = require_ProjectPathResolver();
          const pathResolver = getGlobalProjectPathResolver();
          try {
            const relativePath = protocolPath.replace(/^@project:\/\//, "");
            const resolvedPath = pathResolver.resolvePath(relativePath);
            const fs2 = require("fs").promises;
            try {
              await fs2.access(resolvedPath);
            } catch (error) {
              if (error.code === "ENOENT") {
                await fs2.mkdir(resolvedPath, { recursive: true });
                logger.debug(`[ToolSandbox] Created unified working directory: ${resolvedPath}`);
              }
            }
            return resolvedPath;
          } catch (error) {
            throw new Error(`\u89E3\u6790@project://\u8DEF\u5F84\u5931\u8D25: ${error.message}`);
          }
        }
        if (protocolPath.startsWith("@")) {
          if (!this.resourceManager) {
            throw new Error("ResourceManager not set. Cannot resolve protocol path.");
          }
          throw new Error(`\u6682\u4E0D\u652F\u6301\u7684\u534F\u8BAE\u8DEF\u5F84: ${protocolPath}`);
        }
        return protocolPath;
      }
      /**
       * 参数验证
       */
      async validateParameters(parameters) {
        var _a;
        if (typeof this.toolInstance.validate === "function") {
          const result = this.toolInstance.validate(parameters);
          if (typeof result === "boolean" && !result) {
            throw new Error("Parameter validation failed");
          } else if (result && typeof result === "object" && !result.valid) {
            throw new Error(`Parameter validation failed: ${(_a = result.errors) == null ? void 0 : _a.join(", ")}`);
          }
        }
      }
      /**
       * 在沙箱中执行工具
       */
      async executeInSandbox(parameters) {
        if (!this.toolInstance || typeof this.toolInstance.execute !== "function") {
          throw new Error(`Tool ${this.toolId} does not have execute method`);
        }
        return await this.toolInstance.execute(parameters);
      }
      /**
       * 获取分析结果
       */
      getAnalysisResult() {
        var _a, _b, _c, _d;
        return {
          toolId: this.toolId,
          dependencies: this.dependencies,
          sandboxPath: (_a = this.directoryManager) == null ? void 0 : _a.getWorkingPath(),
          toolboxPath: (_b = this.directoryManager) == null ? void 0 : _b.getToolboxPath(),
          hasMetadata: typeof ((_c = this.toolInstance) == null ? void 0 : _c.getMetadata) === "function",
          hasSchema: typeof ((_d = this.toolInstance) == null ? void 0 : _d.getSchema) === "function"
        };
      }
      /**
       * 清理沙箱资源
       */
      async cleanup() {
        if (this.isolationManager) {
          this.isolationManager.cleanup();
          this.isolationManager = null;
        }
        if (this.esModuleSupport) {
          this.esModuleSupport.clearCache();
          this.esModuleSupport = null;
        }
        this.sandboxContext = null;
        this.toolInstance = null;
        this.esModuleDependencies = null;
      }
      /**
       * 获取工具元信息
       */
      getToolMetadata() {
        if (this.toolInstance && typeof this.toolInstance.getMetadata === "function") {
          return this.toolInstance.getMetadata();
        }
        return null;
      }
      /**
       * 获取工具Schema
       */
      getToolSchema() {
        if (this.toolInstance && typeof this.toolInstance.getSchema === "function") {
          return this.toolInstance.getSchema();
        }
        return null;
      }
    };
    module2.exports = ToolSandbox2;
  }
});

// src/toolx/ToolInterface.js
var require_ToolInterface = __commonJS({
  "src/toolx/ToolInterface.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var TOOL_INTERFACE2 = {
      // 必须实现的方法
      required: [
        {
          name: "getMetadata",
          signature: "() => Object",
          description: "\u83B7\u53D6\u5DE5\u5177\u5143\u4FE1\u606F",
          returns: {
            name: "string - \u5DE5\u5177\u540D\u79F0",
            description: "string - \u5DE5\u5177\u63CF\u8FF0",
            version: "string - \u7248\u672C\u53F7",
            category: "string - \u5206\u7C7B\uFF08\u53EF\u9009\uFF09",
            author: "string - \u4F5C\u8005\uFF08\u53EF\u9009\uFF09"
          }
        },
        {
          name: "getSchema",
          signature: "() => Object",
          description: "\u83B7\u53D6\u53C2\u6570JSON Schema",
          returns: {
            type: "string - \u53C2\u6570\u7C7B\u578B\uFF0C\u901A\u5E38\u4E3Aobject",
            properties: "Object - \u53C2\u6570\u5C5E\u6027\u5B9A\u4E49",
            required: "Array - \u5FC5\u9700\u53C2\u6570\u5217\u8868\uFF08\u53EF\u9009\uFF09",
            additionalProperties: "boolean - \u662F\u5426\u5141\u8BB8\u989D\u5916\u53C2\u6570\uFF08\u53EF\u9009\uFF09"
          }
        },
        {
          name: "execute",
          signature: "(parameters: Object) => Promise<any>",
          description: "\u6267\u884C\u5DE5\u5177\u4E3B\u903B\u8F91",
          parameters: {
            parameters: "Object - \u5DE5\u5177\u53C2\u6570\uFF0C\u7B26\u5408getSchema\u5B9A\u4E49"
          },
          returns: "Promise<any> - \u5DE5\u5177\u6267\u884C\u7ED3\u679C"
        }
      ],
      // 可选实现的方法
      optional: [
        {
          name: "getPackage",
          signature: "() => Object",
          description: "\u83B7\u53D6\u5DE5\u5177\u5305\u4FE1\u606F\uFF08\u53EF\u9009\uFF0C\u7528\u4E8E\u4F9D\u8D56\u7BA1\u7406\uFF09",
          returns: {
            directory: "string - \u5DE5\u5177\u76EE\u5F55\u8DEF\u5F84",
            dependencies: "Object - \u4F9D\u8D56\u5BF9\u8C61\uFF0C\u683C\u5F0F\uFF1A{\u5305\u540D: \u7248\u672C}",
            packageJson: "Object - package.json\u5185\u5BB9\uFF08\u53EF\u9009\uFF09"
          }
        },
        {
          name: "validate",
          signature: "(parameters: Object) => Object",
          description: "\u9A8C\u8BC1\u53C2\u6570\uFF08\u53EF\u9009\uFF0C\u6709\u9ED8\u8BA4\u5B9E\u73B0\uFF09",
          parameters: {
            parameters: "Object - \u5F85\u9A8C\u8BC1\u53C2\u6570"
          },
          returns: {
            valid: "boolean - \u9A8C\u8BC1\u662F\u5426\u901A\u8FC7",
            errors: "Array<string> - \u9519\u8BEF\u4FE1\u606F\u5217\u8868"
          }
        },
        {
          name: "cleanup",
          signature: "() => void | Promise<void>",
          description: "\u6E05\u7406\u8D44\u6E90\uFF08\u53EF\u9009\uFF09",
          returns: "void | Promise<void>"
        },
        {
          name: "init",
          signature: "(config?: Object) => void | Promise<void>",
          description: "\u521D\u59CB\u5316\u5DE5\u5177\uFF08\u53EF\u9009\uFF09",
          parameters: {
            config: "Object - \u521D\u59CB\u5316\u914D\u7F6E\uFF08\u53EF\u9009\uFF09"
          },
          returns: "void | Promise<void>"
        }
      ]
    };
    var TOOL_ERROR_CODES2 = {
      VALIDATION_ERROR: "VALIDATION_ERROR",
      // 参数验证失败
      EXECUTION_ERROR: "EXECUTION_ERROR",
      // 执行错误
      TIMEOUT_ERROR: "TIMEOUT_ERROR",
      // 超时错误
      PERMISSION_ERROR: "PERMISSION_ERROR",
      // 权限错误
      RESOURCE_ERROR: "RESOURCE_ERROR",
      // 资源错误
      CONFIGURATION_ERROR: "CONFIGURATION_ERROR"
      // 配置错误
    };
    var TOOL_RESULT_FORMAT2 = {
      success: {
        success: true,
        data: "any - \u5DE5\u5177\u8FD4\u56DE\u7684\u5B9E\u9645\u6570\u636E",
        metadata: {
          tool: "string - \u5DE5\u5177\u540D\u79F0",
          executionTime: "string - \u6267\u884C\u65F6\u95F4",
          timestamp: "string - \u65F6\u95F4\u6233"
          // ...其他元信息
        }
      },
      error: {
        success: false,
        error: {
          code: "string - \u9519\u8BEF\u4EE3\u7801\uFF08\u89C1TOOL_ERROR_CODES\uFF09",
          message: "string - \u9519\u8BEF\u6D88\u606F",
          details: "Object - \u9519\u8BEF\u8BE6\u60C5\uFF08\u53EF\u9009\uFF09"
        },
        metadata: {
          tool: "string - \u5DE5\u5177\u540D\u79F0",
          timestamp: "string - \u65F6\u95F4\u6233"
          // ...其他元信息
        }
      }
    };
    var EXAMPLE_TOOL2 = `
class ExampleTool {
  getMetadata() {
    return {
      name: 'example-tool',
      description: '\u793A\u4F8B\u5DE5\u5177',
      version: '1.0.0',
      category: 'example',
      author: 'PromptX Team'
    };
  }

  getSchema() {
    return {
      type: 'object',
      properties: {
        input: {
          type: 'string',
          description: '\u8F93\u5165\u53C2\u6570'
        }
      },
      required: ['input'],
      additionalProperties: false
    };
  }

  async execute(parameters) {
    const { input } = parameters;
    
    // \u5DE5\u5177\u903B\u8F91
    const result = \`\u5904\u7406\u7ED3\u679C: \${input}\`;
    
    return result;
  }

  // \u53EF\u9009\uFF1A\u58F0\u660E\u4F9D\u8D56\uFF08\u65B0\u683C\u5F0F\uFF1A\u5BF9\u8C61\uFF09
  getDependencies() {
    return {
      'lodash': '^4.17.21',
      'axios': '^1.6.0'
    };
  }

  // \u53EF\u9009\uFF1A\u81EA\u5B9A\u4E49\u53C2\u6570\u9A8C\u8BC1
  validate(parameters) {
    const errors = [];
    
    if (!parameters.input || parameters.input.trim() === '') {
      errors.push('input\u4E0D\u80FD\u4E3A\u7A7A');
    }
    
    return { valid: errors.length === 0, errors };
  }

  // \u53EF\u9009\uFF1A\u6E05\u7406\u8D44\u6E90
  cleanup() {
    console.log('\u6E05\u7406\u8D44\u6E90');
  }
}

module.exports = ExampleTool;
`;
    module2.exports = {
      TOOL_INTERFACE: TOOL_INTERFACE2,
      TOOL_ERROR_CODES: TOOL_ERROR_CODES2,
      TOOL_RESULT_FORMAT: TOOL_RESULT_FORMAT2,
      EXAMPLE_TOOL: EXAMPLE_TOOL2
    };
  }
});

// src/toolx/ToolValidator.js
var require_ToolValidator = __commonJS({
  "src/toolx/ToolValidator.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var { TOOL_INTERFACE: TOOL_INTERFACE2, TOOL_ERROR_CODES: TOOL_ERROR_CODES2 } = require_ToolInterface();
    var ToolValidator2 = class {
      /**
       * 验证工具是否符合接口规范
       * @param {any} tool - 待验证的工具对象
       * @returns {Object} 验证结果 {valid: boolean, errors: [], warnings: []}
       */
      static validateTool(tool) {
        const errors = [];
        const warnings = [];
        if (!tool || typeof tool !== "object") {
          errors.push("\u5DE5\u5177\u5FC5\u987B\u662F\u5BF9\u8C61\u7C7B\u578B");
          return { valid: false, errors, warnings };
        }
        for (const methodSpec of TOOL_INTERFACE2.required) {
          const methodName = methodSpec.name;
          if (!(methodName in tool)) {
            errors.push(`\u7F3A\u5C11\u5FC5\u9700\u65B9\u6CD5: ${methodName}`);
            continue;
          }
          if (typeof tool[methodName] !== "function") {
            errors.push(`${methodName} \u5FC5\u987B\u662F\u51FD\u6570\u7C7B\u578B`);
            continue;
          }
          try {
            const validationResult = this.validateMethod(tool, methodSpec);
            if (!validationResult.valid) {
              errors.push(...validationResult.errors);
              warnings.push(...validationResult.warnings);
            }
          } catch (error) {
            warnings.push(`${methodName} \u65B9\u6CD5\u9A8C\u8BC1\u65F6\u51FA\u9519: ${error.message}`);
          }
        }
        for (const methodSpec of TOOL_INTERFACE2.optional) {
          const methodName = methodSpec.name;
          if (methodName in tool) {
            if (typeof tool[methodName] !== "function") {
              warnings.push(`${methodName} \u5E94\u8BE5\u662F\u51FD\u6570\u7C7B\u578B`);
            } else {
              try {
                const validationResult = this.validateMethod(tool, methodSpec);
                if (!validationResult.valid) {
                  warnings.push(...validationResult.errors);
                }
              } catch (error) {
                warnings.push(`${methodName} \u65B9\u6CD5\u9A8C\u8BC1\u65F6\u51FA\u9519: ${error.message}`);
              }
            }
          }
        }
        return {
          valid: errors.length === 0,
          errors,
          warnings
        };
      }
      /**
       * 验证特定方法
       * @param {Object} tool - 工具对象
       * @param {Object} methodSpec - 方法规范
       * @returns {Object} 验证结果
       */
      static validateMethod(tool, methodSpec) {
        const errors = [];
        const warnings = [];
        const methodName = methodSpec.name;
        try {
          switch (methodName) {
            case "getMetadata":
              return this.validateGetMetadata(tool);
            case "getSchema":
              return this.validateGetSchema(tool);
            case "execute":
              return this.validateExecute(tool);
            case "validate":
              return this.validateValidateMethod(tool);
            default:
              return { valid: true, errors: [], warnings: [] };
          }
        } catch (error) {
          errors.push(`${methodName} \u65B9\u6CD5\u8C03\u7528\u5931\u8D25: ${error.message}`);
          return { valid: false, errors, warnings };
        }
      }
      /**
       * 验证getMetadata方法
       * @param {Object} tool - 工具对象
       * @returns {Object} 验证结果
       */
      static validateGetMetadata(tool) {
        const errors = [];
        const warnings = [];
        try {
          const metadata = tool.getMetadata();
          if (!metadata || typeof metadata !== "object") {
            errors.push("getMetadata() \u5FC5\u987B\u8FD4\u56DE\u5BF9\u8C61");
            return { valid: false, errors, warnings };
          }
          if (!metadata.name || typeof metadata.name !== "string") {
            errors.push("metadata.name \u5FC5\u987B\u662F\u975E\u7A7A\u5B57\u7B26\u4E32");
          }
          if (!metadata.description || typeof metadata.description !== "string") {
            errors.push("metadata.description \u5FC5\u987B\u662F\u975E\u7A7A\u5B57\u7B26\u4E32");
          }
          if (!metadata.version || typeof metadata.version !== "string") {
            errors.push("metadata.version \u5FC5\u987B\u662F\u975E\u7A7A\u5B57\u7B26\u4E32");
          }
          if (metadata.category && typeof metadata.category !== "string") {
            warnings.push("metadata.category \u5E94\u8BE5\u662F\u5B57\u7B26\u4E32\u7C7B\u578B");
          }
          if (metadata.author && typeof metadata.author !== "string") {
            warnings.push("metadata.author \u5E94\u8BE5\u662F\u5B57\u7B26\u4E32\u7C7B\u578B");
          }
        } catch (error) {
          errors.push(`getMetadata() \u6267\u884C\u5931\u8D25: ${error.message}`);
        }
        return { valid: errors.length === 0, errors, warnings };
      }
      /**
       * 验证getSchema方法
       * @param {Object} tool - 工具对象
       * @returns {Object} 验证结果
       */
      static validateGetSchema(tool) {
        const errors = [];
        const warnings = [];
        try {
          const schema = tool.getSchema();
          if (!schema || typeof schema !== "object") {
            errors.push("getSchema() \u5FC5\u987B\u8FD4\u56DE\u5BF9\u8C61");
            return { valid: false, errors, warnings };
          }
          if (!schema.type) {
            warnings.push("schema.type \u5EFA\u8BAE\u5B9A\u4E49");
          }
          if (schema.type && typeof schema.type !== "string") {
            errors.push("schema.type \u5FC5\u987B\u662F\u5B57\u7B26\u4E32");
          }
          if (schema.properties && typeof schema.properties !== "object") {
            errors.push("schema.properties \u5FC5\u987B\u662F\u5BF9\u8C61");
          }
          if (schema.required && !Array.isArray(schema.required)) {
            errors.push("schema.required \u5FC5\u987B\u662F\u6570\u7EC4");
          }
        } catch (error) {
          errors.push(`getSchema() \u6267\u884C\u5931\u8D25: ${error.message}`);
        }
        return { valid: errors.length === 0, errors, warnings };
      }
      /**
       * 验证execute方法
       * @param {Object} tool - 工具对象
       * @returns {Object} 验证结果
       */
      static validateExecute(tool) {
        const errors = [];
        const warnings = [];
        const executeMethod = tool.execute;
        if (executeMethod.length === 0) {
          warnings.push("execute() \u65B9\u6CD5\u5EFA\u8BAE\u63A5\u53D7parameters\u53C2\u6570");
        }
        return { valid: errors.length === 0, errors, warnings };
      }
      /**
       * 验证validate方法（可选）
       * @param {Object} tool - 工具对象
       * @returns {Object} 验证结果
       */
      static validateValidateMethod(tool) {
        const errors = [];
        const warnings = [];
        try {
          const testParams = {};
          const result = tool.validate(testParams);
          if (!result || typeof result !== "object") {
            errors.push("validate() \u5FC5\u987B\u8FD4\u56DE\u5BF9\u8C61");
            return { valid: false, errors, warnings };
          }
          if (typeof result.valid !== "boolean") {
            errors.push("validate() \u8FD4\u56DE\u503C\u5FC5\u987B\u5305\u542Bvalid(boolean)\u5B57\u6BB5");
          }
          if (result.errors && !Array.isArray(result.errors)) {
            errors.push("validate() \u8FD4\u56DE\u503C\u7684errors\u5B57\u6BB5\u5FC5\u987B\u662F\u6570\u7EC4");
          }
        } catch (error) {
          warnings.push(`validate() \u65B9\u6CD5\u6D4B\u8BD5\u5931\u8D25: ${error.message}`);
        }
        return { valid: errors.length === 0, errors, warnings };
      }
      /**
       * 为工具提供默认的validate方法实现
       * @param {Object} tool - 工具对象
       * @param {Object} parameters - 待验证参数
       * @returns {Object} 验证结果
       */
      static defaultValidate(tool, parameters) {
        const errors = [];
        try {
          const schema = tool.getSchema();
          if (!parameters || typeof parameters !== "object") {
            errors.push("\u53C2\u6570\u5FC5\u987B\u662F\u5BF9\u8C61\u7C7B\u578B");
            return { valid: false, errors };
          }
          if (schema.required && Array.isArray(schema.required)) {
            for (const field of schema.required) {
              if (!(field in parameters)) {
                errors.push(`\u7F3A\u5C11\u5FC5\u9700\u53C2\u6570: ${field}`);
              }
            }
          }
          if (schema.properties && typeof schema.properties === "object") {
            for (const [field, fieldSchema] of Object.entries(schema.properties)) {
              if (field in parameters) {
                const value = parameters[field];
                const expectedType = fieldSchema.type;
                if (expectedType && !this.validateType(value, expectedType)) {
                  errors.push(`\u53C2\u6570 ${field} \u7C7B\u578B\u9519\u8BEF\uFF0C\u671F\u671B ${expectedType}\uFF0C\u5B9E\u9645 ${typeof value}`);
                }
              }
            }
          }
        } catch (error) {
          errors.push(`\u53C2\u6570\u9A8C\u8BC1\u5931\u8D25: ${error.message}`);
        }
        return { valid: errors.length === 0, errors };
      }
      /**
       * 类型验证辅助方法
       * @param {*} value - 待验证值
       * @param {string} expectedType - 期望类型
       * @returns {boolean} 是否匹配
       */
      static validateType(value, expectedType) {
        switch (expectedType) {
          case "string":
            return typeof value === "string";
          case "number":
            return typeof value === "number";
          case "boolean":
            return typeof value === "boolean";
          case "object":
            return typeof value === "object" && value !== null;
          case "array":
            return Array.isArray(value);
          default:
            return true;
        }
      }
      /**
       * 生成工具接口报告
       * @param {Object} tool - 工具对象
       * @returns {Object} 接口报告
       */
      static generateInterfaceReport(tool) {
        const validation = this.validateTool(tool);
        const report = {
          toolName: "unknown",
          valid: validation.valid,
          errors: validation.errors,
          warnings: validation.warnings,
          implementedMethods: {
            required: [],
            optional: []
          },
          metadata: null,
          schema: null
        };
        try {
          if (tool.getMetadata) {
            const metadata = tool.getMetadata();
            report.toolName = metadata.name || "unknown";
            report.metadata = metadata;
          }
          if (tool.getSchema) {
            report.schema = tool.getSchema();
          }
          for (const methodSpec of TOOL_INTERFACE2.required) {
            if (typeof tool[methodSpec.name] === "function") {
              report.implementedMethods.required.push(methodSpec.name);
            }
          }
          for (const methodSpec of TOOL_INTERFACE2.optional) {
            if (typeof tool[methodSpec.name] === "function") {
              report.implementedMethods.optional.push(methodSpec.name);
            }
          }
        } catch (error) {
          report.warnings.push(`\u751F\u6210\u62A5\u544A\u65F6\u51FA\u9519: ${error.message}`);
        }
        return report;
      }
    };
    module2.exports = ToolValidator2;
  }
});

// src/toolx/ToolUtils.js
var require_ToolUtils = __commonJS({
  "src/toolx/ToolUtils.js"(exports2, module2) {
    "use strict";
    init_cjs_shims();
    var ToolValidator2 = require_ToolValidator();
    var { TOOL_ERROR_CODES: TOOL_ERROR_CODES2, TOOL_RESULT_FORMAT: TOOL_RESULT_FORMAT2 } = require_ToolInterface();
    var ToolUtils2 = class {
      /**
       * 创建标准化的成功结果
       * @param {*} data - 结果数据
       * @param {Object} options - 选项
       * @returns {Object} 标准化结果
       */
      static createSuccessResult(data, options = {}) {
        const {
          tool = "unknown",
          executionTime = null,
          metadata = {}
        } = options;
        return {
          success: true,
          data,
          metadata: {
            tool,
            executionTime,
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            ...metadata
          }
        };
      }
      /**
       * 创建标准化的错误结果
       * @param {string} code - 错误代码
       * @param {string} message - 错误消息
       * @param {Object} options - 选项
       * @returns {Object} 标准化错误
       */
      static createErrorResult(code, message, options = {}) {
        const {
          tool = "unknown",
          details = {},
          metadata = {}
        } = options;
        return {
          success: false,
          error: {
            code,
            message,
            details
          },
          metadata: {
            tool,
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            ...metadata
          }
        };
      }
      /**
       * 验证工具结果格式
       * @param {Object} result - 工具结果
       * @returns {Object} 验证结果
       */
      static validateResult(result) {
        const errors = [];
        if (!result || typeof result !== "object") {
          errors.push("\u7ED3\u679C\u5FC5\u987B\u662F\u5BF9\u8C61\u7C7B\u578B");
          return { valid: false, errors };
        }
        if (typeof result.success !== "boolean") {
          errors.push("\u7ED3\u679C\u5FC5\u987B\u5305\u542Bsuccess(boolean)\u5B57\u6BB5");
        }
        if (result.success) {
          if (!("data" in result)) {
            errors.push("\u6210\u529F\u7ED3\u679C\u5FC5\u987B\u5305\u542Bdata\u5B57\u6BB5");
          }
        } else {
          if (!result.error || typeof result.error !== "object") {
            errors.push("\u9519\u8BEF\u7ED3\u679C\u5FC5\u987B\u5305\u542Berror(object)\u5B57\u6BB5");
          } else {
            if (!result.error.code || typeof result.error.code !== "string") {
              errors.push("\u9519\u8BEF\u7ED3\u679C\u5FC5\u987B\u5305\u542Berror.code(string)\u5B57\u6BB5");
            }
            if (!result.error.message || typeof result.error.message !== "string") {
              errors.push("\u9519\u8BEF\u7ED3\u679C\u5FC5\u987B\u5305\u542Berror.message(string)\u5B57\u6BB5");
            }
          }
        }
        return { valid: errors.length === 0, errors };
      }
      /**
       * 安全地执行工具方法
       * @param {Object} tool - 工具实例
       * @param {string} methodName - 方法名
       * @param {...any} args - 方法参数
       * @returns {Promise<*>} 执行结果
       */
      static async safeExecute(tool, methodName, ...args) {
        try {
          if (!tool || typeof tool[methodName] !== "function") {
            throw new Error(`\u5DE5\u5177\u4E0D\u5B58\u5728\u65B9\u6CD5: ${methodName}`);
          }
          const result = await tool[methodName](...args);
          return result;
        } catch (error) {
          throw new Error(`\u65B9\u6CD5\u6267\u884C\u5931\u8D25 ${methodName}: ${error.message}`);
        }
      }
      /**
       * 工具性能分析
       * @param {Object} tool - 工具实例
       * @param {Object} parameters - 测试参数
       * @param {Object} options - 选项
       * @returns {Promise<Object>} 性能分析结果
       */
      static async benchmarkTool(tool, parameters = {}, options = {}) {
        const {
          iterations = 10,
          warmup = 3
        } = options;
        const results = {
          toolName: "unknown",
          iterations,
          warmup,
          times: [],
          stats: {}
        };
        try {
          if (tool.getMetadata) {
            const metadata = tool.getMetadata();
            results.toolName = metadata.name || "unknown";
          }
          const validation = ToolValidator2.validateTool(tool);
          if (!validation.valid) {
            throw new Error(`\u5DE5\u5177\u63A5\u53E3\u9A8C\u8BC1\u5931\u8D25: ${validation.errors.join(", ")}`);
          }
          for (let i = 0; i < warmup; i++) {
            await tool.execute(parameters);
          }
          for (let i = 0; i < iterations; i++) {
            const startTime = process.hrtime.bigint();
            await tool.execute(parameters);
            const endTime = process.hrtime.bigint();
            const executionTime = Number(endTime - startTime) / 1e6;
            results.times.push(executionTime);
          }
          results.stats = this.calculateStats(results.times);
        } catch (error) {
          results.error = error.message;
        }
        return results;
      }
      /**
       * 计算统计信息
       * @param {Array<number>} times - 时间数组
       * @returns {Object} 统计信息
       */
      static calculateStats(times) {
        if (times.length === 0) {
          return {};
        }
        const sorted = [...times].sort((a, b) => a - b);
        const sum = times.reduce((a, b) => a + b, 0);
        return {
          count: times.length,
          min: Math.min(...times),
          max: Math.max(...times),
          mean: sum / times.length,
          median: sorted[Math.floor(sorted.length / 2)],
          p95: sorted[Math.floor(sorted.length * 0.95)],
          p99: sorted[Math.floor(sorted.length * 0.99)]
        };
      }
      /**
       * 生成工具模板代码
       * @param {Object} options - 工具选项
       * @returns {string} 工具模板代码
       */
      static generateToolTemplate(options = {}) {
        const {
          toolName = "ExampleTool",
          className = "ExampleTool",
          description = "\u793A\u4F8B\u5DE5\u5177",
          category = "utility",
          author = "PromptX Developer"
        } = options;
        return `/**
 * ${className} - ${description}
 * \u4F7F\u7528PromptX\u9E2D\u5B50\u7C7B\u578B\u63A5\u53E3\uFF0C\u65E0\u9700\u7EE7\u627F\u4EFB\u4F55\u57FA\u7C7B
 */
class ${className} {
  getMetadata() {
    return {
      name: '${toolName}',
      description: '${description}',
      version: '1.0.0',
      category: '${category}',
      author: '${author}'
    };
  }

  getSchema() {
    return {
      type: 'object',
      properties: {
        input: {
          type: 'string',
          description: '\u8F93\u5165\u53C2\u6570'
        }
      },
      required: ['input'],
      additionalProperties: false
    };
  }

  async execute(parameters) {
    const { input } = parameters;
    
    try {
      // TODO: \u5B9E\u73B0\u5DE5\u5177\u903B\u8F91
      const result = \`\u5904\u7406\u7ED3\u679C: \${input}\`;
      
      return result;
    } catch (error) {
      throw new Error(\`\u6267\u884C\u5931\u8D25: \${error.message}\`);
    }
  }

  // \u53EF\u9009\uFF1A\u81EA\u5B9A\u4E49\u53C2\u6570\u9A8C\u8BC1
  validate(parameters) {
    const errors = [];
    
    if (!parameters.input || parameters.input.trim() === '') {
      errors.push('input\u4E0D\u80FD\u4E3A\u7A7A');
    }
    
    return { valid: errors.length === 0, errors };
  }

  // \u53EF\u9009\uFF1A\u6E05\u7406\u8D44\u6E90
  cleanup() {
    // \u6E05\u7406\u903B\u8F91
  }
}

module.exports = ${className};
`;
      }
      /**
       * 创建工具开发指南
       * @returns {string} 开发指南
       */
      static getDevGuide() {
        return `
# PromptX Tool \u5F00\u53D1\u6307\u5357

## \u9E2D\u5B50\u7C7B\u578B\u63A5\u53E3
PromptX\u5DE5\u5177\u4F7F\u7528\u9E2D\u5B50\u7C7B\u578B\u8BBE\u8BA1\uFF0C\u65E0\u9700\u7EE7\u627F\u4EFB\u4F55\u57FA\u7C7B\u3002\u53EA\u9700\u5B9E\u73B0\u4EE5\u4E0B\u63A5\u53E3\uFF1A

### \u5FC5\u9700\u65B9\u6CD5
1. \`getMetadata()\` - \u8FD4\u56DE\u5DE5\u5177\u5143\u4FE1\u606F
2. \`getSchema()\` - \u8FD4\u56DE\u53C2\u6570JSON Schema
3. \`execute(parameters)\` - \u6267\u884C\u5DE5\u5177\u903B\u8F91

### \u53EF\u9009\u65B9\u6CD5
1. \`validate(parameters)\` - \u81EA\u5B9A\u4E49\u53C2\u6570\u9A8C\u8BC1
2. \`cleanup()\` - \u6E05\u7406\u8D44\u6E90
3. \`init(config)\` - \u521D\u59CB\u5316\u5DE5\u5177

## \u5F00\u53D1\u6B65\u9AA4
1. \u4F7F\u7528 ToolUtils.generateToolTemplate() \u751F\u6210\u6A21\u677F
2. \u5B9E\u73B0\u5FC5\u9700\u7684\u63A5\u53E3\u65B9\u6CD5
3. \u4F7F\u7528 ToolValidator.validateTool() \u9A8C\u8BC1\u63A5\u53E3
4. \u4F7F\u7528 ToolUtils.benchmarkTool() \u6027\u80FD\u6D4B\u8BD5
5. \u6CE8\u518C\u5230\u5DE5\u5177\u6CE8\u518C\u8868

## \u793A\u4F8B\u4EE3\u7801
\`\`\`javascript
${this.generateToolTemplate()}
\`\`\`

## \u6700\u4F73\u5B9E\u8DF5
- \u4FDD\u6301execute\u65B9\u6CD5\u7684\u5E42\u7B49\u6027
- \u63D0\u4F9B\u6E05\u6670\u7684\u9519\u8BEF\u6D88\u606F
- \u4F7F\u7528\u5408\u9002\u7684JSON Schema\u9A8C\u8BC1
- \u5B9E\u73B0\u9002\u5F53\u7684\u8D44\u6E90\u6E05\u7406
- \u9075\u5FAA\u7EDF\u4E00\u7684\u7ED3\u679C\u683C\u5F0F
`;
      }
    };
    module2.exports = ToolUtils2;
  }
});

// src/toolx/index.js
init_cjs_shims();
var ToolSandbox = require_ToolSandbox();
var ToolValidator = require_ToolValidator();
var ToolUtils = require_ToolUtils();
var { TOOL_INTERFACE, TOOL_ERROR_CODES, TOOL_RESULT_FORMAT, EXAMPLE_TOOL } = require_ToolInterface();
var globalSandbox = null;
function getGlobalToolSandbox(toolResource) {
  return new ToolSandbox(toolResource);
}
function initialize(options = {}) {
  try {
    return {
      success: true,
      message: "ToolSandbox\u5DE5\u5177\u6846\u67B6\u521D\u59CB\u5316\u6210\u529F",
      framework: {
        executor: "ToolSandbox",
        version: "2.0.0",
        features: [
          "\u81EA\u52A8\u4F9D\u8D56\u7BA1\u7406",
          "\u6C99\u7BB1\u9694\u79BB\u6267\u884C",
          "\u4E09\u9636\u6BB5\u6267\u884C\u6D41\u7A0B",
          "pnpm\u96C6\u6210"
        ]
      }
    };
  } catch (error) {
    return {
      success: false,
      message: `\u5DE5\u5177\u6846\u67B6\u521D\u59CB\u5316\u5931\u8D25: ${error.message}`,
      error
    };
  }
}
async function executeTool(toolResource, parameters = {}, resourceManager = null) {
  if (!resourceManager) {
    throw new Error("ResourceManager is required for ToolSandbox execution");
  }
  const sandbox = getGlobalToolSandbox(toolResource);
  sandbox.setResourceManager(resourceManager);
  try {
    await sandbox.analyze();
    await sandbox.prepareDependencies();
    return await sandbox.execute(parameters);
  } finally {
    await sandbox.cleanup();
  }
}
function reset() {
  globalSandbox = null;
}
function getStats() {
  return {
    framework: {
      name: "PromptX ToolSandbox Framework",
      version: "2.0.0",
      executor: "ToolSandbox",
      features: [
        "\u81EA\u52A8\u4F9D\u8D56\u7BA1\u7406",
        "\u6C99\u7BB1\u9694\u79BB\u6267\u884C",
        "\u4E09\u9636\u6BB5\u6267\u884C\u6D41\u7A0B",
        "pnpm\u96C6\u6210",
        "@tool://\u534F\u8BAE\u652F\u6301"
      ]
    }
  };
}
module.exports = {
  // 核心类
  ToolSandbox,
  ToolValidator,
  ToolUtils,
  // 接口规范
  TOOL_INTERFACE,
  TOOL_ERROR_CODES,
  TOOL_RESULT_FORMAT,
  EXAMPLE_TOOL,
  // 全局实例获取器
  getGlobalToolSandbox,
  // 便捷方法
  initialize,
  executeTool,
  reset,
  getStats
};
//# sourceMappingURL=toolx.js.map