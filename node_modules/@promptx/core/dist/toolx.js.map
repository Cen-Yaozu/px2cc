{"version":3,"sources":["../../../node_modules/.pnpm/tsup@8.5.0_jiti@2.5.1_postcss@8.5.6_tsx@4.20.5_typescript@5.9.2_yaml@2.8.1/node_modules/tsup/assets/cjs_shims.js","../src/toolx/SandboxIsolationManager.js","../src/toolx/SandboxErrorManager.js","../src/toolx/ToolDirectoryManager.js","../src/toolx/ESModuleRequireSupport.js","../src/utils/ServerEnvironment.js","../src/utils/ProjectManager.js","../src/utils/ProjectPathResolver.js","../src/toolx/ToolSandbox.js","../src/toolx/ToolInterface.js","../src/toolx/ToolValidator.js","../src/toolx/ToolUtils.js","../src/toolx/index.js"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL(`file:${__filename}`).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","const path = require('path');\nconst Module = require('module');\nconst logger = require('@promptx/logger');\n\n/**\n * SandboxIsolationManager - 统一管理所有沙箱隔离逻辑\n * \n * 职责：\n * - 创建完全隔离的VM沙箱环境\n * - 统一管理模块系统、进程环境、全局对象的隔离\n * - 提供安全、一致的沙箱执行上下文\n */\nclass SandboxIsolationManager {\n  constructor(workingPath, options = {}) {\n    this.workingPath = workingPath;  // 工作目录（~/.promptx）\n    this.toolboxPath = options.toolboxPath || workingPath;  // 工具箱目录（用于依赖加载）\n    this.sandboxPath = workingPath;  // 向后兼容\n    this.options = {\n      enableDependencyLoading: true,\n      enableBuiltinModules: true,\n      enableFileSystemAccess: false,\n      ...options\n    };\n    this.isolatedContext = null;\n  }\n\n  /**\n   * 创建完全隔离的沙箱环境\n   * @returns {Object} 隔离的沙箱上下文\n   */\n  createIsolatedContext() {\n    if (this.isolatedContext) {\n      return this.isolatedContext;\n    }\n\n    this.isolatedContext = {\n      // 1. 模块系统隔离 - 核心功能\n      require: this.createIsolatedRequire(),\n      module: { exports: {} },\n      exports: {},\n      \n      // 2. 进程环境隔离\n      process: this.createIsolatedProcess(),\n      \n      // 3. 全局对象隔离\n      ...this.createIsolatedGlobals(),\n      \n      // 4. 路径相关隔离\n      __dirname: this.workingPath,\n      __filename: path.join(this.workingPath, 'sandbox.js'),\n      \n      // 5. 注入受限的 fs（直接可用）\n      fs: this.createRestrictedFS(),\n      \n      // 6. 阻止动态代码执行\n      eval: () => {\n        throw new Error('[SandboxIsolation] eval is not allowed in sandbox');\n      },\n      Function: undefined\n    };\n\n    return this.isolatedContext;\n  }\n\n  /**\n   * 创建隔离的require函数 - 解决核心依赖加载问题\n   * @returns {Function} 隔离的require函数\n   */\n  createIsolatedRequire() {\n    // 关键：使用Module.createRequire创建绑定到toolbox路径的require\n    const contextFile = path.join(this.toolboxPath, 'package.json');\n    let sandboxRequire;\n    \n    try {\n      // 创建绑定到toolbox上下文的require（依赖在这里）\n      sandboxRequire = Module.createRequire(contextFile);\n    } catch (error) {\n      // fallback: 如果package.json不存在，使用虚拟路径\n      const virtualContextFile = path.join(this.toolboxPath, 'virtual-context.js');\n      sandboxRequire = Module.createRequire(virtualContextFile);\n    }\n\n    // 返回增强的require函数\n    return (moduleName) => {\n      // 拦截 fs 和相关模块\n      if (moduleName === 'fs' || moduleName === 'fs/promises') {\n        return this.createRestrictedFS();\n      }\n      \n      // 拦截 child_process，禁止使用\n      if (moduleName === 'child_process') {\n        throw new Error('[SandboxIsolation] child_process is not allowed in sandbox');\n      }\n      \n      // 拦截 path 模块，提供受限版本\n      if (moduleName === 'path') {\n        return this.createRestrictedPath();\n      }\n      \n      try {\n        // 优先使用沙箱require（自动处理符号链接）\n        return sandboxRequire(moduleName);\n      } catch (error) {\n        // 智能fallback处理\n        return this.handleRequireFallback(moduleName, error);\n      }\n    };\n  }\n\n  /**\n   * 处理require失败的智能fallback\n   * @param {string} moduleName - 模块名\n   * @param {Error} error - 原始错误\n   * @returns {*} 模块对象或抛出错误\n   */\n  handleRequireFallback(moduleName, error) {\n    // 1. 尝试加载Node.js内置模块\n    if (this.options.enableBuiltinModules && this.isBuiltinModule(moduleName)) {\n      try {\n        return require(moduleName);\n      } catch (builtinError) {\n        // 内置模块加载失败，继续下一步\n      }\n    }\n\n    // 2. 如果是分析阶段且模块不存在，返回mock对象\n    if (this.options.analysisMode && error.code === 'MODULE_NOT_FOUND') {\n      logger.debug(`[SandboxIsolation] Analysis mode: mocking module ${moduleName}`);\n      return this.createMockModule();\n    }\n\n    // 3. 其他情况直接抛出原始错误\n    throw error;\n  }\n\n  /**\n   * 检查是否为Node.js内置模块\n   * @param {string} moduleName - 模块名\n   * @returns {boolean} 是否为内置模块\n   */\n  isBuiltinModule(moduleName) {\n    const builtinModules = [\n      'path', 'fs', 'url', 'crypto', 'util', 'os', 'events', 'stream',\n      'http', 'https', 'querystring', 'zlib', 'buffer', 'child_process'\n    ];\n    \n    return builtinModules.includes(moduleName) || moduleName.startsWith('node:');\n  }\n\n  /**\n   * 创建mock模块对象\n   * @returns {Object} mock对象\n   */\n  createMockModule() {\n    return new Proxy({}, {\n      get: () => () => ({}),  // 所有属性和方法都返回空函数/对象\n      apply: () => ({}),      // 如果被当作函数调用\n      construct: () => ({})   // 如果被当作构造函数\n    });\n  }\n\n  /**\n   * 创建受限的文件系统\n   * 实现完全透明的拦截，在VM层面控制文件访问边界\n   * @returns {Object} 受限的fs对象\n   */\n  createRestrictedFS() {\n    const realFs = require('fs');\n    const boundary = path.resolve(this.workingPath); // 转为绝对路径\n    \n    logger.info(`[SandboxFS] Creating restricted FS with boundary: ${boundary}`);\n    \n    // 核心：智能路径解析，防止相对路径越权\n    const resolveSafePath = (inputPath) => {\n      // 处理undefined或null的情况\n      if (!inputPath) {\n        throw new Error('[SandboxFS] Path is required');\n      }\n      \n      // 1. 处理各种路径形式\n      let resolved;\n      \n      if (path.isAbsolute(inputPath)) {\n        // 绝对路径：直接解析\n        resolved = path.resolve(inputPath);\n      } else {\n        // 相对路径：基于 workingPath 解析\n        // 这是关键！防止 ../../ 越权\n        resolved = path.resolve(boundary, inputPath);\n      }\n      \n      // 2. 规范化路径（处理 .. 和 . ）\n      resolved = path.normalize(resolved);\n      \n      // 3. 边界检查\n      if (!resolved.startsWith(boundary)) {\n        // 记录详细信息用于调试\n        logger.error(`[SandboxFS] 文件访问越权尝试：\n          输入路径: ${inputPath}\n          解析结果: ${resolved}\n          允许边界: ${boundary}\n          调用栈: ${new Error().stack}\n        `);\n        \n        throw new Error(\n          `[SandboxFS] 文件访问被拒绝：路径 \"${inputPath}\" 超出工作目录边界 ${boundary}`\n        );\n      }\n      \n      return resolved;\n    };\n    \n    // 创建 Proxy 来拦截所有 fs 操作\n    const handler = {\n      get(target, prop) {\n        const original = target[prop];\n        \n        // 如果不是函数，直接返回\n        if (typeof original !== 'function') {\n          // 处理 fs.promises\n          if (prop === 'promises') {\n            return new Proxy(realFs.promises, {\n              get(promiseTarget, promiseProp) {\n                const promiseOriginal = promiseTarget[promiseProp];\n                if (typeof promiseOriginal !== 'function') {\n                  return promiseOriginal;\n                }\n                \n                // 包装 promises 方法\n                return async function(...args) {\n                  // 识别路径参数（通常是第一个）\n                  if (args.length > 0 && typeof args[0] === 'string') {\n                    args[0] = resolveSafePath(args[0]);\n                  }\n                  \n                  // 处理 rename、copyFile 等双路径操作\n                  if ((promiseProp === 'rename' || promiseProp === 'copyFile') && args.length > 1) {\n                    args[1] = resolveSafePath(args[1]);\n                  }\n                  \n                  // 调用原始函数\n                  return await promiseOriginal.apply(promiseTarget, args);\n                };\n              }\n            });\n          }\n          \n          return original;\n        }\n        \n        // 包装同步函数\n        return function(...args) {\n          // 识别路径参数（通常是第一个）\n          if (args.length > 0 && typeof args[0] === 'string') {\n            args[0] = resolveSafePath(args[0]);\n          }\n          \n          // 处理 rename、copyFile 等双路径操作\n          if ((prop === 'renameSync' || prop === 'copyFileSync') && args.length > 1) {\n            args[1] = resolveSafePath(args[1]);\n          }\n          \n          // 调用原始函数\n          return original.apply(target, args);\n        };\n      }\n    };\n    \n    // 返回代理的 fs 对象\n    return new Proxy(realFs, handler);\n  }\n\n  /**\n   * 创建受限的 path 模块\n   * 防止使用 path.resolve 绕过限制\n   * @returns {Object} 受限的path对象\n   */\n  createRestrictedPath() {\n    const realPath = require('path');\n    const boundary = path.resolve(this.workingPath);\n    \n    return new Proxy(realPath, {\n      get(target, prop) {\n        if (prop === 'resolve') {\n          return (...args) => {\n            const resolved = target.resolve(...args);\n            // 如果解析结果超出边界，记录警告\n            if (!resolved.startsWith(boundary)) {\n              logger.warn(`[SandboxPath] path.resolve 尝试越权: ${resolved}`);\n            }\n            return resolved;\n          };\n        }\n        return target[prop];\n      }\n    });\n  }\n\n  /**\n   * 创建隔离的process对象\n   * @returns {Object} 隔离的process对象\n   */\n  createIsolatedProcess() {\n    return {\n      // 环境变量（浅拷贝，避免污染）\n      env: { ...process.env },\n      \n      // 工作目录返回 workingPath（~/.promptx）\n      cwd: () => this.workingPath,\n      \n      // 安全的只读属性\n      version: process.version,\n      platform: process.platform,\n      arch: process.arch,\n      pid: process.pid,\n      \n      // 时间相关\n      hrtime: process.hrtime,\n      uptime: process.uptime,\n      \n      // 禁用危险方法\n      exit: () => { throw new Error('[SandboxIsolation] process.exit() is not allowed in sandbox'); },\n      abort: () => { throw new Error('[SandboxIsolation] process.abort() is not allowed in sandbox'); },\n      \n      // 阻止底层访问\n      binding: () => {\n        throw new Error('[SandboxIsolation] process.binding() is not allowed in sandbox');\n      },\n      dlopen: () => {\n        throw new Error('[SandboxIsolation] Native modules are not allowed in sandbox');\n      }\n    };\n  }\n\n  /**\n   * 创建隔离的全局对象\n   * @returns {Object} 安全的全局对象集合\n   */\n  createIsolatedGlobals() {\n    return {\n      // 基础类型\n      Object: Object,\n      Array: Array,\n      String: String,\n      Number: Number,\n      Boolean: Boolean,\n      Date: Date,\n      RegExp: RegExp,\n      Error: Error,\n      \n      // JSON处理\n      JSON: JSON,\n      \n      // 数学对象\n      Math: Math,\n      \n      // URL处理\n      URL: URL,\n      URLSearchParams: URLSearchParams,\n      \n      // 缓冲区\n      Buffer: Buffer,\n      \n      // 定时器\n      setTimeout: setTimeout,\n      clearTimeout: clearTimeout,\n      setInterval: setInterval,\n      clearInterval: clearInterval,\n      setImmediate: setImmediate,\n      clearImmediate: clearImmediate,\n      \n      // 输出\n      console: console,  // Keep console for sandboxed code\n      \n      // Promise相关\n      Promise: Promise\n    };\n  }\n\n  /**\n   * 启用分析模式 - 用于工具分析阶段\n   */\n  enableAnalysisMode() {\n    this.options.analysisMode = true;\n    // 重置上下文以应用新选项\n    this.isolatedContext = null;\n  }\n\n  /**\n   * 启用执行模式 - 用于工具执行阶段\n   */\n  enableExecutionMode() {\n    this.options.analysisMode = false;\n    // 重置上下文以应用新选项\n    this.isolatedContext = null;\n  }\n\n  /**\n   * 清理隔离管理器\n   */\n  cleanup() {\n    this.isolatedContext = null;\n  }\n\n  /**\n   * 获取隔离状态信息\n   * @returns {Object} 状态信息\n   */\n  getIsolationStatus() {\n    return {\n      sandboxPath: this.sandboxPath,\n      options: this.options,\n      contextCreated: !!this.isolatedContext,\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\nmodule.exports = SandboxIsolationManager;","/**\n * SandboxErrorManager - ToolSandbox智能错误管理器\n * \n * 设计原则：\n * - 与现有ToolCommand错误体系兼容\n * - 提供Agent友好的错误信息和自动恢复建议\n * - 支持MCP协议的结构化错误响应\n * - 遵循奥卡姆剃刀原则，最简化错误处理流程\n */\n\nclass SandboxErrorManager {\n  constructor() {\n    this.version = '1.0.0';\n  }\n\n  /**\n   * 分析原始错误并生成智能错误信息\n   * @param {Error} originalError - 原始错误对象\n   * @param {Object} context - 错误上下文信息\n   * @param {string} context.toolId - 工具ID\n   * @param {Array} context.dependencies - 声明的依赖列表\n   * @param {string} context.sandboxPath - 沙箱路径\n   * @param {string} context.phase - 执行阶段 (analyze|prepare|execute)\n   * @returns {Object} 增强的错误信息\n   */\n  analyzeError(originalError, context = {}) {\n    const errorType = this.classifyError(originalError, context);\n    const agentInstructions = this.generateAgentInstructions(errorType, originalError, context);\n    \n    return {\n      // 保持与ToolCommand兼容的原始信息\n      originalError,\n      message: originalError.message,\n      \n      // 增强的智能信息\n      type: errorType,\n      agentInstructions,\n      context,\n      \n      // MCP友好的格式化消息\n      formattedMessage: this.formatForMCP(errorType, originalError, agentInstructions, context)\n    };\n  }\n\n  /**\n   * 错误分类逻辑\n   * @param {Error} error - 错误对象\n   * @param {Object} context - 上下文信息\n   * @returns {string} 错误类型\n   */\n  classifyError(error, context) {\n    const message = error.message.toLowerCase();\n    \n    // 依赖缺失错误 - 最常见的问题\n    if (message.includes('cannot find module')) {\n      const missingModule = this.extractModuleName(error.message);\n      \n      // 兼容新旧格式\n      let isDeclaredDependency = false;\n      if (Array.isArray(context.dependencies)) {\n        // 旧格式：数组\n        isDeclaredDependency = context.dependencies.some(dep => \n          dep.split('@')[0] === missingModule\n        );\n      } else if (typeof context.dependencies === 'object' && context.dependencies) {\n        // 新格式：对象\n        isDeclaredDependency = Object.keys(context.dependencies).includes(missingModule);\n      }\n      \n      if (isDeclaredDependency) {\n        return 'DEPENDENCY_MISSING';\n      } else {\n        return 'UNDECLARED_DEPENDENCY';\n      }\n    }\n    \n    // 依赖安装失败\n    if (message.includes('pnpm install failed') || \n        message.includes('dependency installation') ||\n        message.includes('npm err')) {\n      return 'DEPENDENCY_INSTALL_FAILED';\n    }\n    \n    // 工具文件问题\n    if (message.includes('failed to load tool') ||\n        message.includes('tool does not export') ||\n        message.includes('invalid tool export format')) {\n      return 'TOOL_LOADING_ERROR';\n    }\n    \n    // 参数验证错误\n    if (message.includes('parameter validation failed') ||\n        message.includes('missing required parameter')) {\n      return 'PARAMETER_VALIDATION_ERROR';\n    }\n    \n    // 沙箱环境错误\n    if (message.includes('sandbox') || message.includes('vm')) {\n      return 'SANDBOX_ENVIRONMENT_ERROR';\n    }\n    \n    // 网络超时\n    if (message.includes('timeout') || message.includes('etimedout')) {\n      return 'NETWORK_TIMEOUT';\n    }\n    \n    return 'UNKNOWN_ERROR';\n  }\n\n  /**\n   * 为Agent生成智能指令\n   * @param {string} errorType - 错误类型\n   * @param {Error} originalError - 原始错误\n   * @param {Object} context - 上下文\n   * @returns {Object} Agent指令对象\n   */\n  generateAgentInstructions(errorType, originalError, context) {\n    switch (errorType) {\n      case 'DEPENDENCY_MISSING':\n        return {\n          action: 'AUTO_RETRY_WITH_FORCE_REINSTALL',\n          autoRetryable: true,\n          command: '自动重试，添加 forceReinstall: true 参数',\n          explanation: '依赖已声明但未正确安装，通过强制重装可解决',\n          userMessage: `检测到依赖 ${this.extractModuleName(originalError.message)} 安装不完整，正在自动重新安装...`,\n          retryParameters: { forceReinstall: true }\n        };\n        \n      case 'UNDECLARED_DEPENDENCY': {\n        const missingModule = this.extractModuleName(originalError.message);\n        return {\n          action: 'REPORT_MISSING_DEPENDENCY',\n          autoRetryable: false,\n          command: '提示工具开发者添加依赖声明',\n          explanation: `工具代码使用了未声明的依赖: ${missingModule}`,\n          userMessage: `❌ 工具缺少依赖声明\n\n🔧 需要在工具的 getDependencies() 方法中添加：\n   '${missingModule}': 'latest'\n\n📝 完整示例（新格式）：\n   getDependencies() {\n     return {\n       ${context.dependencies && typeof context.dependencies === 'object' && !Array.isArray(context.dependencies) \n         ? Object.entries(context.dependencies).map(([k, v]) => `'${k}': '${v}'`).join(',\\n       ') + ','\n         : '// 其他依赖...'}\n       '${missingModule}': 'latest'\n     };\n   }`,\n          developerAction: `在 ${context.toolId}.tool.js 的 getDependencies() 中添加 '${missingModule}': 'latest'`\n        };\n      }\n        \n      case 'DEPENDENCY_INSTALL_FAILED':\n        return {\n          action: 'CHECK_NETWORK_AND_RETRY',\n          autoRetryable: false,\n          command: '检查网络连接，建议用户稍后重试',\n          explanation: '依赖安装过程失败，可能是网络问题或包源问题',\n          userMessage: `❌ 依赖安装失败\n\n🌐 可能原因：\n   • 网络连接不稳定\n   • npm/pnpm 镜像源问题\n   • 依赖包版本不存在\n\n💡 建议解决方案：\n   1. 检查网络连接\n   2. 稍后重试（使用 forceReinstall: true）\n   3. 如果持续失败，请联系开发者`,\n          retryDelay: 5000\n        };\n        \n      case 'TOOL_LOADING_ERROR':\n        return {\n          action: 'REPORT_TOOL_ERROR',\n          autoRetryable: false,\n          command: '报告工具文件问题',\n          explanation: '工具代码本身存在问题，需要开发者修复',\n          userMessage: `❌ 工具加载失败\n\n🔧 工具代码问题：${originalError.message}\n\n💡 这是工具开发问题，请联系工具作者修复`,\n          developerAction: '检查工具的 module.exports 和基本语法'\n        };\n        \n      case 'NETWORK_TIMEOUT':\n        return {\n          action: 'RETRY_WITH_EXTENDED_TIMEOUT',\n          autoRetryable: true,\n          command: '自动重试，使用更长的超时时间',\n          explanation: '网络超时，使用更长超时时间重试',\n          userMessage: '⏰ 网络超时，正在使用更长超时时间重试...',\n          retryParameters: { timeout: 60000 } // 60秒\n        };\n        \n      default:\n        return {\n          action: 'REPORT_UNKNOWN_ERROR',\n          autoRetryable: false,\n          command: '报告未知错误给用户',\n          explanation: '未知错误类型，需要人工分析',\n          userMessage: `❌ 执行失败：${originalError.message}\n\n🤖 这是一个未分类的错误，请将此信息反馈给开发者以改进错误处理`,\n          debugInfo: {\n            stack: originalError.stack,\n            context\n          }\n        };\n    }\n  }\n\n  /**\n   * 为MCP协议格式化错误消息\n   * @param {string} errorType - 错误类型\n   * @param {Error} originalError - 原始错误\n   * @param {Object} agentInstructions - Agent指令\n   * @param {Object} context - 上下文\n   * @returns {string} MCP友好的错误消息\n   */\n  formatForMCP(errorType, originalError, agentInstructions, context) {\n    const emoji = this.getErrorEmoji(errorType);\n    const timestamp = new Date().toISOString();\n    \n    let message = `${emoji} ToolSandbox执行失败\n\n🏷️ 错误类型: ${errorType}\n⏰ 时间: ${timestamp}\n🔧 工具: ${context.toolId || 'unknown'}\n📁 阶段: ${context.phase || 'unknown'}\n\n📋 详细信息:\n${originalError.message}\n\n🤖 AI处理建议:\n${agentInstructions.userMessage || agentInstructions.explanation}`;\n\n    // 如果可以自动重试，添加重试信息\n    if (agentInstructions.autoRetryable) {\n      message += `\n\n🔄 自动恢复: ${agentInstructions.action}\n⚡ 操作: ${agentInstructions.command}`;\n    }\n\n    return message;\n  }\n\n  /**\n   * 从错误消息中提取模块名\n   * @param {string} errorMessage - 错误消息\n   * @returns {string} 模块名\n   */\n  extractModuleName(errorMessage) {\n    const match = errorMessage.match(/Cannot (?:find|resolve) module ['\\\"]([^'\\\"]+)['\\\"]/);\n    return match ? match[1] : 'unknown';\n  }\n\n  /**\n   * 根据错误类型获取对应emoji\n   * @param {string} errorType - 错误类型\n   * @returns {string} emoji\n   */\n  getErrorEmoji(errorType) {\n    const emojiMap = {\n      'DEPENDENCY_MISSING': '📦',\n      'UNDECLARED_DEPENDENCY': '🔍',\n      'DEPENDENCY_INSTALL_FAILED': '🌐',\n      'TOOL_LOADING_ERROR': '🔧',\n      'PARAMETER_VALIDATION_ERROR': '📝',\n      'SANDBOX_ENVIRONMENT_ERROR': '🏗️',\n      'NETWORK_TIMEOUT': '⏰',\n      'UNKNOWN_ERROR': '❓'\n    };\n    \n    return emojiMap[errorType] || '❌';\n  }\n\n  /**\n   * 检查错误是否可以自动恢复\n   * @param {Object} intelligentError - 智能错误对象\n   * @returns {boolean} 是否可自动恢复\n   */\n  isAutoRecoverable(intelligentError) {\n    return intelligentError.agentInstructions.autoRetryable === true;\n  }\n\n  /**\n   * 获取自动恢复的重试参数\n   * @param {Object} intelligentError - 智能错误对象\n   * @returns {Object|null} 重试参数\n   */\n  getRetryParameters(intelligentError) {\n    return intelligentError.agentInstructions.retryParameters || null;\n  }\n}\n\nmodule.exports = SandboxErrorManager;","const path = require('path');\nconst fs = require('fs').promises;\nconst logger = require('@promptx/logger');\n\n/**\n * ToolDirectoryManager - 基于协议的工具目录管理器\n * \n * 负责管理工具相关的所有目录：\n * - 工作目录：工具执行时的 process.cwd()\n * - 工具箱目录：依赖安装和隔离\n * - 缓存目录：工具缓存（可选）\n * - 临时目录：临时文件（可选）\n * \n * 基于 ResourceManager 的协议系统，支持跨平台路径解析\n */\nclass ToolDirectoryManager {\n  constructor(toolId, resourceManager) {\n    this.toolId = toolId;\n    this.resourceManager = resourceManager;\n    \n    // 使用协议定义目录\n    this.directories = {\n      working: '@user://.promptx',                           // 工作目录\n      toolbox: `@user://.promptx/toolbox/${toolId}`,        // 工具隔离目录\n      dependencies: `@user://.promptx/toolbox/${toolId}/node_modules`, // 依赖目录\n      cache: `@user://.promptx/cache/${toolId}`,            // 缓存目录\n      temp: `@user://.promptx/temp/${toolId}`,              // 临时文件目录\n    };\n    \n    // 解析后的实际路径\n    this.resolvedPaths = {};\n  }\n\n  /**\n   * 初始化所有路径（通过协议解析）\n   */\n  async initialize() {\n    for (const [key, protocolPath] of Object.entries(this.directories)) {\n      this.resolvedPaths[key] = await this.resolveProtocolPath(protocolPath);\n    }\n    logger.debug('[ToolDirectoryManager] Initialized paths:', this.resolvedPaths);\n  }\n\n  /**\n   * 通过协议解析路径\n   * @param {string} protocolPath - 协议路径，如 @user://.promptx\n   * @returns {Promise<string>} 解析后的绝对路径\n   */\n  async resolveProtocolPath(protocolPath) {\n    // 使用 ResourceManager 的协议解析能力\n    const result = await this.resourceManager.resolveProtocolReference(protocolPath);\n    \n    if (!result.success) {\n      throw new Error(`Failed to resolve protocol path ${protocolPath}: ${result.error}`);\n    }\n    \n    // 获取对应的协议处理器\n    const protocol = this.resourceManager.protocols.get(result.protocol);\n    if (!protocol) {\n      throw new Error(`Protocol ${result.protocol} not supported`);\n    }\n    \n    // 使用协议处理器解析实际路径\n    if (typeof protocol.resolvePath === 'function') {\n      return await protocol.resolvePath(result.path, result.queryParams || new Map());\n    } else {\n      throw new Error(`Protocol ${result.protocol} does not support path resolution`);\n    }\n  }\n\n  /**\n   * 获取工作目录路径\n   * @returns {string} 工作目录路径\n   */\n  getWorkingPath() {\n    return this.resolvedPaths.working;\n  }\n\n  /**\n   * 获取工具箱目录路径\n   * @returns {string} 工具箱目录路径\n   */\n  getToolboxPath() {\n    return this.resolvedPaths.toolbox;\n  }\n\n  /**\n   * 获取依赖目录路径\n   * @returns {string} node_modules 路径\n   */\n  getDependenciesPath() {\n    return this.resolvedPaths.dependencies;\n  }\n\n  /**\n   * 获取缓存目录路径\n   * @returns {string} 缓存目录路径\n   */\n  getCachePath() {\n    return this.resolvedPaths.cache;\n  }\n\n  /**\n   * 获取临时目录路径\n   * @returns {string} 临时目录路径\n   */\n  getTempPath() {\n    return this.resolvedPaths.temp;\n  }\n\n  /**\n   * 获取 package.json 路径\n   * @returns {string} package.json 路径\n   */\n  getPackageJsonPath() {\n    return path.join(this.resolvedPaths.toolbox, 'package.json');\n  }\n\n  /**\n   * 确保必要的目录存在\n   */\n  async ensureDirectories() {\n    // 工作目录通常已存在，但还是检查一下\n    await this.ensureDirectory(this.resolvedPaths.working);\n    \n    // 工具箱目录必须创建\n    await this.ensureDirectory(this.resolvedPaths.toolbox);\n    \n    // 可选：创建缓存和临时目录\n    // await this.ensureDirectory(this.resolvedPaths.cache);\n    // await this.ensureDirectory(this.resolvedPaths.temp);\n  }\n\n  /**\n   * 确保单个目录存在\n   * @param {string} dirPath - 目录路径\n   */\n  async ensureDirectory(dirPath) {\n    try {\n      await fs.access(dirPath);\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        await fs.mkdir(dirPath, { recursive: true });\n        logger.debug(`[ToolDirectoryManager] Created directory: ${dirPath}`);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * 检查目录是否存在\n   * @param {string} dirPath - 目录路径\n   * @returns {Promise<boolean>} 是否存在\n   */\n  async directoryExists(dirPath) {\n    try {\n      await fs.access(dirPath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 检查工具箱目录是否存在\n   * @returns {Promise<boolean>}\n   */\n  async toolboxExists() {\n    return await this.directoryExists(this.resolvedPaths.toolbox);\n  }\n\n  /**\n   * 清理临时文件\n   */\n  async cleanupTemp() {\n    if (this.resolvedPaths.temp && await this.directoryExists(this.resolvedPaths.temp)) {\n      const { rmdir } = require('fs').promises;\n      await rmdir(this.resolvedPaths.temp, { recursive: true });\n      logger.debug(`[ToolDirectoryManager] Cleaned up temp directory: ${this.resolvedPaths.temp}`);\n    }\n  }\n\n  /**\n   * 删除工具箱目录（用于强制重建）\n   */\n  async deleteToolbox() {\n    if (this.resolvedPaths.toolbox && await this.toolboxExists()) {\n      const { rmdir } = require('fs').promises;\n      await rmdir(this.resolvedPaths.toolbox, { recursive: true });\n      logger.debug(`[ToolDirectoryManager] Deleted toolbox directory: ${this.resolvedPaths.toolbox}`);\n    }\n  }\n\n  /**\n   * 获取协议路径（用于日志或调试）\n   * @param {string} key - 目录键名\n   * @returns {string} 协议路径\n   */\n  getProtocolPath(key) {\n    return this.directories[key];\n  }\n\n  /**\n   * 支持自定义协议路径（未来扩展）\n   * 比如支持 @project:// 或 @s3:// 等\n   */\n  async setCustomDirectory(key, protocolPath) {\n    this.directories[key] = protocolPath;\n    this.resolvedPaths[key] = await this.resolveProtocolPath(protocolPath);\n  }\n}\n\nmodule.exports = ToolDirectoryManager;","const path = require('path');\nconst fs = require('fs').promises;\nconst logger = require('@promptx/logger');\n\n/**\n * ESModuleRequireSupport - ES Module 加载支持器\n * \n * 专门处理 ES Module 和 CommonJS 模块的统一加载\n * 提供智能的模块类型检测和加载策略\n */\nclass ESModuleRequireSupport {\n  constructor(toolboxPath) {\n    this.toolboxPath = toolboxPath;\n    this.moduleTypeCache = new Map(); // 缓存模块类型，避免重复检测\n  }\n\n  /**\n   * 创建统一的 require 函数\n   * 所有模块都返回 Promise，实现统一的使用体验\n   * \n   * @param {Function} sandboxRequire - 沙箱环境的 require 函数\n   * @returns {Function} 增强的 require 函数\n   */\n  createUnifiedRequire(sandboxRequire) {\n    return async (moduleName) => {\n      try {\n        // 检测模块类型\n        const moduleType = await this.detectModuleType(moduleName);\n        \n        logger.debug(`[ESModuleSupport] Loading ${moduleName} as ${moduleType}`);\n        \n        if (moduleType === 'esm') {\n          // ES Module - 使用动态 import\n          return await this.loadESModule(moduleName);\n        } else {\n          // CommonJS - 包装成 Promise 返回，统一体验\n          try {\n            const module = sandboxRequire(moduleName);\n            return Promise.resolve(module);\n          } catch (error) {\n            // 如果 require 失败且错误是 ERR_REQUIRE_ESM，说明是 ES Module\n            if (error.code === 'ERR_REQUIRE_ESM') {\n              logger.debug(`[ESModuleSupport] Fallback to ES Module for ${moduleName}`);\n              return await this.loadESModule(moduleName);\n            }\n            throw error;\n          }\n        }\n      } catch (error) {\n        logger.error(`[ESModuleSupport] Failed to load module ${moduleName}: ${error.message}`);\n        throw new Error(`Cannot load module '${moduleName}': ${error.message}`);\n      }\n    };\n  }\n\n  /**\n   * 检测模块类型\n   * @param {string} moduleName - 模块名\n   * @returns {Promise<string>} 'esm' | 'commonjs' | 'unknown'\n   */\n  async detectModuleType(moduleName) {\n    // 检查缓存\n    if (this.moduleTypeCache.has(moduleName)) {\n      return this.moduleTypeCache.get(moduleName);\n    }\n\n    try {\n      const packagePath = this.resolvePackagePath(moduleName);\n      const packageJsonPath = path.join(packagePath, 'package.json');\n      \n      // 读取 package.json\n      const packageJsonContent = await fs.readFile(packageJsonPath, 'utf8');\n      const packageJson = JSON.parse(packageJsonContent);\n      \n      let moduleType = 'commonjs'; // 默认为 CommonJS\n      \n      // 1. 检查 type 字段（最标准的方式）\n      if (packageJson.type === 'module') {\n        moduleType = 'esm';\n      }\n      // 2. 检查 exports 字段中的 import 条件\n      else if (packageJson.exports && typeof packageJson.exports === 'object') {\n        // 检查是否有 import 条件导出\n        if (packageJson.exports.import || \n            (packageJson.exports['.'] && packageJson.exports['.'].import)) {\n          moduleType = 'esm';\n        }\n      }\n      // 3. 检查 module 字段（一些包用来指向 ES Module 版本）\n      else if (packageJson.module) {\n        // 如果有 module 字段但没有 main 字段，可能是纯 ES Module\n        if (!packageJson.main) {\n          moduleType = 'esm';\n        }\n      }\n      \n      // 缓存结果\n      this.moduleTypeCache.set(moduleName, moduleType);\n      \n      logger.debug(`[ESModuleSupport] Module ${moduleName} detected as ${moduleType}`);\n      return moduleType;\n      \n    } catch (error) {\n      logger.debug(`[ESModuleSupport] Cannot detect module type for ${moduleName}: ${error.message}`);\n      // 缓存为 unknown\n      this.moduleTypeCache.set(moduleName, 'unknown');\n      return 'unknown';\n    }\n  }\n\n  /**\n   * 解析包路径（支持 scoped 包）\n   * @param {string} moduleName - 模块名\n   * @returns {string} 包的实际路径\n   */\n  resolvePackagePath(moduleName) {\n    const parts = moduleName.split('/');\n    \n    if (moduleName.startsWith('@') && parts.length >= 2) {\n      // Scoped package: @scope/package 或 @scope/package/subpath\n      const scopedPackageName = parts.slice(0, 2).join('/');\n      return path.join(this.toolboxPath, 'node_modules', scopedPackageName);\n    } else {\n      // Normal package: package 或 package/subpath\n      return path.join(this.toolboxPath, 'node_modules', parts[0]);\n    }\n  }\n\n  /**\n   * 加载 ES Module\n   * @param {string} moduleName - 模块名\n   * @returns {Promise<Object>} 模块对象\n   */\n  async loadESModule(moduleName) {\n    try {\n      // 获取模块的完整路径\n      const modulePath = this.resolveModuleEntryPoint(moduleName);\n      \n      logger.debug(`[ESModuleSupport] Importing ES Module from ${modulePath}`);\n      \n      // 使用动态 import 加载 ES Module\n      const module = await import(modulePath);\n      \n      // 返回模块（处理 default export）\n      return module.default || module;\n      \n    } catch (error) {\n      logger.error(`[ESModuleSupport] Failed to load ES Module ${moduleName}: ${error.message}`);\n      throw new Error(`Failed to import ES Module '${moduleName}': ${error.message}`);\n    }\n  }\n\n  /**\n   * 解析模块入口点\n   * @param {string} moduleName - 模块名\n   * @returns {string} 模块入口文件的完整路径\n   */\n  resolveModuleEntryPoint(moduleName) {\n    try {\n      const packagePath = this.resolvePackagePath(moduleName);\n      const packageJsonPath = path.join(packagePath, 'package.json');\n      \n      // 同步读取 package.json（因为这个方法可能在同步上下文中调用）\n      const packageJson = require(packageJsonPath);\n      \n      // 解析入口点\n      let entryPoint = 'index.js'; // 默认入口\n      \n      // 检查 exports 字段\n      if (packageJson.exports) {\n        if (typeof packageJson.exports === 'string') {\n          entryPoint = packageJson.exports;\n        } else if (packageJson.exports['.']) {\n          if (typeof packageJson.exports['.'] === 'string') {\n            entryPoint = packageJson.exports['.'];\n          } else if (packageJson.exports['.'].import) {\n            entryPoint = packageJson.exports['.'].import;\n          } else if (packageJson.exports['.'].default) {\n            entryPoint = packageJson.exports['.'].default;\n          }\n        }\n      }\n      // 检查 module 字段（ES Module 入口）\n      else if (packageJson.module) {\n        entryPoint = packageJson.module;\n      }\n      // 检查 main 字段（CommonJS 入口，但可能也是 ES Module）\n      else if (packageJson.main) {\n        entryPoint = packageJson.main;\n      }\n      \n      // 构建完整路径\n      const fullPath = path.join(packagePath, entryPoint);\n      \n      // 处理子路径导入（如 'lodash/chunk'）\n      const parts = moduleName.split('/');\n      if (moduleName.startsWith('@') && parts.length > 2) {\n        // @scope/package/subpath\n        const subpath = parts.slice(2).join('/');\n        return path.join(packagePath, subpath);\n      } else if (!moduleName.startsWith('@') && parts.length > 1) {\n        // package/subpath\n        const subpath = parts.slice(1).join('/');\n        return path.join(packagePath, subpath);\n      }\n      \n      return fullPath;\n      \n    } catch (error) {\n      // 如果解析失败，返回默认路径\n      return this.resolvePackagePath(moduleName);\n    }\n  }\n\n  /**\n   * 批量检测依赖的模块类型\n   * @param {Object} dependencies - 依赖对象 { packageName: version }\n   * @returns {Promise<Object>} { commonjs: [], esmodule: [], unknown: [] }\n   */\n  async detectDependenciesTypes(dependencies) {\n    const result = {\n      commonjs: [],\n      esmodule: [],\n      unknown: []\n    };\n\n    for (const [packageName, version] of Object.entries(dependencies)) {\n      const moduleType = await this.detectModuleType(packageName);\n      \n      if (moduleType === 'esm') {\n        result.esmodule.push({ name: packageName, version });\n      } else if (moduleType === 'commonjs') {\n        result.commonjs.push({ name: packageName, version });\n      } else {\n        result.unknown.push({ name: packageName, version });\n      }\n    }\n\n    logger.debug(`[ESModuleSupport] Dependencies analysis:`, {\n      commonjs: result.commonjs.length,\n      esmodule: result.esmodule.length,\n      unknown: result.unknown.length\n    });\n\n    return result;\n  }\n\n  /**\n   * 检查是否有 ES Module 依赖\n   * @param {Object} dependencies - 依赖对象\n   * @returns {Promise<boolean>}\n   */\n  async hasESModuleDependencies(dependencies) {\n    const types = await this.detectDependenciesTypes(dependencies);\n    return types.esmodule.length > 0;\n  }\n\n  /**\n   * 清理缓存\n   */\n  clearCache() {\n    this.moduleTypeCache.clear();\n  }\n\n  /**\n   * 获取缓存统计\n   */\n  getCacheStats() {\n    return {\n      size: this.moduleTypeCache.size,\n      modules: Array.from(this.moduleTypeCache.entries())\n    };\n  }\n}\n\nmodule.exports = ESModuleRequireSupport;","/**\n * 服务器环境全局管理器\n * 管理MCP服务器的核心运行时属性：transport、host、port、processId\n * 启动时装配，运行时直接获取，避免参数传递错误\n */\nclass ServerEnvironment {\n  constructor() {\n    this.transport = null   // 'stdio' | 'http' | 'sse'\n    this.host = null       // 'localhost' | '0.0.0.0' 等\n    this.port = null       // 端口号（stdio模式为null）\n    this.processId = null  // 进程ID，用于生成mcpId\n    this.initialized = false\n  }\n\n  /**\n   * 初始化服务环境（各启动渠道调用一次）\n   * @param {Object} config - 配置对象\n   * @param {string} config.transport - 传输协议\n   * @param {string} config.host - 主机地址（可选）\n   * @param {number} config.port - 端口号（可选）\n   */\n  initialize(config) {\n    this.transport = config.transport\n    this.host = config.host || null\n    this.port = config.port || null\n    this.processId = process.pid\n    this.initialized = true\n  }\n\n  /**\n   * 获取MCP ID（基于processId生成）\n   * @returns {string} MCP进程ID\n   */\n  getMcpId() {\n    if (!this.initialized) {\n      throw new Error('ServerEnvironment not initialized')\n    }\n    return `mcp-${this.processId}`\n  }\n\n  /**\n   * 获取传输协议\n   * @returns {string} transport类型\n   */\n  getTransport() {\n    if (!this.initialized) {\n      throw new Error('ServerEnvironment not initialized')\n    }\n    return this.transport\n  }\n\n  /**\n   * 获取服务器地址信息（仅HTTP/SSE模式）\n   * @returns {Object|null} {host, port} 或 null\n   */\n  getServerAddress() {\n    if (!this.initialized) {\n      throw new Error('ServerEnvironment not initialized')\n    }\n    if (this.transport === 'stdio') {\n      return null\n    }\n    return {\n      host: this.host,\n      port: this.port\n    }\n  }\n\n  /**\n   * 检查是否已初始化\n   * @returns {boolean}\n   */\n  isInitialized() {\n    return this.initialized\n  }\n}\n\n// 创建全局单例实例\nlet globalServerEnvironment = null\n\n/**\n * 获取全局ServerEnvironment单例\n * @returns {ServerEnvironment} 全局ServerEnvironment实例\n */\nfunction getGlobalServerEnvironment() {\n  if (!globalServerEnvironment) {\n    globalServerEnvironment = new ServerEnvironment()\n  }\n  return globalServerEnvironment\n}\n\nmodule.exports = ServerEnvironment\nmodule.exports.getGlobalServerEnvironment = getGlobalServerEnvironment","const fs = require('fs-extra')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst { getGlobalServerEnvironment } = require('./ServerEnvironment')\nconst logger = require('@promptx/logger')\n\n/**\n * 统一项目管理器 - 新架构\n * 核心原则：一次设置，全程使用\n * 负责当前项目状态管理和多项目配置持久化\n */\nclass ProjectManager {\n  constructor() {\n    this.promptxHomeDir = path.join(os.homedir(), '.promptx')\n    this.projectsDir = path.join(this.promptxHomeDir, 'project')\n  }\n\n  // 🎯 新架构：当前项目状态管理\n  static currentProject = {\n    workingDirectory: null,\n    mcpId: null,\n    ideType: null,\n    transport: null,\n    initialized: false\n  }\n\n  /**\n   * 设置当前项目（init时调用）\n   * @param {string} workingDirectory - 项目工作目录绝对路径\n   * @param {string} mcpId - MCP进程ID\n   * @param {string} ideType - IDE类型\n   * @param {string} transport - 传输协议类型\n   */\n  static setCurrentProject(workingDirectory, mcpId, ideType, transport) {\n    this.currentProject = {\n      workingDirectory: path.resolve(workingDirectory),\n      mcpId,\n      ideType,\n      transport,\n      initialized: true\n    }\n  }\n\n  /**\n   * 获取当前项目路径（@project协议使用）\n   * @returns {string} 当前项目工作目录\n   */\n  static getCurrentProjectPath() {\n    logger.debug(`[ProjectManager DEBUG] getCurrentProjectPath被调用`)\n    logger.debug(`[ProjectManager DEBUG] currentProject.initialized: ${this.currentProject.initialized}`)\n    logger.debug(`[ProjectManager DEBUG] currentProject状态:`, JSON.stringify(this.currentProject, null, 2))\n    \n    // 输出完整的调用栈，包含文件名和行号\n    const stack = new Error().stack\n    const stackLines = stack.split('\\n').slice(1, 8) // 取前7层调用栈\n    logger.error(`[ProjectManager DEBUG] 完整调用栈:`)\n    stackLines.forEach((line, index) => {\n      logger.error(`[ProjectManager DEBUG]   ${index + 1}. ${line.trim()}`)\n    })\n    \n    if (!this.currentProject.initialized) {\n      logger.error(`[ProjectManager DEBUG] ❌ 项目未初始化，将抛出错误`)\n      throw new Error('项目未初始化，请先调用 init 命令')\n    }\n    \n    logger.debug(`[ProjectManager DEBUG] ✅ 返回项目路径: ${this.currentProject.workingDirectory}`)\n    return this.currentProject.workingDirectory\n  }\n\n  /**\n   * 获取当前项目信息\n   * @returns {Object} 当前项目完整信息\n   */\n  static getCurrentProject() {\n    logger.debug(`[ProjectManager DEBUG] getCurrentProject被调用`)\n    logger.debug(`[ProjectManager DEBUG] currentProject.initialized: ${this.currentProject.initialized}`)\n    logger.debug(`[ProjectManager DEBUG] currentProject状态:`, JSON.stringify(this.currentProject, null, 2))\n    \n    if (!this.currentProject.initialized) {\n      logger.error(`[ProjectManager DEBUG] ❌ 项目未初始化，将抛出错误`)\n      throw new Error('项目未初始化，请先调用 init 命令')\n    }\n    \n    logger.debug(`[ProjectManager DEBUG] ✅ 返回项目信息`)\n    return { ...this.currentProject }\n  }\n\n  /**\n   * 检查项目是否已初始化\n   * @returns {boolean} 是否已初始化\n   */\n  static isInitialized() {\n    return this.currentProject.initialized\n  }\n\n  /**\n   * 注册项目到MCP实例 - 使用Hash目录结构\n   * @param {string} projectPath - 项目绝对路径\n   * @param {string} mcpId - MCP进程ID\n   * @param {string} ideType - IDE类型（cursor/vscode等）\n   * @param {string} transport - 传输协议类型（stdio/http/sse）\n   * @returns {Promise<Object>} 项目配置对象\n   */\n  async registerProject(projectPath, mcpId, ideType, transport = 'stdio') {\n    // 验证项目路径\n    if (!await this.validateProjectPath(projectPath)) {\n      throw new Error(`无效的项目路径: ${projectPath}`)\n    }\n\n    // 生成项目配置\n    const projectConfig = {\n      mcpId: mcpId,\n      ideType: ideType.toLowerCase(),\n      transport: transport.toLowerCase(),\n      projectPath: path.resolve(projectPath),\n      projectHash: this.generateProjectHash(projectPath)\n    }\n\n    // 生成项目Hash目录\n    const projectHash = this.generateProjectHash(projectPath)\n    const projectConfigDir = path.join(this.projectsDir, projectHash)\n\n    // 🎯 确保Hash目录和.promptx子目录存在\n    await fs.ensureDir(projectConfigDir)\n    await fs.ensureDir(path.join(projectConfigDir, '.promptx'))\n    await fs.ensureDir(path.join(projectConfigDir, '.promptx', 'memory'))\n    await fs.ensureDir(path.join(projectConfigDir, '.promptx', 'resource'))\n\n    // 生成配置文件名并保存到Hash目录下\n    const fileName = this.generateConfigFileName(mcpId, ideType, transport, projectPath)\n    const configPath = path.join(projectConfigDir, fileName)\n    \n    await fs.writeJson(configPath, projectConfig, { spaces: 2 })\n    \n    return projectConfig\n  }\n\n  /**\n   * 根据MCP ID获取单个项目配置（假设只有一个项目）\n   * @param {string} mcpId - MCP进程ID\n   * @returns {Promise<Object|null>} 项目配置对象\n   */\n  async getProjectByMcpId(mcpId) {\n    const projects = await this.getProjectsByMcpId(mcpId)\n    return projects.length > 0 ? projects[0] : null\n  }\n\n  /**\n   * 根据MCP ID获取所有绑定的项目配置 - 支持Hash目录结构\n   * @param {string} mcpId - MCP进程ID\n   * @returns {Promise<Array>} 项目配置数组\n   */\n  async getProjectsByMcpId(mcpId) {\n    if (!await fs.pathExists(this.projectsDir)) {\n      return []\n    }\n\n    const hashDirs = await fs.readdir(this.projectsDir)\n    const projects = []\n\n    for (const hashDir of hashDirs) {\n      const hashDirPath = path.join(this.projectsDir, hashDir)\n      \n      // 🎯 只处理Hash目录（忽略旧的平铺文件）\n      if (!(await fs.stat(hashDirPath)).isDirectory()) {\n        continue\n      }\n      \n      try {\n        const configFiles = await fs.readdir(hashDirPath)\n        for (const file of configFiles) {\n          // 查找MCP配置文件\n          if (file.startsWith('mcp-') && file.endsWith('.json')) {\n            try {\n              const configPath = path.join(hashDirPath, file)\n              const config = await fs.readJson(configPath)\n              if (config.mcpId === mcpId) {\n                projects.push(config)\n              }\n            } catch (error) {\n              // 忽略损坏的配置文件\n              logger.warn(`跳过损坏的配置文件: ${file}`)\n            }\n          }\n        }\n      } catch (error) {\n        // 忽略无法读取的目录\n        logger.warn(`跳过无法读取的目录: ${hashDir}`)\n      }\n    }\n\n    return projects\n  }\n\n  /**\n   * 获取特定项目的所有实例（不同IDE/MCP的绑定） - 支持Hash目录结构\n   * @param {string} projectPath - 项目路径\n   * @returns {Promise<Array>} 项目实例数组\n   */\n  async getProjectInstances(projectPath) {\n    if (!await fs.pathExists(this.projectsDir)) {\n      return []\n    }\n\n    const projectHash = this.generateProjectHash(projectPath)\n    const projectConfigDir = path.join(this.projectsDir, projectHash)\n    \n    // 检查Hash目录是否存在\n    if (!await fs.pathExists(projectConfigDir)) {\n      return []\n    }\n\n    const instances = []\n    \n    try {\n      const configFiles = await fs.readdir(projectConfigDir)\n      \n      for (const file of configFiles) {\n        // 查找MCP配置文件\n        if (file.startsWith('mcp-') && file.endsWith('.json')) {\n          try {\n            const configPath = path.join(projectConfigDir, file)\n            const config = await fs.readJson(configPath)\n            if (config.projectHash === projectHash) {\n              instances.push(config)\n            }\n          } catch (error) {\n            logger.warn(`跳过损坏的配置文件: ${file}`)\n          }\n        }\n      }\n    } catch (error) {\n      logger.warn(`无法读取项目配置目录: ${projectConfigDir}`)\n    }\n\n    return instances\n  }\n\n  /**\n   * 删除项目绑定 - 支持Hash目录结构\n   * @param {string} mcpId - MCP进程ID\n   * @param {string} ideType - IDE类型\n   * @param {string} transport - 传输协议类型\n   * @param {string} projectPath - 项目路径\n   * @returns {Promise<boolean>} 是否删除成功\n   */\n  async removeProject(mcpId, ideType, transport, projectPath) {\n    const projectHash = this.generateProjectHash(projectPath)\n    const projectConfigDir = path.join(this.projectsDir, projectHash)\n    const fileName = this.generateConfigFileName(mcpId, ideType, transport, projectPath)\n    const configPath = path.join(projectConfigDir, fileName)\n    \n    if (await fs.pathExists(configPath)) {\n      await fs.remove(configPath)\n      \n      // 🎯 检查Hash目录是否为空，如果为空则删除整个目录\n      try {\n        const remainingFiles = await fs.readdir(projectConfigDir)\n        const mcpConfigFiles = remainingFiles.filter(file => file.startsWith('mcp-') && file.endsWith('.json'))\n        \n        if (mcpConfigFiles.length === 0) {\n          // 没有其他MCP配置文件，删除整个Hash目录\n          await fs.remove(projectConfigDir)\n        }\n      } catch (error) {\n        // 目录可能已经被删除，忽略错误\n      }\n      \n      return true\n    }\n    \n    return false\n  }\n\n  /**\n   * 清理过期的项目配置 - 支持Hash目录结构\n   * @returns {Promise<number>} 清理的配置文件数量\n   */\n  async cleanupExpiredProjects() {\n    if (!await fs.pathExists(this.projectsDir)) {\n      return 0\n    }\n\n    const hashDirs = await fs.readdir(this.projectsDir)\n    let cleanedCount = 0\n\n    for (const hashDir of hashDirs) {\n      const hashDirPath = path.join(this.projectsDir, hashDir)\n      \n      // 只处理Hash目录\n      if (!(await fs.stat(hashDirPath)).isDirectory()) {\n        continue\n      }\n      \n      try {\n        const configFiles = await fs.readdir(hashDirPath)\n        let hasValidConfig = false\n        \n        for (const file of configFiles) {\n          if (file.startsWith('mcp-') && file.endsWith('.json')) {\n            try {\n              const configPath = path.join(hashDirPath, file)\n              const config = await fs.readJson(configPath)\n              \n              // 检查项目路径是否仍然存在\n              if (!await fs.pathExists(config.projectPath)) {\n                await fs.remove(configPath)\n                cleanedCount++\n                logger.info(`清理过期项目配置: ${file}`)\n              } else {\n                hasValidConfig = true\n              }\n            } catch (error) {\n              // 清理损坏的配置文件\n              await fs.remove(path.join(hashDirPath, file))\n              cleanedCount++\n              logger.info(`清理损坏配置文件: ${file}`)\n            }\n          }\n        }\n        \n        // 如果Hash目录中没有有效的配置文件，删除整个目录\n        if (!hasValidConfig) {\n          await fs.remove(hashDirPath)\n          logger.info(`清理空的项目Hash目录: ${hashDir}`)\n        }\n      } catch (error) {\n        // 清理无法访问的目录\n        await fs.remove(hashDirPath)\n        cleanedCount++\n        logger.info(`清理无法访问的目录: ${hashDir}`)\n      }\n    }\n\n    return cleanedCount\n  }\n\n  /**\n   * 生成多项目环境下的AI提示词\n   * @param {string} contextType - 上下文类型：'list'/'action'/'learn'\n   * @param {string} mcpId - MCP进程ID\n   * @param {string} ideType - IDE类型\n   * @returns {Promise<string>} 格式化的AI提示词\n   */\n  async generateTopLevelProjectPrompt(contextType = 'list', mcpId, ideType) {\n    const projects = await this.getProjectsByMcpId(mcpId)\n    \n    if (projects.length === 0) {\n      // 未绑定项目，但这是正常的，不需要特别提示\n      return ''\n    }\n    \n    if (projects.length === 1) {\n      // 单项目环境（保持现有体验）\n      const project = projects[0]\n      const basePrompt = `🛑 **项目环境验证** 🛑\n📍 当前绑定项目: ${project.projectPath}\n🔗 MCP实例: ${mcpId} (${ideType})\n\n⚠️ **执行前确认**：上述路径是否为你当前工作的项目？`\n\n      switch (contextType) {\n        case 'action':\n          return `${basePrompt}\n如不一致，立即停止所有操作并使用 \\`promptx_init\\` 更新！\n\n💥 **严重警告**：在错误项目路径下操作将导致不可预知的错误！`\n        \n        case 'learn':\n          return `${basePrompt}\n错误环境将导致知识关联失效！\n\n💥 **严重警告**：项目环境不匹配将影响学习效果！`\n        \n        default:\n          return `${basePrompt}\n如不一致，必须使用 \\`promptx_init\\` 更新正确路径！\n\n💥 **严重警告**：错误的项目环境将导致服务异常！`\n      }\n    }\n    \n    // 多项目环境\n    const projectList = projects.map((proj, index) => \n      `${index + 1}. ${path.basename(proj.projectPath)} (${proj.projectPath})`\n    ).join('\\n')\n    \n    return `🎯 **多项目环境检测** 🎯\n📍 当前MCP实例(${mcpId})已绑定 ${projects.length} 个项目：\n\n${projectList}\n\n⚠️ **请明确指定**：你要在哪个项目中执行操作？\n💡 **建议**：在对话中明确说明项目名称或路径`\n  }\n\n  /**\n   * 验证路径是否为有效的项目目录\n   * @param {string} projectPath - 要验证的路径\n   * @returns {Promise<boolean>} 是否为有效项目目录\n   */\n  async validateProjectPath(projectPath) {\n    try {\n      // 基础检查：路径存在且为目录\n      const stat = await fs.stat(projectPath)\n      if (!stat.isDirectory()) {\n        return false\n      }\n\n      // 简单检查：避免明显错误的路径\n      const resolved = path.resolve(projectPath)\n      const homeDir = os.homedir()\n      \n      // 不允许是用户主目录\n      if (resolved === homeDir) {\n        return false\n      }\n\n      return true\n    } catch (error) {\n      return false\n    }\n  }\n\n  /**\n   * 生成配置文件名\n   * @param {string} mcpId - MCP进程ID\n   * @param {string} ideType - IDE类型\n   * @param {string} transport - 传输协议类型\n   * @param {string} projectPath - 项目路径\n   * @returns {string} 配置文件名\n   */\n  generateConfigFileName(mcpId, ideType, transport, projectPath) {\n    const projectHash = this.generateProjectHash(projectPath)\n    const projectName = path.basename(projectPath).toLowerCase().replace(/[^a-z0-9-]/g, '-')\n    const ideTypeSafe = ideType.replace(/[^a-z0-9-]/g, '').toLowerCase() || 'unknown'\n    const transportSafe = transport.replace(/[^a-z0-9-]/g, '').toLowerCase() || 'unknown'\n    // 格式：mcp-transport-id-idetype-projectname-hash.json\n    return `mcp-${transportSafe}-${mcpId.replace('mcp-', '')}-${ideTypeSafe}-${projectName}-${projectHash}.json`\n  }\n\n  /**\n   * 生成项目路径的Hash值\n   * @param {string} projectPath - 项目路径\n   * @returns {string} 8位Hash值\n   */\n  generateProjectHash(projectPath) {\n    return crypto.createHash('md5').update(path.resolve(projectPath)).digest('hex').substr(0, 8)\n  }\n\n  /**\n   * 从配置文件中获取IDE类型\n   * @param {string} mcpId - MCP进程ID\n   * @returns {Promise<string>} IDE类型\n   */\n  async getIdeType(mcpId) {\n    const project = await this.getProjectByMcpId(mcpId)\n    return project ? project.ideType : 'unknown'\n  }\n\n  /**\n   * 生成MCP进程ID - 基于进程ID确保实例唯一\n   * @param {string} ideType - IDE类型（保留参数兼容性，实际不使用）\n   * @returns {string} MCP进程ID\n   */\n  static generateMcpId(ideType = 'unknown') {\n    const serverEnv = getGlobalServerEnvironment()\n    if (serverEnv.isInitialized()) {\n      return serverEnv.getMcpId()\n    }\n    // fallback到原逻辑\n    return `mcp-${process.pid}`\n  }\n\n  /**\n   * 统一项目注册方法 - 新架构：设置当前项目并持久化配置\n   * @param {string} workingDirectory - 项目工作目录\n   * @param {string} ideType - IDE类型（可选，默认'unknown'）\n   * @returns {Promise<Object>} 项目配置对象\n   */\n  static async registerCurrentProject(workingDirectory, ideType = 'unknown') {\n    logger.debug(`[ProjectManager DEBUG] ======= registerCurrentProject开始 =======`)\n    logger.debug(`[ProjectManager DEBUG] 参数 - workingDirectory: ${workingDirectory}`)\n    logger.debug(`[ProjectManager DEBUG] 参数 - ideType: ${ideType}`)\n    logger.debug(`[ProjectManager DEBUG] 注册前 currentProject状态:`, JSON.stringify(this.currentProject, null, 2))\n    \n    const serverEnv = getGlobalServerEnvironment()\n    if (!serverEnv.isInitialized()) {\n      logger.error(`[ProjectManager DEBUG] ❌ ServerEnvironment未初始化`)\n      throw new Error('ServerEnvironment not initialized')\n    }\n    \n    const mcpId = serverEnv.getMcpId()\n    const transport = serverEnv.getTransport()\n    logger.debug(`[ProjectManager DEBUG] ServerEnvironment信息 - mcpId: ${mcpId}, transport: ${transport}`)\n    \n    // 🎯 新架构：设置当前项目状态\n    logger.debug(`[ProjectManager DEBUG] 调用 setCurrentProject...`)\n    this.setCurrentProject(workingDirectory, mcpId, ideType, transport)\n    logger.debug(`[ProjectManager DEBUG] setCurrentProject完成后 currentProject状态:`, JSON.stringify(this.currentProject, null, 2))\n    \n    // 持久化项目配置（保持多项目管理功能）\n    logger.debug(`[ProjectManager DEBUG] 开始持久化项目配置...`)\n    const projectManager = getGlobalProjectManager()\n    const result = await projectManager.registerProject(workingDirectory, mcpId, ideType, transport)\n    logger.debug(`[ProjectManager DEBUG] 项目配置持久化完成:`, JSON.stringify(result, null, 2))\n    logger.debug(`[ProjectManager DEBUG] ======= registerCurrentProject结束 =======`)\n    \n    return result\n  }\n}\n\n// 创建全局单例实例\nlet globalProjectManager = null\n\n/**\n * 获取全局ProjectManager单例\n * @returns {ProjectManager} 全局ProjectManager实例\n */\nfunction getGlobalProjectManager() {\n  if (!globalProjectManager) {\n    globalProjectManager = new ProjectManager()\n  }\n  return globalProjectManager\n}\n\nmodule.exports = ProjectManager\nmodule.exports.ProjectManager = ProjectManager\nmodule.exports.getGlobalProjectManager = getGlobalProjectManager","const path = require('path')\nconst ProjectManager = require('./ProjectManager')\n\n/**\n * 项目路径解析器 - 新架构\n * 轻量级的@project协议路径解析，基于当前项目状态\n * 替代复杂的.promptx目录查找逻辑\n */\nclass ProjectPathResolver {\n  constructor() {\n    // 支持的项目结构目录映射\n    this.projectDirs = {\n      root: '', // 项目根目录\n      src: 'src', // 源代码目录\n      lib: 'lib', // 库目录\n      build: 'build', // 构建输出目录\n      dist: 'dist', // 分发目录\n      docs: 'docs', // 文档目录\n      test: 'test', // 测试目录\n      tests: 'tests', // 测试目录（复数）\n      spec: 'spec', // 规范测试目录\n      config: 'config', // 配置目录\n      scripts: 'scripts', // 脚本目录\n      assets: 'assets', // 资源目录\n      public: 'public', // 公共资源目录\n      static: 'static', // 静态资源目录\n      templates: 'templates', // 模板目录\n      examples: 'examples', // 示例目录\n      tools: 'tools', // 工具目录\n      '.promptx': '.promptx' // PromptX配置目录\n    }\n  }\n\n  /**\n   * 解析@project://协议路径\n   * @param {string} resourcePath - 资源路径，如 \"src/index.js\" 或 \".promptx/resource/...\"\n   * @returns {string} 解析后的绝对路径\n   */\n  resolvePath(resourcePath) {\n    // 🎯 新架构：直接获取当前项目路径，无需查找\n    const projectRoot = ProjectManager.getCurrentProjectPath()\n    \n    // 特殊处理：.promptx开头的路径直接相对于项目根目录\n    if (resourcePath.startsWith('.promptx/')) {\n      const fullPath = path.join(projectRoot, resourcePath)\n      return this._validatePath(fullPath, projectRoot)\n    }\n\n    // 标准路径处理逻辑\n    const parts = resourcePath.split('/')\n    const dirType = parts[0]\n    const relativePath = parts.slice(1).join('/')\n\n    // 验证目录类型\n    if (!this.projectDirs.hasOwnProperty(dirType)) {\n      throw new Error(`不支持的项目目录类型: ${dirType}。支持的类型: ${Object.keys(this.projectDirs).join(', ')}`)\n    }\n\n    // 构建目标目录路径\n    const projectDirPath = this.projectDirs[dirType]\n    const targetDir = projectDirPath ? path.join(projectRoot, projectDirPath) : projectRoot\n\n    // 如果没有相对路径，返回目录本身\n    if (!relativePath) {\n      return targetDir\n    }\n\n    // 拼接完整路径\n    const fullPath = path.join(targetDir, relativePath)\n    return this._validatePath(fullPath, projectRoot)\n  }\n\n  /**\n   * 获取项目根目录\n   * @returns {string} 当前项目根目录\n   */\n  getProjectRoot() {\n    return ProjectManager.getCurrentProjectPath()\n  }\n\n  /**\n   * 获取PromptX配置目录路径\n   * @returns {string} .promptx目录路径\n   */\n  getPromptXDirectory() {\n    const projectRoot = ProjectManager.getCurrentProjectPath()\n    return path.join(projectRoot, '.promptx')\n  }\n\n  /**\n   * 获取项目资源目录路径\n   * @returns {string} 项目资源目录路径\n   */\n  getResourceDirectory() {\n    const promptxDir = this.getPromptXDirectory()\n    return path.join(promptxDir, 'resource')\n  }\n\n  /**\n   * 获取项目注册表文件路径\n   * @returns {string} 注册表文件路径\n   */\n  getRegistryPath() {\n    const resourceDir = this.getResourceDirectory()\n    return path.join(resourceDir, 'project.registry.json')\n  }\n\n  /**\n   * 获取记忆目录路径\n   * @returns {string} 记忆目录路径\n   */\n  getMemoryDirectory() {\n    const promptxDir = this.getPromptXDirectory()\n    return path.join(promptxDir, 'memory')\n  }\n\n  /**\n   * 验证路径安全性\n   * @param {string} fullPath - 完整路径\n   * @param {string} projectRoot - 项目根目录\n   * @returns {string} 验证后的路径\n   * @private\n   */\n  _validatePath(fullPath, projectRoot) {\n    // 安全检查：确保路径在项目目录内\n    const resolvedPath = path.resolve(fullPath)\n    const resolvedProjectRoot = path.resolve(projectRoot)\n\n    if (!resolvedPath.startsWith(resolvedProjectRoot)) {\n      throw new Error(`安全错误：路径超出项目目录范围: ${resolvedPath}`)\n    }\n\n    return resolvedPath\n  }\n\n  /**\n   * 获取支持的目录类型\n   * @returns {Array<string>} 支持的目录类型列表\n   */\n  getSupportedDirectories() {\n    return Object.keys(this.projectDirs)\n  }\n\n  /**\n   * 检查目录类型是否支持\n   * @param {string} dirType - 目录类型\n   * @returns {boolean} 是否支持\n   */\n  isSupportedDirectory(dirType) {\n    return this.projectDirs.hasOwnProperty(dirType)\n  }\n}\n\n// 创建全局单例实例\nlet globalProjectPathResolver = null\n\n/**\n * 获取全局ProjectPathResolver单例\n * @returns {ProjectPathResolver} 全局ProjectPathResolver实例\n */\nfunction getGlobalProjectPathResolver() {\n  if (!globalProjectPathResolver) {\n    globalProjectPathResolver = new ProjectPathResolver()\n  }\n  return globalProjectPathResolver\n}\n\nmodule.exports = ProjectPathResolver\nmodule.exports.getGlobalProjectPathResolver = getGlobalProjectPathResolver","const path = require('path');\nconst fs = require('fs').promises;\nconst { spawn } = require('child_process');\nconst vm = require('vm');\nconst SandboxIsolationManager = require('./SandboxIsolationManager');\nconst SandboxErrorManager = require('./SandboxErrorManager');\nconst ToolDirectoryManager = require('./ToolDirectoryManager');\nconst ESModuleRequireSupport = require('./ESModuleRequireSupport');\nconst logger = require('@promptx/logger');\n\n/**\n * ToolSandbox - 工具沙箱环境管理器\n * \n * 基于现有协议系统的工具执行环境，支持：\n * - @tool:// 协议定位工具\n * - @user://.promptx/toolbox 沙箱隔离\n * - 自动依赖管理\n * - 可复用的执行环境\n */\nclass ToolSandbox {\n  constructor(toolReference, options = {}) {\n    this.toolReference = toolReference;  // @tool://url-validator\n    this.resourceManager = null;         // ResourceManager实例\n    this.toolId = null;                  // 工具ID，如 url-validator\n    this.toolContent = null;             // 工具文件内容\n    this.toolInstance = null;            // 工具实例\n    this.dependencies = [];              // 依赖列表\n    this.directoryManager = null;        // 目录管理器（新增）\n    this.sandboxPath = null;             // 沙箱目录路径（保留用于兼容）\n    this.sandboxContext = null;          // VM沙箱上下文\n    this.isolationManager = null;        // 沙箱隔离管理器\n    this.errorManager = new SandboxErrorManager(); // 智能错误管理器\n    this.esModuleSupport = null;         // ES Module 支持器\n    \n    // 状态标志\n    this.isAnalyzed = false;\n    this.isPrepared = false;\n    \n    // 配置选项\n    this.options = {\n      timeout: 30000,\n      enableDependencyInstall: true,\n      rebuild: false,  // 强制重建沙箱（用于处理异常情况）\n      ...options\n    };\n  }\n\n  /**\n   * 设置ResourceManager实例\n   * @param {ResourceManager} resourceManager \n   */\n  setResourceManager(resourceManager) {\n    this.resourceManager = resourceManager;\n  }\n\n  /**\n   * 清理沙箱状态和缓存\n   * @param {boolean} deleteDirectory - 是否删除沙箱目录\n   */\n  async clearSandbox(deleteDirectory = false) {\n    logger.debug(`[ToolSandbox] Clearing sandbox state${deleteDirectory ? ' and deleting directory' : ''}`);\n    \n    // 清空所有缓存和状态\n    this.isAnalyzed = false;\n    this.isPrepared = false;\n    this.toolContent = null;\n    this.toolInstance = null;\n    this.dependencies = [];\n    this.sandboxContext = null;\n    \n    // 如果需要，删除沙箱目录\n    if (deleteDirectory && this.directoryManager) {\n      try {\n        await this.directoryManager.deleteToolbox();\n      } catch (error) {\n        logger.debug(`[ToolSandbox] Error deleting toolbox directory (can be ignored): ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * 分析工具：加载工具内容，提取元信息和依赖\n   * @returns {Promise<Object>} 分析结果\n   */\n  async analyze() {\n    if (this.isAnalyzed && !this.options.rebuild) {\n      logger.debug(`[ToolSandbox] Using cached analysis result, dependencies: ${JSON.stringify(this.dependencies)}`);\n      return this.getAnalysisResult();\n    }\n\n    if (!this.resourceManager) {\n      throw new Error('ResourceManager not set. Call setResourceManager() first.');\n    }\n\n    try {\n      // 1. 解析工具引用，提取工具ID\n      this.toolId = this.extractToolId(this.toolReference);\n      \n      // 2. 通过协议系统加载工具（forceReinstall时强制重新加载）\n      const loadOptions = this.options.forceReinstall ? { noCache: true } : {};\n      logger.debug(`[ToolSandbox] Loading tool ${this.toolReference}, options:`, loadOptions);\n      \n      const toolResult = await this.resourceManager.loadResource(this.toolReference, loadOptions);\n      if (!toolResult.success) {\n        // 调试：尝试不同的查找方式\n        logger.debug(`[ToolSandbox] Debug: Trying to find tool ${this.toolReference}`);\n        const directLookup = this.resourceManager.registryData.findResourceById(`tool:${this.toolId}`, 'tool');\n        logger.debug(`[ToolSandbox]    - Direct lookup tool:${this.toolId}: ${directLookup ? 'found' : 'not found'}`);\n        \n        throw new Error(`Failed to load tool: ${toolResult.error.message}`);\n      }\n      \n      this.toolContent = toolResult.content;\n      \n      // 调试：检查加载的工具内容\n      logger.debug(`[ToolSandbox] Loaded tool content first 200 chars:`, this.toolContent.substring(0, 200));\n      \n      // 3. 初始化目录管理器\n      this.directoryManager = new ToolDirectoryManager(this.toolId, this.resourceManager);\n      await this.directoryManager.initialize();\n      await this.directoryManager.ensureDirectories();\n      \n      // 4. 设置 sandboxPath 用于兼容\n      this.sandboxPath = this.directoryManager.getWorkingPath();\n      \n      // 5. 在基础沙箱中分析工具\n      await this.analyzeToolInSandbox();\n      \n      this.isAnalyzed = true;\n      return this.getAnalysisResult();\n      \n    } catch (error) {\n      throw new Error(`Tool analysis failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * 准备依赖：安装依赖，准备执行环境\n   * @returns {Promise<Object>} 准备结果\n   */\n  async prepareDependencies() {\n    logger.info(`[ToolSandbox] Starting prepareDependencies for tool ${this.toolId}`);\n    \n    // 处理rebuild选项\n    if (this.options.rebuild) {\n      logger.info(`[ToolSandbox] Manually triggering sandbox rebuild`);\n      await this.clearSandbox(true);\n      // 重新初始化目录管理器\n      if (this.directoryManager) {\n        await this.directoryManager.initialize();\n      }\n    }\n    \n    // 分析工具（如果需要）\n    if (!this.isAnalyzed) {\n      logger.info(`[ToolSandbox] Starting tool analysis`);\n      await this.analyze();\n      logger.info(`[ToolSandbox] Tool analysis completed`);\n    }\n    \n    // 自动检测依赖是否需要更新\n    if (!this.options.rebuild && await this.checkDependenciesNeedUpdate()) {\n      logger.debug(`[ToolSandbox] Dependency changes detected, auto-rebuilding sandbox`);\n      await this.clearSandbox(true);\n      // 重新分析以获取最新依赖\n      await this.analyze();\n    }\n    \n    if (this.isPrepared) {\n      return { success: true, message: 'Dependencies already prepared' };\n    }\n\n    try {\n      // 1. 确保沙箱目录存在\n      await this.ensureSandboxDirectory();\n      \n      // 2. 如果有依赖，安装它们\n      const hasDependencies = typeof this.dependencies === 'object' && !Array.isArray(this.dependencies) \n        ? Object.keys(this.dependencies).length > 0\n        : this.dependencies.length > 0;\n        \n      if (hasDependencies) {\n        logger.info(`[ToolSandbox] Installing dependencies`);\n        await this.installDependencies();\n        logger.info(`[ToolSandbox] Dependencies installation completed`);\n        \n        // 2.1 检测 ES Module 依赖\n        await this.detectAndHandleESModules();\n      }\n      \n      // 3. 创建执行沙箱环境\n      logger.info(`[ToolSandbox] Creating execution sandbox`);\n      await this.createExecutionSandbox();\n      logger.info(`[ToolSandbox] Execution sandbox created`);\n      \n      this.isPrepared = true;\n      return { \n        success: true, \n        sandboxPath: this.directoryManager.getWorkingPath(),\n        toolboxPath: this.directoryManager.getToolboxPath(),\n        dependencies: this.dependencies \n      };\n      \n    } catch (error) {\n      throw new Error(`Dependency preparation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * 执行工具\n   * @param {Object} parameters - 工具参数\n   * @returns {Promise<Object>} 执行结果\n   */\n  async execute(parameters = {}) {\n    const startTime = Date.now();\n    logger.info(`[ToolSandbox] Executing tool \"${this.toolId}\" with params: ${JSON.stringify(parameters)}`);\n    \n    if (!this.isPrepared) {\n      logger.debug(`[ToolSandbox] Preparing dependencies for tool ${this.toolId}`);\n      await this.prepareDependencies();\n    }\n\n    try {\n      // 1. 参数验证\n      await this.validateParameters(parameters);\n      \n      // 2. 在沙箱中执行工具\n      const result = await this.executeInSandbox(parameters);\n      \n      const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);\n      logger.info(`[ToolSandbox] Tool \"${this.toolId}\" executed successfully in ${elapsed}s, result type: ${typeof result}`);\n      \n      return {\n        success: true,\n        data: result,\n        metadata: {\n          toolId: this.toolId,\n          sandboxPath: this.directoryManager.getWorkingPath(),\n          toolboxPath: this.directoryManager.getToolboxPath(),\n          executionTime: Date.now()\n        }\n      };\n      \n    } catch (error) {\n      // 使用智能错误管理器分析错误\n      const intelligentError = this.errorManager.analyzeError(error, {\n        toolId: this.toolId,\n        dependencies: this.dependencies,\n        sandboxPath: this.directoryManager?.getWorkingPath(),\n        toolboxPath: this.directoryManager?.getToolboxPath(),\n        phase: 'execute'\n      });\n      \n      // 抛出增强的错误对象，供上层处理自动重试\n      const enhancedError = new Error(intelligentError.formattedMessage);\n      enhancedError.intelligentError = intelligentError;\n      enhancedError.originalError = error;\n      throw enhancedError;\n    }\n  }\n\n  /**\n   * 提取工具ID\n   * @param {string} toolReference - @tool://url-validator\n   * @returns {string} 工具ID\n   */\n  extractToolId(toolReference) {\n    const match = toolReference.match(/^@tool:\\/\\/(.+)$/);\n    if (!match) {\n      throw new Error(`Invalid tool reference format: ${toolReference}`);\n    }\n    return match[1];\n  }\n\n\n  /**\n   * 在基础沙箱中分析工具\n   */\n  async analyzeToolInSandbox() {\n    // 创建分析阶段的隔离管理器，使用工作目录\n    this.isolationManager = new SandboxIsolationManager(this.directoryManager.getWorkingPath(), {\n      enableDependencyLoading: false,\n      analysisMode: true\n    });\n    \n    const sandbox = this.isolationManager.createIsolatedContext();\n    \n    // 调试：检查即将执行的代码\n    logger.debug(`[ToolSandbox] Tool code getDependencies section:`, \n      this.toolContent.match(/getDependencies[\\s\\S]*?return[\\s\\S]*?\\]/)?.[0] || 'getDependencies not found');\n    \n    const script = new vm.Script(this.toolContent, { filename: `${this.toolId}.js` });\n    const context = vm.createContext(sandbox);\n    \n    try {\n      script.runInContext(context);\n    } catch (error) {\n      // 使用智能错误过滤处理require错误\n      const filteredError = this._filterRequireError(error);\n      if (filteredError) {\n        throw filteredError;\n      }\n      // 如果是预期的require错误，继续执行\n    }\n    \n    const exported = context.module.exports;\n    \n    if (!exported) {\n      throw new Error(`Tool does not export anything: ${this.toolId}`);\n    }\n    \n    // 创建工具实例\n    let toolInstance;\n    if (typeof exported === 'function') {\n      toolInstance = new exported();\n    } else if (typeof exported === 'object') {\n      toolInstance = exported;\n    } else {\n      throw new Error(`Invalid tool export format: ${this.toolId}`);\n    }\n    \n    // 提取依赖\n    if (typeof toolInstance.getDependencies === 'function') {\n      try {\n        this.dependencies = toolInstance.getDependencies() || {};\n        logger.debug(`[ToolSandbox] Extracted dependencies: ${JSON.stringify(this.dependencies)}`);\n      } catch (error) {\n        logger.warn(`[ToolSandbox] Failed to get dependencies for ${this.toolId}: ${error.message}`);\n        this.dependencies = {};\n      }\n    } else {\n      logger.debug(`[ToolSandbox] Tool does not have getDependencies method`);\n      this.dependencies = {};\n    }\n    \n    this.toolInstance = toolInstance;\n  }\n\n  /**\n   * 智能过滤require错误\n   * @param {Error} error - 捕获的错误\n   * @returns {Error|null} - 如果是真正的错误则返回Error对象，如果是预期的require错误则返回null\n   * @private\n   */\n  _filterRequireError(error) {\n    // 检查是否是MODULE_NOT_FOUND错误\n    if (error.code === 'MODULE_NOT_FOUND') {\n      const missingModule = this._extractMissingModuleName(error.message);\n      \n      if (missingModule) {\n        // 获取已声明的依赖列表\n        const declaredDependencies = this._extractDeclaredDependencies();\n        \n        // 检查缺失的模块是否在依赖声明中\n        if (this._isDeclaredInDependencies(missingModule, declaredDependencies)) {\n          logger.debug(`[ToolSandbox] Dependency ${missingModule} not installed, will install in prepareDependencies phase`);\n          return null; // 预期的错误，忽略\n        } else {\n          return new Error(`未声明的依赖: ${missingModule}，请在getDependencies()中添加此依赖`);\n        }\n      }\n    }\n    \n    // 其他错误直接返回\n    return error;\n  }\n\n  /**\n   * 从错误信息中提取缺失的模块名\n   * @param {string} errorMessage - 错误信息\n   * @returns {string|null} - 模块名或null\n   * @private\n   */\n  _extractMissingModuleName(errorMessage) {\n    // 匹配 \"Cannot find module 'moduleName'\" 或 \"Cannot resolve module 'moduleName'\"\n    const match = errorMessage.match(/Cannot (?:find|resolve) module ['\"]([^'\"]+)['\"]/);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * 尝试从工具代码中提取已声明的依赖\n   * @returns {string[]} - 依赖列表\n   * @private\n   */\n  _extractDeclaredDependencies() {\n    try {\n      // 尝试通过正则表达式从代码中提取getDependencies的返回值\n      const dependencyMatch = this.toolContent.match(/getDependencies\\s*\\(\\s*\\)\\s*\\{[\\s\\S]*?return\\s*\\[([\\s\\S]*?)\\]/);\n      \n      if (dependencyMatch) {\n        const dependencyString = dependencyMatch[1];\n        // 提取字符串字面量\n        const stringMatches = dependencyString.match(/['\"]([^'\"]+)['\"]/g);\n        if (stringMatches) {\n          return stringMatches.map(str => str.slice(1, -1)); // 去掉引号\n        }\n      }\n    } catch (error) {\n      logger.warn(`[ToolSandbox] Unable to parse dependency declaration: ${error.message}`);\n    }\n    \n    return [];\n  }\n\n  /**\n   * 检查模块是否在依赖声明中\n   * @param {string} moduleName - 模块名\n   * @param {string[]} declaredDependencies - 已声明的依赖列表\n   * @returns {boolean} - 是否已声明\n   * @private\n   */\n  _isDeclaredInDependencies(moduleName, declaredDependencies) {\n    return declaredDependencies.some(dep => {\n      // 支持 \"axios@^1.6.0\" 格式，提取模块名部分\n      const depName = dep.split('@')[0];\n      return depName === moduleName;\n    });\n  }\n\n  /**\n   * 检查沙箱目录是否存在\n   * @returns {Promise<boolean>}\n   */\n  async sandboxExists() {\n    if (!this.directoryManager) {\n      return false;\n    }\n    return await this.directoryManager.toolboxExists();\n  }\n\n  /**\n   * 确保沙箱目录存在\n   */\n  async ensureSandboxDirectory() {\n    // 委托给 directoryManager 处理\n    if (this.directoryManager) {\n      await this.directoryManager.ensureDirectories();\n    }\n  }\n\n  /**\n   * 安装依赖\n   */\n  async installDependencies() {\n    // 检查依赖是否为空（支持对象和数组格式）\n    const hasDependencies = typeof this.dependencies === 'object' && !Array.isArray(this.dependencies) \n      ? Object.keys(this.dependencies).length > 0\n      : this.dependencies.length > 0;\n      \n    if (!hasDependencies) {\n      return;\n    }\n\n    // 1. 创建package.json\n    await this.createPackageJson();\n    \n    // 2. 使用内置pnpm安装依赖\n    await this.runPnpmInstall();\n  }\n\n  /**\n   * 检查依赖是否需要更新\n   * @returns {Promise<boolean>} true表示需要更新\n   */\n  async checkDependenciesNeedUpdate() {\n    const packageJsonPath = this.directoryManager.getPackageJsonPath();\n    \n    try {\n      // 读取现有的package.json\n      const existingContent = await fs.readFile(packageJsonPath, 'utf-8');\n      const existingPackageJson = JSON.parse(existingContent);\n      const existingDeps = existingPackageJson.dependencies || {};\n      \n      // 构建新的依赖对象\n      let newDeps = {};\n      if (typeof this.dependencies === 'object' && !Array.isArray(this.dependencies)) {\n        // 新格式：直接使用对象\n        newDeps = this.dependencies;\n      } else if (Array.isArray(this.dependencies)) {\n        // 兼容旧格式（数组）\n        for (const dep of this.dependencies) {\n          if (dep.includes('@')) {\n            const lastAtIndex = dep.lastIndexOf('@');\n            if (lastAtIndex > 0) {\n              const name = dep.substring(0, lastAtIndex);\n              const version = dep.substring(lastAtIndex + 1);\n              newDeps[name] = version;\n            } else {\n              newDeps[dep] = 'latest';\n            }\n          } else {\n            newDeps[dep] = 'latest';\n          }\n        }\n      }\n      \n      // 比较依赖是否一致\n      const existingKeys = Object.keys(existingDeps).sort();\n      const newKeys = Object.keys(newDeps).sort();\n      \n      // 检查键是否相同\n      if (existingKeys.length !== newKeys.length || \n          !existingKeys.every((key, index) => key === newKeys[index])) {\n        logger.debug(`[ToolSandbox] Dependency list changed - old: ${existingKeys.join(', ')} | new: ${newKeys.join(', ')}`);\n        return true;\n      }\n      \n      // 检查版本是否相同\n      for (const key of existingKeys) {\n        if (existingDeps[key] !== newDeps[key]) {\n          logger.debug(`[ToolSandbox] Dependency version changed - ${key}: ${existingDeps[key]} -> ${newDeps[key]}`);\n          return true;\n        }\n      }\n      \n      return false;\n    } catch (error) {\n      // 文件不存在或解析失败，需要创建\n      logger.debug(`[ToolSandbox] package.json does not exist or is invalid, needs to be created`);\n      return true;\n    }\n  }\n\n  /**\n   * 创建package.json\n   */\n  async createPackageJson() {\n    const packageJsonPath = this.directoryManager.getPackageJsonPath();\n    \n    const packageJson = {\n      name: `toolbox-${this.toolId}`,\n      version: '1.0.0',\n      description: `Sandbox for tool: ${this.toolId}`,\n      private: true,\n      dependencies: {}\n    };\n    \n    // 直接使用 getDependencies 返回的对象格式 {\"package-name\": \"version\"}\n    logger.debug(`[ToolSandbox] Processing dependencies: ${JSON.stringify(this.dependencies)}`);\n    if (typeof this.dependencies === 'object' && !Array.isArray(this.dependencies)) {\n      // 新格式：直接使用对象\n      packageJson.dependencies = this.dependencies;\n    } else if (Array.isArray(this.dependencies)) {\n      // 兼容旧格式（数组），但应该逐步废弃\n      logger.warn(`[ToolSandbox] Tool ${this.toolId} is using deprecated array format for dependencies. Please update to object format.`);\n      for (const dep of this.dependencies) {\n        if (dep.includes('@')) {\n          const lastAtIndex = dep.lastIndexOf('@');\n          if (lastAtIndex > 0) {\n            const name = dep.substring(0, lastAtIndex);\n            const version = dep.substring(lastAtIndex + 1);\n            logger.debug(`[ToolSandbox] Parsing dependency \"${dep}\" => name=\"${name}\", version=\"${version}\"`);\n            packageJson.dependencies[name] = version;\n          } else {\n            // 只有 @ 开头，没有版本号的情况（如 @scope/package）\n            packageJson.dependencies[dep] = 'latest';\n          }\n        } else {\n          packageJson.dependencies[dep] = 'latest';\n        }\n      }\n    }\n    \n    await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2));\n  }\n\n  /**\n   * 运行pnpm安装\n   */\n  async runPnpmInstall() {\n    const startTime = Date.now();\n    \n    // 构建依赖列表信息用于日志\n    let depsList = '';\n    if (typeof this.dependencies === 'object' && !Array.isArray(this.dependencies)) {\n      depsList = Object.keys(this.dependencies).map(name => `${name}@${this.dependencies[name]}`).join(', ');\n    } else if (Array.isArray(this.dependencies)) {\n      depsList = this.dependencies.join(', ');\n    }\n    \n    logger.info(`[ToolSandbox] Installing dependencies: [${depsList}]`);\n    \n    return new Promise((resolve, reject) => {\n      // 获取内置pnpm路径 - 直接从node_modules获取\n      const pnpmModulePath = require.resolve('pnpm');\n      const pnpmBinPath = path.join(path.dirname(pnpmModulePath), 'bin', 'pnpm.cjs');\n      \n      const nodeExecutable = process.env.PROMPTX_NODE_EXECUTABLE || 'node';\n      \n      // 准备子进程环境变量\n      const spawnEnv = { ...process.env };\n      \n      // 如果使用 Electron 作为 Node.js，需要设置 ELECTRON_RUN_AS_NODE\n      // 但只在这个子进程中设置，不污染主进程\n      if (nodeExecutable === process.env.PROMPTX_NODE_EXECUTABLE && nodeExecutable.includes('electron')) {\n        spawnEnv.ELECTRON_RUN_AS_NODE = '1';\n        logger.info(`[ToolSandbox] Setting ELECTRON_RUN_AS_NODE=1 for this subprocess only`);\n      }\n      \n      // Add CI=1 to environment to enable non-interactive mode\n      spawnEnv.CI = '1';\n      \n      // 构建pnpm参数数组\n      const pnpmArgs = [\n        pnpmBinPath, \n        'install',\n        '--config.confirmModulesPurge=false',\n        '--prefer-offline',\n        '--ignore-scripts',\n        '--reporter=append-only'\n      ];\n      \n      const fullCommand = `${nodeExecutable} ${pnpmArgs.join(' ')}`;\n      \n      logger.info(`[ToolSandbox] Executing command: ${fullCommand}`);\n      logger.info(`[ToolSandbox] Working directory: ${this.directoryManager.getToolboxPath()}`);\n      logger.info(`[ToolSandbox] Using Node.js executable: ${nodeExecutable}`);\n      \n      // 30秒超时\n      const timeout = setTimeout(() => {\n        const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);\n        logger.error(`[ToolSandbox] pnpm install timeout (${elapsed}s > 30s)`);\n        logger.error(`[ToolSandbox] Command: ${fullCommand}`);\n        logger.error(`[ToolSandbox] Working directory: ${this.directoryManager.getToolboxPath()}`);\n        logger.error(`[ToolSandbox] Installing packages: [${depsList}]`);\n        logger.error(`[ToolSandbox] Stdout output: ${stdout}`);\n        logger.error(`[ToolSandbox] Stderr output: ${stderr}`);\n        pnpm.kill('SIGTERM');\n        reject(new Error(`pnpm install timeout after 30s. Command: ${fullCommand}`));\n      }, 30000);\n      \n      const pnpm = spawn(nodeExecutable, pnpmArgs, {\n        cwd: this.directoryManager.getToolboxPath(),  // 使用 toolbox 路径安装依赖\n        env: spawnEnv,  // 使用定制的环境变量\n        stdio: 'pipe'\n      });\n      \n      let stdout = '';\n      let stderr = '';\n      \n      pnpm.stdout.on('data', (data) => {\n        const output = data.toString();\n        stdout += output;\n        logger.debug(`[ToolSandbox] pnpm stdout: ${output}`);\n      });\n      \n      pnpm.stderr.on('data', (data) => {\n        const error = data.toString();\n        stderr += error;\n        logger.warn(`[ToolSandbox] pnpm stderr: ${error}`);\n      });\n      \n      pnpm.on('close', (code) => {\n        clearTimeout(timeout);\n        const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);\n        \n        if (code === 0) {\n          logger.info(`[ToolSandbox] Dependencies installed successfully in ${elapsed}s`);\n          logger.debug(`[ToolSandbox] Installed packages: [${depsList}]`);\n          resolve({ stdout, stderr });\n        } else {\n          logger.error(`[ToolSandbox] pnpm install failed with exit code ${code} after ${elapsed}s`);\n          logger.error(`[ToolSandbox] Command: ${fullCommand}`);\n          logger.error(`[ToolSandbox] Working directory: ${this.directoryManager.getToolboxPath()}`);\n          logger.error(`[ToolSandbox] Installing packages: [${depsList}]`);\n          logger.error(`[ToolSandbox] Stdout: ${stdout}`);\n          logger.error(`[ToolSandbox] Stderr: ${stderr}`);\n          reject(new Error(`pnpm install failed with code ${code}: ${stderr}`));\n        }\n      });\n      \n      pnpm.on('error', (error) => {\n        logger.error(`[ToolSandbox] Failed to spawn pnpm: ${error.message}`);\n        reject(new Error(`Failed to spawn pnpm: ${error.message}`));\n      });\n    });\n  }\n\n  /**\n   * 检测和处理 ES Module 依赖\n   */\n  async detectAndHandleESModules() {\n    // 初始化 ES Module 支持器\n    if (!this.esModuleSupport) {\n      this.esModuleSupport = new ESModuleRequireSupport(this.directoryManager.getToolboxPath());\n    }\n\n    // 检测依赖类型\n    const dependencyTypes = await this.esModuleSupport.detectDependenciesTypes(this.dependencies);\n    \n    if (dependencyTypes.esmodule.length > 0) {\n      logger.warn(`[ToolSandbox] 检测到 ES Module 依赖：`, dependencyTypes.esmodule.map(d => d.name).join(', '));\n      logger.info(`[ToolSandbox] ES Module 包需要使用动态 import() 加载，工具可能需要相应调整`);\n      \n      // 存储 ES Module 信息供后续使用\n      this.esModuleDependencies = dependencyTypes.esmodule;\n    }\n\n    if (dependencyTypes.unknown.length > 0) {\n      logger.debug(`[ToolSandbox] 无法检测的依赖类型：`, dependencyTypes.unknown.map(d => d.name).join(', '));\n    }\n\n    return dependencyTypes;\n  }\n\n  /**\n   * 创建执行沙箱环境\n   */\n  async createExecutionSandbox() {\n    // 创建执行阶段的隔离管理器，使用工作目录\n    this.isolationManager = new SandboxIsolationManager(this.directoryManager.getWorkingPath(), {\n      enableDependencyLoading: true,\n      analysisMode: false,\n      toolboxPath: this.directoryManager.getToolboxPath()  // 传递 toolbox 路径用于依赖加载\n    });\n    \n    this.sandboxContext = this.isolationManager.createIsolatedContext();\n    \n    // 添加 ES Module 动态加载支持\n    // 始终提供 importModule 函数，以支持工具动态加载 ES Module\n    if (!this.esModuleSupport) {\n      this.esModuleSupport = new ESModuleRequireSupport(this.directoryManager.getToolboxPath());\n    }\n    \n    // 统一的模块加载函数 - 自动检测并加载\n    this.sandboxContext.loadModule = async (moduleName) => {\n      const moduleType = await this.esModuleSupport.detectModuleType(moduleName);\n      if (moduleType === 'esm') {\n        // ES Module - 尝试动态 import\n        try {\n          return await this.esModuleSupport.loadESModule(moduleName);\n        } catch (error) {\n          // 如果动态 import 失败，尝试通过 require 加载并提取 default\n          const module = this.sandboxContext.require(moduleName);\n          // Node.js 的 createRequire 会将 ES Module 包装，真正的导出在 default 中\n          return module.default || module;\n        }\n      } else {\n        return this.sandboxContext.require(moduleName);\n      }\n    };\n    \n    // 保留 importModule 作为别名（向后兼容）\n    this.sandboxContext.importModule = this.sandboxContext.loadModule;\n    \n    // 增强 require - 主动检测 ES Module 并阻止加载\n    const originalRequire = this.sandboxContext.require;\n    const esModuleSupport = this.esModuleSupport;  // 捕获引用用于闭包\n    \n    this.sandboxContext.require = function(moduleName) {\n      // 主动检测是否是 ES Module（使用同步方法避免 async）\n      try {\n        const packageJsonPath = require.resolve(`${moduleName}/package.json`, {\n          paths: [esModuleSupport.toolboxPath]\n        });\n        const packageJson = require(packageJsonPath);\n        \n        if (packageJson.type === 'module') {\n          // 是 ES Module，主动抛出错误\n          const error = new Error(\n            `❌ \"${moduleName}\" 是 ES Module 包，请使用 await loadModule('${moduleName}') 代替 require('${moduleName}')\\n` +\n            `💡 提示：loadModule 会自动检测包类型并正确加载`\n          );\n          error.code = 'ERR_REQUIRE_ESM';\n          throw error;\n        }\n      } catch (checkError) {\n        // 如果检测失败（比如包不存在），让原始 require 处理\n        if (checkError.code === 'ERR_REQUIRE_ESM') {\n          throw checkError;  // 重新抛出我们的错误\n        }\n      }\n      \n      // 不是 ES Module 或检测失败，使用原始 require\n      const result = originalRequire(moduleName);\n      \n      // 额外检查：如果返回对象有 __esModule 和 default，说明是被包装的 ES Module\n      if (result && result.__esModule && result.default && !result.default.__esModule) {\n        // 这是 createRequire 包装的 ES Module，应该报错\n        const error = new Error(\n          `❌ \"${moduleName}\" 是 ES Module 包，请使用 await loadModule('${moduleName}') 代替 require('${moduleName}')\\n` +\n          `💡 提示：loadModule 会自动检测包类型并正确加载`\n        );\n        error.code = 'ERR_REQUIRE_ESM';\n        throw error;\n      }\n      \n      return result;\n    };\n    \n    if (this.esModuleDependencies && this.esModuleDependencies.length > 0) {\n      logger.debug(`[ToolSandbox] 已为工具 ${this.toolId} 启用 ES Module 支持，检测到 ${this.esModuleDependencies.length} 个 ES Module 依赖`);\n    } else {\n      logger.debug(`[ToolSandbox] 已为工具 ${this.toolId} 启用 importModule 函数`);\n    }\n    \n    // 在完全隔离的沙箱中重新加载工具\n    const script = new vm.Script(this.toolContent, { filename: `${this.toolId}.js` });\n    const context = vm.createContext(this.sandboxContext);\n    \n    script.runInContext(context);\n    const exported = context.module.exports;\n    \n    if (typeof exported === 'function') {\n      this.toolInstance = new exported();\n    } else if (typeof exported === 'object') {\n      this.toolInstance = exported;\n    }\n  }\n\n\n  /**\n   * 解析协议路径（支持@project://等协议）\n   * @param {string} protocolPath - 协议路径，如@project://.promptx/cwd\n   * @returns {Promise<string>} 解析后的绝对路径\n   */\n  async resolveProtocolPath(protocolPath) {\n    // 处理undefined或null的情况\n    if (!protocolPath) {\n      throw new Error('protocolPath is required but was undefined');\n    }\n    \n    // 🚀 新架构：@project协议直接使用ProjectPathResolver\n    if (protocolPath.startsWith('@project://')) {\n      const { getGlobalProjectPathResolver } = require('../utils/ProjectPathResolver');\n      const pathResolver = getGlobalProjectPathResolver();\n      \n      try {\n        // 提取协议路径的相对部分\n        const relativePath = protocolPath.replace(/^@project:\\/\\//, '');\n        const resolvedPath = pathResolver.resolvePath(relativePath);\n        \n        // 确保目录存在\n        const fs = require('fs').promises;\n        try {\n          await fs.access(resolvedPath);\n        } catch (error) {\n          if (error.code === 'ENOENT') {\n            await fs.mkdir(resolvedPath, { recursive: true });\n            logger.debug(`[ToolSandbox] Created unified working directory: ${resolvedPath}`);\n          }\n        }\n        \n        return resolvedPath;\n      } catch (error) {\n        throw new Error(`解析@project://路径失败: ${error.message}`);\n      }\n    }\n    \n    // 其他协议路径使用ResourceManager解析\n    if (protocolPath.startsWith('@')) {\n      if (!this.resourceManager) {\n        throw new Error('ResourceManager not set. Cannot resolve protocol path.');\n      }\n      \n      // 其他协议处理逻辑保持不变\n      throw new Error(`暂不支持的协议路径: ${protocolPath}`);\n    }\n    \n    // 普通路径直接返回\n    return protocolPath;\n  }\n\n\n\n\n  /**\n   * 参数验证\n   */\n  async validateParameters(parameters) {\n    if (typeof this.toolInstance.validate === 'function') {\n      const result = this.toolInstance.validate(parameters);\n      \n      if (typeof result === 'boolean' && !result) {\n        throw new Error('Parameter validation failed');\n      } else if (result && typeof result === 'object' && !result.valid) {\n        throw new Error(`Parameter validation failed: ${result.errors?.join(', ')}`);\n      }\n    }\n  }\n\n  /**\n   * 在沙箱中执行工具\n   */\n  async executeInSandbox(parameters) {\n    if (!this.toolInstance || typeof this.toolInstance.execute !== 'function') {\n      throw new Error(`Tool ${this.toolId} does not have execute method`);\n    }\n    \n    return await this.toolInstance.execute(parameters);\n  }\n\n  /**\n   * 获取分析结果\n   */\n  getAnalysisResult() {\n    return {\n      toolId: this.toolId,\n      dependencies: this.dependencies,\n      sandboxPath: this.directoryManager?.getWorkingPath(),\n      toolboxPath: this.directoryManager?.getToolboxPath(),\n      hasMetadata: typeof this.toolInstance?.getMetadata === 'function',\n      hasSchema: typeof this.toolInstance?.getSchema === 'function'\n    };\n  }\n\n  /**\n   * 清理沙箱资源\n   */\n  async cleanup() {\n    // 清理隔离管理器\n    if (this.isolationManager) {\n      this.isolationManager.cleanup();\n      this.isolationManager = null;\n    }\n    \n    // 清理 ES Module 支持器\n    if (this.esModuleSupport) {\n      this.esModuleSupport.clearCache();\n      this.esModuleSupport = null;\n    }\n    \n    // 清理其他资源\n    this.sandboxContext = null;\n    this.toolInstance = null;\n    this.esModuleDependencies = null;\n  }\n\n  /**\n   * 获取工具元信息\n   */\n  getToolMetadata() {\n    if (this.toolInstance && typeof this.toolInstance.getMetadata === 'function') {\n      return this.toolInstance.getMetadata();\n    }\n    return null;\n  }\n\n  /**\n   * 获取工具Schema\n   */\n  getToolSchema() {\n    if (this.toolInstance && typeof this.toolInstance.getSchema === 'function') {\n      return this.toolInstance.getSchema();\n    }\n    return null;\n  }\n}\n\nmodule.exports = ToolSandbox;","/**\n * ToolInterface - PromptX工具接口规范\n * 定义鸭子类型的工具接口，外部工具无需继承任何类\n */\n\n/**\n * Tool接口规范定义\n */\nconst TOOL_INTERFACE = {\n  // 必须实现的方法\n  required: [\n    {\n      name: 'getMetadata',\n      signature: '() => Object',\n      description: '获取工具元信息',\n      returns: {\n        name: 'string - 工具名称',\n        description: 'string - 工具描述', \n        version: 'string - 版本号',\n        category: 'string - 分类（可选）',\n        author: 'string - 作者（可选）'\n      }\n    },\n    {\n      name: 'getSchema',\n      signature: '() => Object',\n      description: '获取参数JSON Schema',\n      returns: {\n        type: 'string - 参数类型，通常为object',\n        properties: 'Object - 参数属性定义',\n        required: 'Array - 必需参数列表（可选）',\n        additionalProperties: 'boolean - 是否允许额外参数（可选）'\n      }\n    },\n    {\n      name: 'execute',\n      signature: '(parameters: Object) => Promise<any>',\n      description: '执行工具主逻辑',\n      parameters: {\n        parameters: 'Object - 工具参数，符合getSchema定义'\n      },\n      returns: 'Promise<any> - 工具执行结果'\n    }\n  ],\n\n  // 可选实现的方法\n  optional: [\n    {\n      name: 'getPackage',\n      signature: '() => Object',\n      description: '获取工具包信息（可选，用于依赖管理）',\n      returns: {\n        directory: 'string - 工具目录路径',\n        dependencies: 'Object - 依赖对象，格式：{包名: 版本}',\n        packageJson: 'Object - package.json内容（可选）'\n      }\n    },\n    {\n      name: 'validate',\n      signature: '(parameters: Object) => Object',\n      description: '验证参数（可选，有默认实现）',\n      parameters: {\n        parameters: 'Object - 待验证参数'\n      },\n      returns: {\n        valid: 'boolean - 验证是否通过',\n        errors: 'Array<string> - 错误信息列表'\n      }\n    },\n    {\n      name: 'cleanup',\n      signature: '() => void | Promise<void>',\n      description: '清理资源（可选）',\n      returns: 'void | Promise<void>'\n    },\n    {\n      name: 'init',\n      signature: '(config?: Object) => void | Promise<void>',\n      description: '初始化工具（可选）',\n      parameters: {\n        config: 'Object - 初始化配置（可选）'\n      },\n      returns: 'void | Promise<void>'\n    }\n  ]\n};\n\n/**\n * 工具错误类型定义\n */\nconst TOOL_ERROR_CODES = {\n  VALIDATION_ERROR: 'VALIDATION_ERROR',     // 参数验证失败\n  EXECUTION_ERROR: 'EXECUTION_ERROR',       // 执行错误\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',           // 超时错误\n  PERMISSION_ERROR: 'PERMISSION_ERROR',     // 权限错误\n  RESOURCE_ERROR: 'RESOURCE_ERROR',         // 资源错误\n  CONFIGURATION_ERROR: 'CONFIGURATION_ERROR' // 配置错误\n};\n\n/**\n * 标准结果格式定义\n */\nconst TOOL_RESULT_FORMAT = {\n  success: {\n    success: true,\n    data: 'any - 工具返回的实际数据',\n    metadata: {\n      tool: 'string - 工具名称',\n      executionTime: 'string - 执行时间',\n      timestamp: 'string - 时间戳',\n      // ...其他元信息\n    }\n  },\n  \n  error: {\n    success: false,\n    error: {\n      code: 'string - 错误代码（见TOOL_ERROR_CODES）',\n      message: 'string - 错误消息',\n      details: 'Object - 错误详情（可选）'\n    },\n    metadata: {\n      tool: 'string - 工具名称',\n      timestamp: 'string - 时间戳',\n      // ...其他元信息\n    }\n  }\n};\n\n/**\n * 示例工具实现\n */\nconst EXAMPLE_TOOL = `\nclass ExampleTool {\n  getMetadata() {\n    return {\n      name: 'example-tool',\n      description: '示例工具',\n      version: '1.0.0',\n      category: 'example',\n      author: 'PromptX Team'\n    };\n  }\n\n  getSchema() {\n    return {\n      type: 'object',\n      properties: {\n        input: {\n          type: 'string',\n          description: '输入参数'\n        }\n      },\n      required: ['input'],\n      additionalProperties: false\n    };\n  }\n\n  async execute(parameters) {\n    const { input } = parameters;\n    \n    // 工具逻辑\n    const result = \\`处理结果: \\${input}\\`;\n    \n    return result;\n  }\n\n  // 可选：声明依赖（新格式：对象）\n  getDependencies() {\n    return {\n      'lodash': '^4.17.21',\n      'axios': '^1.6.0'\n    };\n  }\n\n  // 可选：自定义参数验证\n  validate(parameters) {\n    const errors = [];\n    \n    if (!parameters.input || parameters.input.trim() === '') {\n      errors.push('input不能为空');\n    }\n    \n    return { valid: errors.length === 0, errors };\n  }\n\n  // 可选：清理资源\n  cleanup() {\n    console.log('清理资源');\n  }\n}\n\nmodule.exports = ExampleTool;\n`;\n\nmodule.exports = {\n  TOOL_INTERFACE,\n  TOOL_ERROR_CODES,\n  TOOL_RESULT_FORMAT,\n  EXAMPLE_TOOL\n};","const { TOOL_INTERFACE, TOOL_ERROR_CODES } = require('./ToolInterface');\n\n/**\n * ToolValidator - 工具接口验证器\n * 使用鸭子类型验证工具是否符合PromptX接口规范\n */\nclass ToolValidator {\n  /**\n   * 验证工具是否符合接口规范\n   * @param {any} tool - 待验证的工具对象\n   * @returns {Object} 验证结果 {valid: boolean, errors: [], warnings: []}\n   */\n  static validateTool(tool) {\n    const errors = [];\n    const warnings = [];\n\n    // 基础类型检查\n    if (!tool || typeof tool !== 'object') {\n      errors.push('工具必须是对象类型');\n      return { valid: false, errors, warnings };\n    }\n\n    // 验证必需方法\n    for (const methodSpec of TOOL_INTERFACE.required) {\n      const methodName = methodSpec.name;\n      \n      if (!(methodName in tool)) {\n        errors.push(`缺少必需方法: ${methodName}`);\n        continue;\n      }\n      \n      if (typeof tool[methodName] !== 'function') {\n        errors.push(`${methodName} 必须是函数类型`);\n        continue;\n      }\n\n      // 方法签名验证\n      try {\n        const validationResult = this.validateMethod(tool, methodSpec);\n        if (!validationResult.valid) {\n          errors.push(...validationResult.errors);\n          warnings.push(...validationResult.warnings);\n        }\n      } catch (error) {\n        warnings.push(`${methodName} 方法验证时出错: ${error.message}`);\n      }\n    }\n\n    // 验证可选方法\n    for (const methodSpec of TOOL_INTERFACE.optional) {\n      const methodName = methodSpec.name;\n      \n      if (methodName in tool) {\n        if (typeof tool[methodName] !== 'function') {\n          warnings.push(`${methodName} 应该是函数类型`);\n        } else {\n          try {\n            const validationResult = this.validateMethod(tool, methodSpec);\n            if (!validationResult.valid) {\n              warnings.push(...validationResult.errors);\n            }\n          } catch (error) {\n            warnings.push(`${methodName} 方法验证时出错: ${error.message}`);\n          }\n        }\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * 验证特定方法\n   * @param {Object} tool - 工具对象\n   * @param {Object} methodSpec - 方法规范\n   * @returns {Object} 验证结果\n   */\n  static validateMethod(tool, methodSpec) {\n    const errors = [];\n    const warnings = [];\n    const methodName = methodSpec.name;\n\n    try {\n      switch (methodName) {\n        case 'getMetadata':\n          return this.validateGetMetadata(tool);\n        case 'getSchema':\n          return this.validateGetSchema(tool);\n        case 'execute':\n          return this.validateExecute(tool);\n        case 'validate':\n          return this.validateValidateMethod(tool);\n        default:\n          return { valid: true, errors: [], warnings: [] };\n      }\n    } catch (error) {\n      errors.push(`${methodName} 方法调用失败: ${error.message}`);\n      return { valid: false, errors, warnings };\n    }\n  }\n\n  /**\n   * 验证getMetadata方法\n   * @param {Object} tool - 工具对象\n   * @returns {Object} 验证结果\n   */\n  static validateGetMetadata(tool) {\n    const errors = [];\n    const warnings = [];\n\n    try {\n      const metadata = tool.getMetadata();\n      \n      if (!metadata || typeof metadata !== 'object') {\n        errors.push('getMetadata() 必须返回对象');\n        return { valid: false, errors, warnings };\n      }\n\n      // 验证必需字段\n      if (!metadata.name || typeof metadata.name !== 'string') {\n        errors.push('metadata.name 必须是非空字符串');\n      }\n\n      if (!metadata.description || typeof metadata.description !== 'string') {\n        errors.push('metadata.description 必须是非空字符串');\n      }\n\n      if (!metadata.version || typeof metadata.version !== 'string') {\n        errors.push('metadata.version 必须是非空字符串');\n      }\n\n      // 验证可选字段\n      if (metadata.category && typeof metadata.category !== 'string') {\n        warnings.push('metadata.category 应该是字符串类型');\n      }\n\n      if (metadata.author && typeof metadata.author !== 'string') {\n        warnings.push('metadata.author 应该是字符串类型');\n      }\n\n    } catch (error) {\n      errors.push(`getMetadata() 执行失败: ${error.message}`);\n    }\n\n    return { valid: errors.length === 0, errors, warnings };\n  }\n\n  /**\n   * 验证getSchema方法\n   * @param {Object} tool - 工具对象\n   * @returns {Object} 验证结果\n   */\n  static validateGetSchema(tool) {\n    const errors = [];\n    const warnings = [];\n\n    try {\n      const schema = tool.getSchema();\n      \n      if (!schema || typeof schema !== 'object') {\n        errors.push('getSchema() 必须返回对象');\n        return { valid: false, errors, warnings };\n      }\n\n      // 基础JSON Schema验证\n      if (!schema.type) {\n        warnings.push('schema.type 建议定义');\n      }\n\n      if (schema.type && typeof schema.type !== 'string') {\n        errors.push('schema.type 必须是字符串');\n      }\n\n      if (schema.properties && typeof schema.properties !== 'object') {\n        errors.push('schema.properties 必须是对象');\n      }\n\n      if (schema.required && !Array.isArray(schema.required)) {\n        errors.push('schema.required 必须是数组');\n      }\n\n    } catch (error) {\n      errors.push(`getSchema() 执行失败: ${error.message}`);\n    }\n\n    return { valid: errors.length === 0, errors, warnings };\n  }\n\n  /**\n   * 验证execute方法\n   * @param {Object} tool - 工具对象\n   * @returns {Object} 验证结果\n   */\n  static validateExecute(tool) {\n    const errors = [];\n    const warnings = [];\n\n    // 检查方法签名\n    const executeMethod = tool.execute;\n    if (executeMethod.length === 0) {\n      warnings.push('execute() 方法建议接受parameters参数');\n    }\n\n    // 注意：这里不实际调用execute方法，因为可能有副作用\n    // 只进行静态检查\n\n    return { valid: errors.length === 0, errors, warnings };\n  }\n\n  /**\n   * 验证validate方法（可选）\n   * @param {Object} tool - 工具对象\n   * @returns {Object} 验证结果\n   */\n  static validateValidateMethod(tool) {\n    const errors = [];\n    const warnings = [];\n\n    try {\n      // 测试validate方法的返回格式\n      const testParams = {};\n      const result = tool.validate(testParams);\n      \n      if (!result || typeof result !== 'object') {\n        errors.push('validate() 必须返回对象');\n        return { valid: false, errors, warnings };\n      }\n\n      if (typeof result.valid !== 'boolean') {\n        errors.push('validate() 返回值必须包含valid(boolean)字段');\n      }\n\n      if (result.errors && !Array.isArray(result.errors)) {\n        errors.push('validate() 返回值的errors字段必须是数组');\n      }\n\n    } catch (error) {\n      warnings.push(`validate() 方法测试失败: ${error.message}`);\n    }\n\n    return { valid: errors.length === 0, errors, warnings };\n  }\n\n  /**\n   * 为工具提供默认的validate方法实现\n   * @param {Object} tool - 工具对象\n   * @param {Object} parameters - 待验证参数\n   * @returns {Object} 验证结果\n   */\n  static defaultValidate(tool, parameters) {\n    const errors = [];\n\n    try {\n      // 获取schema\n      const schema = tool.getSchema();\n      \n      // 基础类型检查\n      if (!parameters || typeof parameters !== 'object') {\n        errors.push('参数必须是对象类型');\n        return { valid: false, errors };\n      }\n\n      // 必需参数检查\n      if (schema.required && Array.isArray(schema.required)) {\n        for (const field of schema.required) {\n          if (!(field in parameters)) {\n            errors.push(`缺少必需参数: ${field}`);\n          }\n        }\n      }\n\n      // 基础字段类型检查\n      if (schema.properties && typeof schema.properties === 'object') {\n        for (const [field, fieldSchema] of Object.entries(schema.properties)) {\n          if (field in parameters) {\n            const value = parameters[field];\n            const expectedType = fieldSchema.type;\n            \n            if (expectedType && !this.validateType(value, expectedType)) {\n              errors.push(`参数 ${field} 类型错误，期望 ${expectedType}，实际 ${typeof value}`);\n            }\n          }\n        }\n      }\n\n    } catch (error) {\n      errors.push(`参数验证失败: ${error.message}`);\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  /**\n   * 类型验证辅助方法\n   * @param {*} value - 待验证值\n   * @param {string} expectedType - 期望类型\n   * @returns {boolean} 是否匹配\n   */\n  static validateType(value, expectedType) {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string';\n      case 'number':\n        return typeof value === 'number';\n      case 'boolean':\n        return typeof value === 'boolean';\n      case 'object':\n        return typeof value === 'object' && value !== null;\n      case 'array':\n        return Array.isArray(value);\n      default:\n        return true; // 未知类型，跳过验证\n    }\n  }\n\n  /**\n   * 生成工具接口报告\n   * @param {Object} tool - 工具对象\n   * @returns {Object} 接口报告\n   */\n  static generateInterfaceReport(tool) {\n    const validation = this.validateTool(tool);\n    const report = {\n      toolName: 'unknown',\n      valid: validation.valid,\n      errors: validation.errors,\n      warnings: validation.warnings,\n      implementedMethods: {\n        required: [],\n        optional: []\n      },\n      metadata: null,\n      schema: null\n    };\n\n    try {\n      // 获取工具名称\n      if (tool.getMetadata) {\n        const metadata = tool.getMetadata();\n        report.toolName = metadata.name || 'unknown';\n        report.metadata = metadata;\n      }\n\n      // 获取schema\n      if (tool.getSchema) {\n        report.schema = tool.getSchema();\n      }\n\n      // 检查已实现的方法\n      for (const methodSpec of TOOL_INTERFACE.required) {\n        if (typeof tool[methodSpec.name] === 'function') {\n          report.implementedMethods.required.push(methodSpec.name);\n        }\n      }\n\n      for (const methodSpec of TOOL_INTERFACE.optional) {\n        if (typeof tool[methodSpec.name] === 'function') {\n          report.implementedMethods.optional.push(methodSpec.name);\n        }\n      }\n\n    } catch (error) {\n      report.warnings.push(`生成报告时出错: ${error.message}`);\n    }\n\n    return report;\n  }\n}\n\nmodule.exports = ToolValidator;","const ToolValidator = require('./ToolValidator');\nconst { TOOL_ERROR_CODES, TOOL_RESULT_FORMAT } = require('./ToolInterface');\n\n/**\n * ToolUtils - 工具实用函数集合\n * 提供工具开发和使用的辅助函数\n */\nclass ToolUtils {\n  /**\n   * 创建标准化的成功结果\n   * @param {*} data - 结果数据\n   * @param {Object} options - 选项\n   * @returns {Object} 标准化结果\n   */\n  static createSuccessResult(data, options = {}) {\n    const {\n      tool = 'unknown',\n      executionTime = null,\n      metadata = {}\n    } = options;\n\n    return {\n      success: true,\n      data: data,\n      metadata: {\n        tool: tool,\n        executionTime: executionTime,\n        timestamp: new Date().toISOString(),\n        ...metadata\n      }\n    };\n  }\n\n  /**\n   * 创建标准化的错误结果\n   * @param {string} code - 错误代码\n   * @param {string} message - 错误消息\n   * @param {Object} options - 选项\n   * @returns {Object} 标准化错误\n   */\n  static createErrorResult(code, message, options = {}) {\n    const {\n      tool = 'unknown',\n      details = {},\n      metadata = {}\n    } = options;\n\n    return {\n      success: false,\n      error: {\n        code: code,\n        message: message,\n        details: details\n      },\n      metadata: {\n        tool: tool,\n        timestamp: new Date().toISOString(),\n        ...metadata\n      }\n    };\n  }\n\n  /**\n   * 验证工具结果格式\n   * @param {Object} result - 工具结果\n   * @returns {Object} 验证结果\n   */\n  static validateResult(result) {\n    const errors = [];\n\n    if (!result || typeof result !== 'object') {\n      errors.push('结果必须是对象类型');\n      return { valid: false, errors };\n    }\n\n    if (typeof result.success !== 'boolean') {\n      errors.push('结果必须包含success(boolean)字段');\n    }\n\n    if (result.success) {\n      // 成功结果验证\n      if (!('data' in result)) {\n        errors.push('成功结果必须包含data字段');\n      }\n    } else {\n      // 错误结果验证\n      if (!result.error || typeof result.error !== 'object') {\n        errors.push('错误结果必须包含error(object)字段');\n      } else {\n        if (!result.error.code || typeof result.error.code !== 'string') {\n          errors.push('错误结果必须包含error.code(string)字段');\n        }\n        if (!result.error.message || typeof result.error.message !== 'string') {\n          errors.push('错误结果必须包含error.message(string)字段');\n        }\n      }\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  /**\n   * 安全地执行工具方法\n   * @param {Object} tool - 工具实例\n   * @param {string} methodName - 方法名\n   * @param {...any} args - 方法参数\n   * @returns {Promise<*>} 执行结果\n   */\n  static async safeExecute(tool, methodName, ...args) {\n    try {\n      if (!tool || typeof tool[methodName] !== 'function') {\n        throw new Error(`工具不存在方法: ${methodName}`);\n      }\n\n      const result = await tool[methodName](...args);\n      return result;\n    } catch (error) {\n      throw new Error(`方法执行失败 ${methodName}: ${error.message}`);\n    }\n  }\n\n  /**\n   * 工具性能分析\n   * @param {Object} tool - 工具实例\n   * @param {Object} parameters - 测试参数\n   * @param {Object} options - 选项\n   * @returns {Promise<Object>} 性能分析结果\n   */\n  static async benchmarkTool(tool, parameters = {}, options = {}) {\n    const {\n      iterations = 10,\n      warmup = 3\n    } = options;\n\n    const results = {\n      toolName: 'unknown',\n      iterations: iterations,\n      warmup: warmup,\n      times: [],\n      stats: {}\n    };\n\n    try {\n      // 获取工具名称\n      if (tool.getMetadata) {\n        const metadata = tool.getMetadata();\n        results.toolName = metadata.name || 'unknown';\n      }\n\n      // 验证工具接口\n      const validation = ToolValidator.validateTool(tool);\n      if (!validation.valid) {\n        throw new Error(`工具接口验证失败: ${validation.errors.join(', ')}`);\n      }\n\n      // 预热运行\n      for (let i = 0; i < warmup; i++) {\n        await tool.execute(parameters);\n      }\n\n      // 性能测试\n      for (let i = 0; i < iterations; i++) {\n        const startTime = process.hrtime.bigint();\n        await tool.execute(parameters);\n        const endTime = process.hrtime.bigint();\n        \n        const executionTime = Number(endTime - startTime) / 1000000; // 转换为毫秒\n        results.times.push(executionTime);\n      }\n\n      // 计算统计信息\n      results.stats = this.calculateStats(results.times);\n\n    } catch (error) {\n      results.error = error.message;\n    }\n\n    return results;\n  }\n\n  /**\n   * 计算统计信息\n   * @param {Array<number>} times - 时间数组\n   * @returns {Object} 统计信息\n   */\n  static calculateStats(times) {\n    if (times.length === 0) {\n      return {};\n    }\n\n    const sorted = [...times].sort((a, b) => a - b);\n    const sum = times.reduce((a, b) => a + b, 0);\n    \n    return {\n      count: times.length,\n      min: Math.min(...times),\n      max: Math.max(...times),\n      mean: sum / times.length,\n      median: sorted[Math.floor(sorted.length / 2)],\n      p95: sorted[Math.floor(sorted.length * 0.95)],\n      p99: sorted[Math.floor(sorted.length * 0.99)]\n    };\n  }\n\n  /**\n   * 生成工具模板代码\n   * @param {Object} options - 工具选项\n   * @returns {string} 工具模板代码\n   */\n  static generateToolTemplate(options = {}) {\n    const {\n      toolName = 'ExampleTool',\n      className = 'ExampleTool',\n      description = '示例工具',\n      category = 'utility',\n      author = 'PromptX Developer'\n    } = options;\n\n    return `/**\n * ${className} - ${description}\n * 使用PromptX鸭子类型接口，无需继承任何基类\n */\nclass ${className} {\n  getMetadata() {\n    return {\n      name: '${toolName}',\n      description: '${description}',\n      version: '1.0.0',\n      category: '${category}',\n      author: '${author}'\n    };\n  }\n\n  getSchema() {\n    return {\n      type: 'object',\n      properties: {\n        input: {\n          type: 'string',\n          description: '输入参数'\n        }\n      },\n      required: ['input'],\n      additionalProperties: false\n    };\n  }\n\n  async execute(parameters) {\n    const { input } = parameters;\n    \n    try {\n      // TODO: 实现工具逻辑\n      const result = \\`处理结果: \\${input}\\`;\n      \n      return result;\n    } catch (error) {\n      throw new Error(\\`执行失败: \\${error.message}\\`);\n    }\n  }\n\n  // 可选：自定义参数验证\n  validate(parameters) {\n    const errors = [];\n    \n    if (!parameters.input || parameters.input.trim() === '') {\n      errors.push('input不能为空');\n    }\n    \n    return { valid: errors.length === 0, errors };\n  }\n\n  // 可选：清理资源\n  cleanup() {\n    // 清理逻辑\n  }\n}\n\nmodule.exports = ${className};\n`;\n  }\n\n  /**\n   * 创建工具开发指南\n   * @returns {string} 开发指南\n   */\n  static getDevGuide() {\n    return `\n# PromptX Tool 开发指南\n\n## 鸭子类型接口\nPromptX工具使用鸭子类型设计，无需继承任何基类。只需实现以下接口：\n\n### 必需方法\n1. \\`getMetadata()\\` - 返回工具元信息\n2. \\`getSchema()\\` - 返回参数JSON Schema\n3. \\`execute(parameters)\\` - 执行工具逻辑\n\n### 可选方法\n1. \\`validate(parameters)\\` - 自定义参数验证\n2. \\`cleanup()\\` - 清理资源\n3. \\`init(config)\\` - 初始化工具\n\n## 开发步骤\n1. 使用 ToolUtils.generateToolTemplate() 生成模板\n2. 实现必需的接口方法\n3. 使用 ToolValidator.validateTool() 验证接口\n4. 使用 ToolUtils.benchmarkTool() 性能测试\n5. 注册到工具注册表\n\n## 示例代码\n\\`\\`\\`javascript\n${this.generateToolTemplate()}\n\\`\\`\\`\n\n## 最佳实践\n- 保持execute方法的幂等性\n- 提供清晰的错误消息\n- 使用合适的JSON Schema验证\n- 实现适当的资源清理\n- 遵循统一的结果格式\n`;\n  }\n}\n\nmodule.exports = ToolUtils;","/**\n * PromptX Tool Framework\n * 统一的工具框架入口文件 - ToolSandbox版本\n */\n\nconst ToolSandbox = require('./ToolSandbox');\nconst ToolValidator = require('./ToolValidator');\nconst ToolUtils = require('./ToolUtils');\nconst { TOOL_INTERFACE, TOOL_ERROR_CODES, TOOL_RESULT_FORMAT, EXAMPLE_TOOL } = require('./ToolInterface');\n\n// 创建全局工具实例\nlet globalSandbox = null;\n\n/**\n * 获取全局工具沙箱\n * @param {string} toolResource - 工具资源引用\n * @returns {ToolSandbox} 工具沙箱实例\n */\nfunction getGlobalToolSandbox(toolResource) {\n  // ToolSandbox是工具特定的，不使用单例\n  return new ToolSandbox(toolResource);\n}\n\n/**\n * 初始化工具框架 - ToolSandbox版本\n * @param {Object} options - 配置选项\n * @returns {Object} 初始化结果\n */\nfunction initialize(options = {}) {\n  try {\n    return {\n      success: true,\n      message: 'ToolSandbox工具框架初始化成功',\n      framework: {\n        executor: 'ToolSandbox',\n        version: '2.0.0',\n        features: [\n          '自动依赖管理',\n          '沙箱隔离执行', \n          '三阶段执行流程',\n          'pnpm集成'\n        ]\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `工具框架初始化失败: ${error.message}`,\n      error: error\n    };\n  }\n}\n\n/**\n * 执行工具的便捷方法 - ToolSandbox版本\n * @param {string} toolResource - 工具资源引用 (@tool://tool-name)\n * @param {Object} parameters - 工具参数\n * @param {Object} resourceManager - ResourceManager实例\n * @returns {Promise<Object>} 执行结果\n */\nasync function executeTool(toolResource, parameters = {}, resourceManager = null) {\n  if (!resourceManager) {\n    throw new Error('ResourceManager is required for ToolSandbox execution');\n  }\n  \n  const sandbox = getGlobalToolSandbox(toolResource);\n  sandbox.setResourceManager(resourceManager);\n  \n  try {\n    await sandbox.analyze();\n    await sandbox.prepareDependencies();\n    return await sandbox.execute(parameters);\n  } finally {\n    await sandbox.cleanup();\n  }\n}\n\n/**\n * 重置工具框架 - ToolSandbox版本\n */\nfunction reset() {\n  // ToolSandbox不使用全局单例，无需重置\n  globalSandbox = null;\n}\n\n/**\n * 获取工具框架统计信息 - ToolSandbox版本\n * @returns {Object} 统计信息\n */\nfunction getStats() {\n  return {\n    framework: {\n      name: 'PromptX ToolSandbox Framework',\n      version: '2.0.0',\n      executor: 'ToolSandbox',\n      features: [\n        '自动依赖管理',\n        '沙箱隔离执行',\n        '三阶段执行流程',\n        'pnpm集成',\n        '@tool://协议支持'\n      ]\n    }\n  };\n}\n\nmodule.exports = {\n  // 核心类\n  ToolSandbox,\n  ToolValidator,\n  ToolUtils,\n  \n  // 接口规范\n  TOOL_INTERFACE,\n  TOOL_ERROR_CODES,\n  TOOL_RESULT_FORMAT,\n  EXAMPLE_TOOL,\n  \n  // 全局实例获取器\n  getGlobalToolSandbox,\n  \n  // 便捷方法\n  initialize,\n  executeTool,\n  reset,\n  getStats\n};"],"mappings":"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","names":["exports","module","exports","module","exports","module","exports","module","exports","module","exports","module","exports","module","fullPath","exports","module","ToolSandbox","fs","exports","module","TOOL_INTERFACE","TOOL_ERROR_CODES","TOOL_RESULT_FORMAT","EXAMPLE_TOOL","exports","module","TOOL_INTERFACE","TOOL_ERROR_CODES","ToolValidator","exports","module","ToolValidator","TOOL_ERROR_CODES","TOOL_RESULT_FORMAT","ToolUtils"]}