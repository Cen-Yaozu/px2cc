/**
 * Claude Command Toolkit - 一体化API
 *
 * 输入Claude Code命令参数 → 直接返回安装结果
 */
import { writeFile } from './utils/file-utils.js';
import { join } from 'path';
/**
 * Claude Code资源构建器 - 一体化API
 *
 * 📋 方法分组说明:
 * 🚀 主要API(2个) - 对外提供的核心接口
 * 🔍 参数验证(2个) - 确保用户输入合法性
 * 🔧 内容生成(2个) - 将配置转换为标准格式
 * 🧹 工具方法(1个) - 提供通用的名称清理功能
 *
 * 每个主要API都遵循相同的6步流程：验证→生成→路径→写入→成功→错误处理
 */
export class ClaudeCodeBuilder {
    /**
     * 🚀 主要API #1: 创建并安装Claude Code命令（一步完成）
     *
     * 这是对外的核心接口，将用户的命令配置转换为Claude Code可用的命令文件
     *
     * @param options 命令参数 - 用户提供的所有配置选项
     * @returns 安装结果 - 包含成功状态、文件路径、错误信息等
     */
    static async createCommand(options) {
        try {
            // 1. 🔍 验证参数 - 调用validateOptions()确保输入合法
            const validation = this.validateOptions(options);
            if (!validation.valid) {
                return {
                    success: false,
                    commandName: options.name,
                    message: '参数验证失败',
                    error: validation.errors.join(', ')
                };
            }
            // 2. 📝 生成命令内容 - 调用generateContent()创建标准frontmatter格式
            const commandContent = this.generateContent(options);
            // 3. 📁 确定文件路径 - 调用sanitizeName()生成安全文件名
            const baseDir = options.targetDir || './.claude';
            const commandsDir = join(baseDir, 'commands');
            const commandName = this.sanitizeName(options.name);
            const filePath = join(commandsDir, `${commandName}.md`);
            // 4. 💾 安装到文件系统 - 调用writeFile()自动创建目录并写入文件
            await writeFile(filePath, commandContent);
            // 5. ✅ 返回成功结果
            return {
                success: true,
                commandName,
                filePath,
                message: `命令 /${commandName} 安装成功`,
                generatedContent: commandContent
            };
        }
        catch (error) {
            // 6. ❌ 处理错误 - 统一错误处理和格式化
            return {
                success: false,
                commandName: this.sanitizeName(options.name),
                message: '安装失败',
                error: error instanceof Error ? error.message : '未知错误'
            };
        }
    }
    /**
     * 🚀 主要API #2: 创建并安装Claude Code Subagent（一步完成）
     *
     * 这是对外的核心接口，将用户的subagent配置转换为Claude Code可用的代理文件
     *
     * @param options subagent参数 - 用户提供的代理配置选项
     * @returns 安装结果 - 包含成功状态、文件路径、错误信息等
     */
    static async createSubagent(options) {
        try {
            // 1. 🔍 验证参数 - 调用validateSubagentOptions()确保输入合法
            const validation = this.validateSubagentOptions(options);
            if (!validation.valid) {
                return {
                    success: false,
                    subagentName: options.name,
                    message: '参数验证失败',
                    error: validation.errors.join(', ')
                };
            }
            // 2. 📝 生成subagent内容 - 调用generateSubagentContent()创建代理格式
            const subagentContent = this.generateSubagentContent(options);
            // 3. 📁 确定文件路径 - 调用sanitizeName()生成安全文件名
            const baseDir = options.targetDir || './.claude';
            const agentsDir = join(baseDir, 'agents');
            const subagentName = this.sanitizeName(options.name);
            const filePath = join(agentsDir, `${subagentName}.md`);
            // 4. 💾 安装到文件系统 - 调用writeFile()自动创建目录并写入文件
            await writeFile(filePath, subagentContent);
            // 5. ✅ 返回成功结果
            return {
                success: true,
                subagentName,
                filePath,
                message: `Subagent ${subagentName} 安装成功`,
                generatedContent: subagentContent
            };
        }
        catch (error) {
            // 6. ❌ 处理错误 - 统一错误处理和格式化
            return {
                success: false,
                subagentName: this.sanitizeName(options.name),
                message: '安装失败',
                error: error instanceof Error ? error.message : '未知错误'
            };
        }
    }
    /**
     * 🔧 内部方法: 生成命令内容 - 为 createCommand() API 服务
     *
     * 将用户的命令选项转换为Claude Code标准的frontmatter格式文件
     * 这是 createCommand() 第2步调用的核心格式化方法
     */
    static generateContent(options) {
        // 生成带frontmatter的Claude Code标准格式
        let content = '---\n';
        // 必需字段：描述
        const description = options.description || `${options.name} 命令`;
        content += `description: "${description}"\n`;
        // 可选字段
        if (options.argumentHint) {
            content += `argument-hint: "${options.argumentHint}"\n`;
        }
        if (options.model) {
            content += `model: "${options.model}"\n`;
        }
        if (options.allowedTools && options.allowedTools.length > 0) {
            content += 'allowed-tools:\n';
            for (const tool of options.allowedTools) {
                content += `  - "${tool}"\n`;
            }
        }
        // 自定义字段
        if (options.customFields) {
            for (const [key, value] of Object.entries(options.customFields)) {
                if (Array.isArray(value)) {
                    content += `${key}:\n`;
                    for (const item of value) {
                        content += `  - "${item}"\n`;
                    }
                }
                else {
                    content += `${key}: "${value}"\n`;
                }
            }
        }
        content += '---\n\n';
        content += options.content.trim() + '\n';
        return content;
    }
    /**
     * 🔍 内部方法: 验证命令输入参数 - 为 createCommand() API 服务
     *
     * 检查用户提供的命令选项是否符合要求
     * 这是 createCommand() 第1步调用的参数校验方法
     */
    static validateOptions(options) {
        const errors = [];
        if (!options.name || typeof options.name !== 'string') {
            errors.push('命令名称是必需的');
        }
        else if (!/^[a-zA-Z0-9\u4e00-\u9fa5_-]+$/.test(options.name)) {
            errors.push('命令名称只能包含字母、数字、中文、下划线和连字符');
        }
        if (!options.content || typeof options.content !== 'string') {
            errors.push('命令内容是必需的');
        }
        else if (options.content.trim().length === 0) {
            errors.push('命令内容不能为空');
        }
        return { valid: errors.length === 0, errors };
    }
    /**
     * 🔍 内部方法: 验证Subagent输入参数 - 为 createSubagent() API 服务
     *
     * 检查用户提供的subagent选项是否符合要求
     * 这是 createSubagent() 第1步调用的参数校验方法
     */
    static validateSubagentOptions(options) {
        const errors = [];
        if (!options.name || typeof options.name !== 'string') {
            errors.push('Subagent名称是必需的');
        }
        else if (!/^[a-zA-Z0-9\u4e00-\u9fa5_-]+$/.test(options.name)) {
            errors.push('Subagent名称只能包含字母、数字、中文、下划线和连字符');
        }
        if (!options.description || typeof options.description !== 'string') {
            errors.push('Subagent描述是必需的');
        }
        else if (options.description.trim().length === 0) {
            errors.push('Subagent描述不能为空');
        }
        if (!options.content || typeof options.content !== 'string') {
            errors.push('Subagent内容是必需的');
        }
        else if (options.content.trim().length === 0) {
            errors.push('Subagent内容不能为空');
        }
        return { valid: errors.length === 0, errors };
    }
    /**
     * 🔧 内部方法: 生成Subagent内容 - 为 createSubagent() API 服务
     *
     * 将用户的subagent选项转换为Claude Code标准的代理文件格式
     * 这是 createSubagent() 第2步调用的核心格式化方法
     */
    static generateSubagentContent(options) {
        // 生成标准Claude Code Subagent格式
        let content = '---\n';
        // 必需字段
        content += `name: ${options.name}\n`;
        content += `description: ${options.description}\n`;
        // 可选工具字段
        if (options.tools && options.tools.length > 0) {
            content += `tools: ${options.tools.join(', ')}\n`;
        }
        content += '---\n\n';
        content += options.content.trim() + '\n';
        return content;
    }
    /**
     * 🧹 内部方法: 清理命令名称 - 为两个主要API服务
     *
     * 将用户输入的名称转换为安全的文件名格式
     * 这是两个API第3步调用的文件名规范化方法，确保生成的文件名符合系统要求
     */
    static sanitizeName(name) {
        return name
            .toLowerCase()
            .replace(/[^a-zA-Z0-9\u4e00-\u9fa5-]/g, '-') // 支持中文
            .replace(/-+/g, '-')
            .replace(/^-+|-+$/g, '');
    }
}
// 默认导出
export default ClaudeCodeBuilder;
